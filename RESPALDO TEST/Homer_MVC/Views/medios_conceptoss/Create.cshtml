@model Homer_MVC.ViewModels.medios.ViewModeloMediosMtto

@{
    ViewBag.Title = "Mantenimiento de Conceptos";
    ViewBag.Icono = "fa fa-share";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    @Styles.Render("~/bundles/select2/css")
    <link href="~/Vendor/BootstrapMultiselect/multiselect.css" rel="stylesheet" />
    <link href="~/Vendor/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <link href="~/Vendor/sweetalert/lib/sweet-alert.css" rel="stylesheet" />
    <link href="~/Vendor/bootstrap-toggle-master/css/bootstrap-toggle.min.css" rel="stylesheet" />
}

<div class="panel-body">
    <div class="panel-heading" style="background-color:white;  border:solid 1px; border-color:#e4e5e7">
        <div class="panel-body">

            <div id="hbreadcrumb" class="pull-right">

                <button type="button" class="btn btn-mini btn-default" style="border-radius:25px" data-container="body" data-toggle="popover" data-placement="left" data-title="Enlaces" data-content="<ul>@ViewBag.nombreEnlaces</ul>" data-html="true">
                    <i class="text-info fa fa-tags"></i>
                </button>
                <button type="button" class="btn btn-mini btn-default" style="border-radius:25px" data-container="body" data-toggle="popover" data-placement="left" data-title="Documentos" data-content="<ul></i><a href=''>Documento 1</a></ul>  <ul></i><a href=''>Documento 2</a></ul> <ul></i><a href=''>Documento 3</a></ul>" data-html="true">
                    <i class="text-primary fa fa-files-o"></i>
                </button>
                <button type="button" class="btn btn-mini btn-default" style="border-radius:25px" data-container="body" data-toggle="popover" data-placement="left" data-title="Favoritos" data-content="@ViewBag.Favoritos" data-html="true">
                    <i class="text-warning fa fa-star"></i>
                </button>

            </div>
            <h3 class="font-light m-b-xs">
                <i class="text-info @ViewBag.Icono"></i>&nbsp;&nbsp;@ViewBag.Title
            </h3>
            <small>Registro @ViewBag.Title</small>
        </div>
    </div>
</div>

<div class="panel-body" style="padding-top:0px;">
    <div class="hpanel">
        @if (TempData["mensaje"] != null)
        {
            <div class="alert alert-success  alert-dismissible" id="mensaje">
                <button type="button" class="close" data-dismiss="alert" arial-label="close"><span aria-hidden="true">&times;</span></button>
                <p>@TempData["mensaje"]</p>
            </div>
        }

        @if (TempData["mensaje_error"] != null)
        {
            <div class="alert alert-danger  alert-dismissible" id="mensaje_error">
                <button type="button" class="close" data-dismiss="alert" arial-label="close"><span aria-hidden="true">&times;</span></button>
                <p>@TempData["mensaje_error"]</p>
            </div>
        }

        <div id="tabs" class="tab-content">

            <div class="m float-e-margins text-right">
                <div class="tooltip-demo">

                    <div id="div-mensaje"></div>

                </div>
            </div>

            <ul id="tabs-crear" class="nav nav-tabs">
                <li class="active"><a data-toggle="tab" href="#crear"><i class="@ViewBag.Icono"></i>&nbsp;&nbsp;@ViewBag.Title</a></li>
                <li class=""><a data-toggle="tab" href="#buscar"><i class="fa fa-search"></i>&nbsp;&nbsp;Búsquedas</a></li>
            </ul>

            <div id="crear" class="tab-pane active">
                <div class="panel-body">
                    @*@using (Html.BeginForm())*@
                    @using (Html.BeginForm("AgregarConcepto", "medios_conceptoss", FormMethod.Post, new { @name = "regConcepto", @id = "regConcepto" }))
                   
                {

                        @*@Html.AntiForgeryToken()
                            @Html.Hidden("menu")*@

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="hpanel">
                                <div class="panel-heading hbuilt" style="background-color:#e4e5e7">
                                    <div class="panel-tools">
                                        <a class="showhide"><i class="fa fa-chevron-up"></i></a>
                                    </div>
                                    <i class="@ViewBag.Icono"></i>&nbsp;&nbsp;&nbsp;Datos Generales del Concepto
                                </div>
                                <div class="panel-body">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Formato:&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-md-6">
                                                @Html.DropDownList("idformato", null, htmlAttributes: new { @class = "form-control", @placeholder = "Seleccione...", @id = "idformato", @Name = "idformato", @required = "required" })
                                                @Html.ValidationMessageFor(model => model.View_concepto.idformato, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Concepto:&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-md-6">
                                                @Html.EditorFor(model => model.View_concepto.concepto, new { htmlAttributes = new { @class = "form-control", @placeholder = "Digite Concepto", @id = "concepto", @Name = "concepto", @minlength = "4", @maxlength = "4", @oninput = "if(this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);", @required = "required" } })
                                                @Html.ValidationMessageFor(model => model.View_concepto.concepto, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Descripción:&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-md-6">
                                                @*<input type="text" class="form-control" id="descripcion" placeholder="Digite Descripcion"/>*@
                                                @Html.EditorFor(model => model.View_concepto.descripcion, new { htmlAttributes = new { @class = "form-control", @placeholder = "Digite Descripcion", @id = "descripcion", @Name = "descripcion", @required = "required" } })
                                                @Html.ValidationMessageFor(model => model.View_concepto.descripcion, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    @*<div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Tope:&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-md-6">*@
                                                @*<input type="text" class="form-control" id="tope" placeholder="Digite Tope" onkeypress="return soloNumeros(event)" onkeyUp="return miles(this.id)" />*@
                                                @*@Html.EditorFor(model => model.View_concepto.tope, new { htmlAttributes = new { @class = "form-control", @placeholder = "Digite Tope", @type = "numeric", @id = "tope", @Name = "tope", @onkeypress = "return soloNumeros(event)", @onkeyUp = "return miles(this.id)", @required = "required" } })
                                                @Html.ValidationMessageFor(model => model.View_concepto.tope, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>*@
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Estado:<span class="text-danger">*&nbsp;</span></label>
                                            <div class="col-md-6">
                                                @Html.CheckBoxFor(model => model.View_concepto.estado, new { @checked = "checked", @data_toggle = "toggle", @data_size = "mini" ,@id = "estado", @name = "estado" })
                                            </div>
                                        </div>
                                    </div>

                                    
                                    <div class="col-md-6"></div>
                                    <div class="col-sm-6" id="inactividad" style="display:none">
                                        <div class="form-group">
                                            <label class="control-label col-md-4">Razón Inactividad:&nbsp;<span class="text-danger">*</span></label>
                                            <div class="col-md-6">
                                                @*<input type="text" class="form-control" id="razon_inactivo" placeholder="Digite Razon de Inactividad" />*@
                                                @Html.EditorFor(model => model.View_concepto.razon_inactivo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Digite Razón Inactividad", @id = "razon_inactivo", @Name = "razon_inactivo" } })
                                                @Html.ValidationMessageFor(model => model.View_concepto.razon_inactivo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <div class="panel-body-btns text-right">
                                                <button type="submit" class="btn btn-info" name="submitConcepto" id="submitConcepto"><font><font>Guardar Concepto</font></font></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div id="buscar" class="tab-pane">
                <div class="panel-body">
                    <div class="panel-body-busqueda">
                        <div class="table-responsive">
                            <div id="div-mensaje-buscar"></div>
                            <table class="table table-striped table-bordered table-hover" id="tablaPaginada">
                                <thead>
                                    <tr>
                                        <th style="text-align:center">Formato</th>
                                        <th style="text-align:center">Concepto</th>
                                        <th style="text-align:center">Descripción</th>
                                        <th style="text-align:center">Estado</th>
                                        <th style="text-align:center">Acción</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>




        </div>
    </div>
</div>




@section Scripts {
    @Scripts.Render("~/bundles/select2/js")
    <script src="~/Vendor/BootstrapMultiselect/multiselect.js"></script>
    <script src="~/Vendor/datatables/media/js/jquery.dataTables.min.js"></script>
    <script src="~/Vendor/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
    <script src="~/Vendor/datatables.net-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Vendor/datatables.net-buttons/js/buttons.print.min.js"></script>
    <script src="~/Vendor/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Vendor/datatables.net-buttons-bs/js/buttons.bootstrap.min.js"></script>
    <script src="~/Vendor/datatablesExcelExport/dataTable1.4.0-buttons.js"></script>
    <script src="~/Vendor/datatablesExcelExport/JSZip3.1.3.min.js"></script>
    <script src="~/Vendor/pdfmake/build/pdfmake.min.js"></script>
    <script src="~/Vendor/pdfmake/build/vfs_fonts.js"></script>
    <script src="~/Vendor/datatablesExcelExport/jsZipDataTables.js"></script>
    <script src="~/Vendor/sweetalert/lib/sweet-alert.min.js"></script>
    <script src="~/Vendor/sweetalert/lib/sweet-alert.js"></script>
    <script src="~/Vendor/bootstrap-toggle-master/js/bootstrap-toggle.min.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        debugger;
            buscarTodosConceptos();

            $('.js-source-states').select2();

            if ($('#estado').prop('checked')) {
                // $('#razon_inactivo').val('');
                $('#razon_inactivo').removeAttr("required");
                $('#inactividad').hide();
            }
           
            
        });

       

        $('#estado').change(function () {
            if ($('#estado').prop('checked')) {
                $('#inactividad').hide();
                $('#razon_inactivo').val('No aplica');
            } else {
                $('#razon_inactivo').val('');
                $('#inactividad').show();
            }
        });

        $('#submitConcepto').click(function (e) {
            debugger;
            $("#concepto").prop('required', true);

            var est = true;
            if ($('#estado').prop('checked')) {
                est = true;
            } else {
                est = false;
            }

            var Westado = est;

            var Wconcepto = parseInt($("#concepto").val());
            var Wformato = parseInt($("#idformato").val());
            var Wdescripcion = $("#descripcion").val();
           // var Wtope = quitCommas($("#tope").val());
            //var Westado = $('#estado').val();
            var Wrazoninactivo = $("#razon_inactivo").val();

            console.log(" SubmitConcepto Concepto: " + Wconcepto
                + " formato: " + Wformato
                + " Descri : " + Wdescripcion
                + " Estado  : " + Westado
                + " Razon : " + Wrazoninactivo);
            debugger;
            if (Wconcepto == '')
            {
                //$('#mensajeAgregarConstantes').text('Los campos marcados con (*) son obligatorios');
                //$('#alertAgregarConstantes').show();
                //setTimeout(function () {
                //    $("#alertAgregarConstantes").fadeOut(1500);
                //}, 3000);
                console.log("  Hay algun campo sin datos para el concepto");
                // swal("Alerta Información!", "Existe algun campo sin al información requerida  !", "success");


            }
            else
            {

                var form = $('#regConcepto');
                var valid = this.form.checkValidity();
                if (valid) {
                    event.preventDefault();
                    $.ajax
                       (
                        {
                            url: '/medios_conceptoss/AgregarConcepto',
                            type: 'POST',
                            data:
                                 {
                                     idformato: Wformato,
                                     concepto: Wconcepto,
                                     descripcion: Wdescripcion,
                                   //  tope: Wtope,
                                     estado: Westado,
                                     razon_inactivo: Wrazoninactivo,
                                 },
                            beforeSend: function (objeto) {
                                //$('#mensaje_enviando').show();
                                //$('#cuerpo_mensaje_enviando').html('<i class="fa fa-spinner text-center" aria-hidden="true" ></i> Enviando datos...')
                                //setTimeout(function () {
                                //    $("#mensaje_enviando").fadeOut(1500);
                                //}, 3000);
                                console.log(" Antes de Send ");
                            },
                        }).done(function (result) {
                            console.log(" el resultado fue 1");
                            if (result == 1) {
                                //$("#mensaje").html('<i class="fa fa-check" aria-hidden="true" ></i> Definicion de Movimientos y Cuentas agregado con exito');
                                //$("#mensaje").show();
                                //setTimeout(function () {
                                //    $("#mensaje").fadeOut(1500);
                                //}, 3000);
                                
                                $('.form-control').on('blur click', function () {
                                    $(this).val(""); /// inicializar todos los controles
                                });
                                swal("Información!", "Se ha Agregado con exito el Concepto!!!!", "success");
                                console.log(" el resultado fue 1");
                                buscarTodosConceptos();

                            }
                            else {
                                console.log("  el resultado fue  0 ");
                                // swal("Alerta Información!", "Ya Existe el formato que intenta ingresar  !", "success");
                                //$("#mensaje_error").html('<i class="fa fa-times" aria-hidden="true" ></i> Error en guardar Definicion de Moviminetos y Cuentas');
                                //$("#mensaje_error").show();
                                buscarTodosConceptos();
                            }
                        });
                }
                else {
                    console.log("  no hubo resultado ");
                    //  swal("Alerta Error!", "Error en guardar Formato !", "success");
                    //$("#mensaje_error").html('<i class="fa fa-times" aria-hidden="true" ></i> Error en guardar Definicion Moviminetos y Cuentas.');
                    //$("#mensaje_error").show();
                }
            }
        });


        function  buscarTodosConceptos() {
            
           event.preventDefault();
            $.ajax({
                url: '/medios_conceptoss/BuscarAllConceptos',
                data: {
                },
                type: "post",
                cache: false,
                success: function (data) {
                    $("#tablaPaginada").dataTable().fnDestroy();
                    $('#tablaPaginada').find('tbody').empty();
                    for (var i = 0; i < data.length; i++)
                    {
                        $('#tablaPaginada').find('tbody').append('<tr><td align="center">'
                         + data[i].desf + '</td><td align="center">'
                         + data[i].concepto + '</td><td align="center">'
                         + data[i].descripcion + '</td><td align="center">'
                         + data[i].conc_estado + '</td><td width="5%" align="center"><button class="btn btn-info btn-xs" onclick="modif('
                         + '\'' + data[i].id + '\')">&nbsp;&nbsp;Modifica&nbsp;&nbsp;</button></td></tr>');
                    
                        //$('#tablaPaginada').find('tbody').append('<tr><td align="center">'
                        //+ data[i].desf + '</td><td align="center">'
                        //+ data[i].concepto + '</td><td align="center">'
                        //+ data[i].descripcion + '</td><td align="center">'
                        //+ data[i].conc_estado + '</td><td width="5%" align="center"><button class="btn btn-info btn-xs" onclick="modif('
                        //+ '\'' + data[i].id + '\')">&nbsp;&nbsp;Modifica&nbsp;&nbsp;</button><button class="btn btn-danger btn-xs" onclick="EliminarConcepto('
                        //+ '\'' + data[i].id + '\')">&nbsp;&nbsp;Elimina&nbsp;&nbsp;</button></td></tr>');
                    }
                },
                complete: function (data) {
                    $('#tablaPaginada').dataTable({
                     //"ajax": 'api/datatables.json',
                     //dom: "<''<'col-sm-4'l><'col-sm-4 text-center'B><'col-sm-4'f>>t<'col-sm-4'i>p",
                      dom: "<''<'col-md-6'l><'col-md-6'f>>t<'col-md-4'i><'col-md-8 text-right'pB>",
                        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
                        buttons: [
                    //        { extend: 'excel', className: 'btn-sm', text: 'Exportar a Excel' },
                            //{ extend: 'pdf', title: 'ExampleFile', className: 'btn-sm', text: 'PDF' },
                            //{ extend: 'print', className: 'btn-sm', text: 'Imprimir' }
                        ]
                    });
                }
            })
        }

        

        //************funciones Globales Generales  inicio
        function addCommas(nStr) {
            nStr += '';
            x = nStr.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + '.' + '$2');
            }
            return x1 + x2;
        }

        var numero_miles = "";

        function formatNumber(n) {
            n = String(n).replace(/\D/g, "");
            return n === '' ? n : String(n).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        function miles(id) {
            numero_miles = formatNumber($('#' + id + '').val());
            $('#' + id + '').val(numero_miles);
        }

        function soloNumeros(e) {
            key = e.keyCode || e.which;
            tecla = String.fromCharCode(key).toLowerCase();
            letras = "1234567890";
            especiales = "8-37-39-46";

            tecla_especial = false
            for (var i in especiales) {
                if (key == especiales[i]) {
                    tecla_especial = true;
                    break;
                }
            }
            if (letras.indexOf(tecla) == -1 && !tecla_especial) {
                return false;
            }
        }

        function quitCommas(nStr) {
            nStr.toString();
            //console.log(nStr);
            var s = nStr.replace(/\./g, "");
            return s;
        }
        //************funciones Globales Generales fin

        function modif(id) {
            @*window.location.href = '@Url.Action("Edit", "medios_formatos")?menu='+@ViewBag.id_menu+'&&id=' + id;*@
            window.location.href = '@Url.Action("Edit", "medios_conceptoss")?id=' + id;
        }

        function EliminarConcepto(id) {

            console.log("estamos en la funcion eliminar Concepto ");
            event.preventDefault();

            swal({
                title: "Estás seguro?",
                text: "Se Eliminara el Concepto !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Aceptar!!',
                cancelButtonText: "Cancelar!!",
                closeOnConfirm: false,
                closeOnCancel: false
            },
            function (isConfirm) {
                if (isConfirm) {

                    $.ajax({
                        url: '/medios_conceptoss/eliminarConcepto',
                        data: {
                            idDetalle: id,
                        },
                        type: "post",
                        cache: false,
                        success: function (data) {
                            if (data == true) {
                                swal("Eliminado!", "Se ha Eliminado el Concepto!", "success");
                                // MostrarTodasDefDocumentosDB(xidMed, xVal, xxTipoDato);
                                // buscarTodosFormatos();
                                buscarTodosConceptos();
                            }
                        }
                    });

                } else {
                    swal("Cancelado", "No se Eliminado el Concepto ", "error");
                }
            });
          //  buscarTodosFormatos();
        }

        @*function AgregarQuitarFavorito()
        {
            $.ajax({
                url: '/Inicio/AgregarQuitarFavorito',
                data: {
                    id_menu: @ViewBag.id_menu,
                },
                type: "post",
                cache: false,
                success: function (data) {
                    if(data.esFavorito == true){
                        $('#areaFavoritos').html("<i class='fa fa-close'></i>&nbsp;&nbsp;<a href='#' onclick='AgregarQuitarFavorito();return false;'>Quitar de Favoritos</a>");
                    }else{
                        $('#areaFavoritos').html("<i class='fa fa-check'></i>&nbsp;&nbsp;<a href='#' onclick='AgregarQuitarFavorito();return false;'>Agregar de Favoritos</a>");
                    }
                }
            })
        }*@

        function reservaMensaje ()
        {
            swal({
                title: "Estás seguro?",
                text: "Se Eliminara el Concepto !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: '#DD6B55',
                confirmButtonText: 'Aceptar!!',
                cancelButtonText: "Cancelar!!",
                closeOnConfirm: false,
                closeOnCancel: false
            },
             function (isConfirm) {
                 if (isConfirm) {

                    // aqui el ajax

                 } else {
                     swal("Cancelado", "No se Eliminado la Definicion del Concepto ", "error");
                 }
             });
        }



</script>

}







@*@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>medios_conceptos</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.idformato, "idformato", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("idformato", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idformato, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.concepto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.concepto, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.concepto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.tope, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.tope, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tope, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.id_licencia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.id_licencia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.id_licencia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fec_creacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fec_creacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fec_creacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.userid_creacion, "userid_creacion", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("userid_creacion", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.userid_creacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fec_actualizacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fec_actualizacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fec_actualizacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.user_idactualizacion, "user_idactualizacion", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("user_idactualizacion", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.user_idactualizacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.estado)
                    @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.razon_inactivo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.razon_inactivo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.razon_inactivo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
