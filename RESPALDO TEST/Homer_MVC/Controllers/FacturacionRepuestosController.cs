using Homer_MVC.IcebergModel;
using Homer_MVC.Models;
using Homer_MVC.ViewModels.medios;
using Rotativa;
using Rotativa.Options;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web.Mvc;

namespace Homer_MVC.Controllers
{
    public class FacturacionRepuestosController : Controller
    {
        private readonly Iceberg_Context context = new Iceberg_Context();

        private CultureInfo Cultureinfo = new CultureInfo("is-IS");

        private static Expression<Func<vw_prefacturas, string>> GetColumnName(string property)
        {
            ParameterExpression menu = Expression.Parameter(typeof(vw_prefacturas), "menu");
            MemberExpression menuProperty = Expression.PropertyOrField(menu, property);
            Expression<Func<vw_prefacturas, string>> lambda = Expression.Lambda<Func<vw_prefacturas, string>>(menuProperty, menu);

            return lambda;
        }

        public void listas()
        {
            //cambio de consulta se le agrega el estado para traer los clientes activos
            ViewBag.doc_registros = context.tp_doc_registros.Where(x => x.tipo == 4);
            ViewBag.moneda = new SelectList(context.monedas, "moneda", "descripcion", 1);
            ViewBag.pedido = context.icb_referencia_mov.ToList();

            ViewBag.condicion_pago = context.fpago_tercero;

            var provedores = from pro in context.tercero_cliente
                             join ter in context.icb_terceros
                                 on pro.tercero_id equals ter.tercero_id
                             where pro.tercli_estado == true
                             select new
                             {
                                 documento_cliente = ter.doc_tercero != null ? ter.doc_tercero : "",
                                 value = ter.tercero_id,
                                 text = ter.doc_tercero != null
                                     ? "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                                       ter.apellido_tercero + " " + ter.segapellido_tercero
                                     : "",
                                 razonSocial = ter.razon_social != null ? ter.razon_social : ""
                             };

            ViewBag.cliente = new SelectList(provedores, "value", "text", "documento_cliente");

            //ViewBag.codigo = new SelectList(context.icb_referencia.Where(x=> x.modulo == "R"), "ref_codigo", "ref_descripcion");
            ViewBag.codigo = context.icb_referencia.Where(x => x.modulo == "R").ToList();
            List<users> asesores = context.users.Where(x => x.rol_id == 4 || x.rol_id == 6).ToList();
            List<SelectListItem> listaAsesores = new List<SelectListItem>();
            foreach (users asesor in asesores)
            {
                listaAsesores.Add(new SelectListItem
                { Value = asesor.user_id.ToString(), Text = asesor.user_nombre + " " + asesor.user_apellido });
            }

            ViewBag.vendedor = listaAsesores;

            encab_documento buscarUltimaFactura = context.encab_documento.OrderByDescending(x => x.idencabezado).FirstOrDefault();
            ViewBag.numFacturaCreada = buscarUltimaFactura != null ? buscarUltimaFactura.numero : 0;
            ViewBag.kits = context.kitsaccesorios.OrderBy(x => x.Descripcion).ToList();
            ViewBag.tarifas = new SelectList(context.rtipocliente.OrderBy(x => x.descripcion), "id", "descripcion", 2);
            int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
            var buscarCentro = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
            {
                value = x.centcst_id,
                text = x.pre_centcst + " - " + x.Tipos_Cartera.descripcion
            }).ToList();

            ViewBag.centro = new SelectList(buscarCentro, "value", "text");
        }

        public void listas2(NotasContablesModel modelo)
        {
            string a = context.icb_sysparameter.Where(x => x.syspar_cod == "P26").Select(x => x.syspar_value)
                .FirstOrDefault();
            int param = Convert.ToInt32(a);

            /*var b = context.icb_sysparameter.Where(x => x.syspar_cod == "P26").Select(x => x.syspar_value).FirstOrDefault();
			var param = Convert.ToInt32(a);*/

            /*var doc_registros = context.tp_doc_registros.Where(x => x.tipo == 4)
                .Select(d => new { id = d.tpdoc_id, nombre = d.tpdoc_nombre });
            ViewBag.tipo = new SelectList(doc_registros, "id", "nombre", modelo.tipo);*/
            ViewBag.doc_registros = context.tp_doc_registros.Where(x => x.tipo == 4);

            var buscarConceptos1 = (from concepto1 in context.tpdocconceptos
                                    where concepto1.tipodocid == modelo.tipo
                                    select new
                                    {
                                        concepto1.id,
                                        concepto1.Descripcion
                                    }).ToList();

            var buscarConceptos2 = (from concepto2 in context.tpdocconceptos2
                                    where concepto2.tipodocid == modelo.tipo
                                    select new
                                    {
                                        concepto2.id,
                                        concepto2.Descripcion
                                    }).ToList();

            ViewBag.concepto = new SelectList(buscarConceptos1, "id", "Descripcion", modelo.concepto);
            ViewBag.concepto2 = new SelectList(buscarConceptos2, "id", "Descripcion", modelo.concepto2);

            ViewBag.moneda = new SelectList(context.monedas, "moneda", "descripcion", 1);

            ViewBag.moneda = new SelectList(context.monedas, "moneda", "descripcion", 1);
            var pedidos = context.icb_referencia_mov.Where(d =>
                d.tpdocid == param && d.cliente == modelo.nit && d.bodega_id == modelo.bodega &&
                d.idanulacion == null && d.estado).Select(d => new
                {
                    id = d.refmov_id,
                    descripcion = d.refmov_numero + " - " + d.refmov_fecela,
                    asesor = d.vendedor
                }).ToList();

            ViewBag.pedido = new SelectList(pedidos, "id", "descripcion", modelo.pedido);
            string nombrepedido = "";
            if (modelo.pedido != null)
            {
                //busco el pedido
                vpedido pedidon = context.vpedido.Where(d => d.id == modelo.pedido).FirstOrDefault();
                if (pedidon != null)
                {
                    nombrepedido = pedidon.numero + " - " +
                                   pedidon.fec_creacion.ToString("yyyy/MM/dd", new CultureInfo("en-US"));
                }
            }

            ViewBag.nombrepedido = nombrepedido;
            var formadepago = context.fpago_tercero.Select(d => new
            {
                id = d.fpago_id,
                nombre = d.fpago_nombre
            }).ToList();
            ViewBag.fpago_id = new SelectList(formadepago, "id", "nombre", modelo.fpago_id);
            //ViewBag.condicion_pago = context.fpago_tercero;

            /*var provedores = from pro in context.tercero_cliente
                             join ter in context.icb_terceros
                                 on pro.tercero_id equals ter.tercero_id
                             select new
                             {
                                 value = ter.tercero_id,
                                 text = ter.doc_tercero != null
                                     ? "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                                       ter.apellido_tercero + " " + ter.segapellido_tercero
                                     : "",
                                 razonSocial = ter.razon_social != null ? ter.razon_social : ""
                             };

            ViewBag.nit = new SelectList(provedores, "value", "text", modelo.nit);*/
            var provedores = from pro in context.tercero_cliente
                             join ter in context.icb_terceros
                                 on pro.tercero_id equals ter.tercero_id
                             select new
                             {
                                 documento_cliente = ter.doc_tercero != null ? ter.doc_tercero : "",
                                 value = ter.tercero_id,
                                 text = ter.doc_tercero != null
                                     ? "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                                       ter.apellido_tercero + " " + ter.segapellido_tercero
                                     : "",
                                 razonSocial = ter.razon_social != null ? ter.razon_social : ""
                             };

            ViewBag.cliente = new SelectList(provedores, "value", "text", "documento_cliente");

            //ViewBag.codigo = new SelectList(context.icb_referencia.Where(x=> x.modulo == "R"), "ref_codigo", "ref_descripcion");
            ViewBag.codigo = context.icb_referencia.Where(x => x.modulo == "R").ToList();

            List<users> asesores = context.users.Where(x => x.rol_id == 4 || x.rol_id == 1).ToList();
            var asesores2 = asesores.Select(d => new
            {
                //Value = d.user_id.ToString(),
                Value = d.user_id,
                Text = d.user_nombre + " " + d.user_apellido
            }).ToList();

            ViewBag.vendedor = new SelectList(asesores2, "value", "text", modelo.vendedor);

            encab_documento buscarUltimaFactura = context.encab_documento.OrderByDescending(x => x.idencabezado).FirstOrDefault();
            ViewBag.numFacturaCreada = buscarUltimaFactura != null ? buscarUltimaFactura.numero : 0;
            ViewBag.kits = context.kitsaccesorios.OrderBy(x => x.Descripcion).ToList();
            ViewBag.tarifas = new SelectList(context.rtipocliente.OrderBy(x => x.descripcion), "id", "descripcion", 2);
            ViewBag.facturas = buscarUltimaFactura;
            var bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado).Select(d => new
            {
                d.id,
                nombre = d.bodccs_nombre
            }).ToList();
            ViewBag.bodega = new SelectList(bodegas, "id", "nombre", modelo.bodega);
            int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
            var buscarCentro = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
            {
                value = x.centcst_id,
                text = x.pre_centcst + " - " + x.Tipos_Cartera.descripcion
            }).ToList();

            ViewBag.centro = new SelectList(buscarCentro, "value", "text", modelo.centro);
            //busco los perfiles contables
            var buscarPerfilContable = context.perfil_contable_documento.Where(x => x.tipo == modelo.tipo).Select(x =>
                new
                {
                    value = x.id,
                    text = x.descripcion
                }).ToList();
            ViewBag.perfilcontable = new SelectList(buscarPerfilContable, "value", "text", modelo.perfilcontable);
        }

        public JsonResult repuestosFactura(int? id)
        {
            int valor = 0;
            string respuesta = "";
            if (Session["user_usuarioid"] != null)
            {
                List<lineas_documento> lineas = context.lineas_documento.Where(d => d.id_encabezado == id).ToList();
                var repuestos = lineas.Select(d => new
                {
                    idlinea = d.id,
                    d.codigo,
                    nombre = d.icb_referencia.ref_descripcion,
                    d.und,
                    d.cantidad,
                    porcentaje_iva = d.porcentaje_iva ?? 0,
                    d.valor_unitario,
                    porcentaje_descuento = d.porcentaje_descuento ?? 0,
                    d.costo_unitario,
                    d.bodega,
                    d.id_tarifa_cliente,
                    nombre_tarifa = nombretipotarifa(d.id_tarifa_cliente),
                    d.centro_costo,
                    nombre_centro = nombrecentrocosto(d.centro_costo)
                }).ToList();

                valor = 1;
                var data = new
                {
                    repuestos,
                    respuesta,
                    valor
                };
                return Json(data);
            }
            else
            {
                respuesta = "Sesión finalizada.";
                var data = new
                {
                    respuesta,
                    valor
                };
                return Json(data);
            }
        }

        public string nombretipotarifa(int? id_tarifa_cliente)
        {
            string resultado = "";
            if (id_tarifa_cliente != null)
            {
                //busco el tipo de tarifa
                rtipocliente tipota = context.rtipocliente.Where(d => d.id == id_tarifa_cliente).FirstOrDefault();
                if (tipota != null)
                {
                    resultado = tipota.descripcion;
                }
            }

            return resultado;
        }

        public string nombrecentrocosto(int? id_centro_costo)
        {
            string resultado = "";
            if (id_centro_costo != null)
            {
                //busco el tipo de tarifa
                centro_costo tipota = context.centro_costo.Where(d => d.centcst_id == id_centro_costo).FirstOrDefault();
                if (tipota != null)
                {
                    resultado = tipota.centcst_nombre;
                }
            }

            return resultado;
        }

        public JsonResult tipoTarifa()
        {
            var buscar = context.rtipocliente.Select(x => new
            {
                x.id,
                x.descripcion
            }).OrderBy(x => x.id).ToList();

            return Json(buscar, JsonRequestBehavior.AllowGet);
        }

        public JsonResult tipo_tarifa_parametro()
        {
            var buscarParametros = context.rparametrotipocliente.Select(x => new
            {
                x.idtipocliente,
                x.valor, //si es 1 es costo y si es 2 es precio
                x.porcentaje,
                x.operacion //si es 1 suma si es 2 resta
            }).OrderBy(x => x.idtipocliente).ToList();
            return Json(buscarParametros, JsonRequestBehavior.AllowGet);
        }

        // GET: FacturacionRepuestos
        public ActionResult Index(int? menu)
        {
            BuscarFavoritos(menu);
            return View();
        }

        public ActionResult Facturar(int? menu)
        {
            listas();
            BuscarFavoritos(menu);
            return View();
        }

        public JsonResult agregarRepuesto(int? idEncabezado, string codigorepuesto, int? cantidad, string preciounitario, string porcentajeiva, string porcentajedescuento, string vendedor)
        {
            if (idEncabezado == null || string.IsNullOrWhiteSpace(codigorepuesto) || cantidad == null ||
                string.IsNullOrWhiteSpace(preciounitario) || string.IsNullOrWhiteSpace(porcentajeiva) ||
                string.IsNullOrWhiteSpace(porcentajedescuento))
            {
                return Json(0);
            }


            var pedido = (from a in context.encab_documento
                          join b in context.icb_referencia_mov
                              on a.pedido equals b.refmov_id
                          where a.idencabezado == idEncabezado
                          select b.refmov_numero).FirstOrDefault();

            //veo la orden
            lineas_documento datos = context.lineas_documento.Where(d => d.id_encabezado == idEncabezado).FirstOrDefault();

            string[] asesor = vendedor.Split(' ');
            var nombre_asesor = asesor[0];
            var apellido_asesor = asesor[1];

            var usuario = context.users.Where(d => d.user_nombre.Contains(nombre_asesor) && d.user_apellido.Contains(apellido_asesor)).Select(d => d.user_id).FirstOrDefault();

            if (datos != null)
            {
                //agrego el repuesto
                bool convertirpre = decimal.TryParse(preciounitario, out decimal preciore);
                bool convertiriva = decimal.TryParse(porcentajeiva, out decimal porciva);
                bool convertirdes = decimal.TryParse(porcentajedescuento, out decimal pordesc);





                lineas_documento nuevore = new lineas_documento
                {
                    id_encabezado = datos.id_encabezado,
                    codigo = codigorepuesto,
                    cantidad = cantidad.Value,
                    valor_unitario = preciore,
                    costo_unitario = preciore,
                    bodega = Convert.ToInt32(datos.bodega),
                    estado = true,
                    porcentaje_iva = (float)porciva,
                    porcentaje_descuento = (float)pordesc,
                    nit = datos.nit,
                    fec_creacion = DateTime.Now,
                    fec = DateTime.Now,
                    userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                    seq = datos.seq + 1,
                };
                context.lineas_documento.Add(nuevore);


                icb_referencia_mov ref_mov = new icb_referencia_mov
                {

                    refmov_id = Convert.ToInt32(datos.encab_documento.pedido),
                    tpdocid = 12,
                    bodega_id = Convert.ToInt32(datos.bodega),
                    refmov_numero = pedido,
                    refmov_fecela = DateTime.Now,
                    cliente = datos.nit,
                    vendedor = usuario,
                    condicion = 2,
                    dias_validez = 15,
                    valor_total = (cantidad.Value * preciore),
                };

                context.icb_referencia_mov.Add(ref_mov);

                int guardar = context.SaveChanges();

                if (guardar > 0)
                {
                    var data = new { idrep = nuevore.id };
                    return Json(1);
                }

                return Json(0);
            }

            return Json(0);
        }

        [HttpGet]
        public ActionResult SolicitudRepuestos(int id, int? menu)
        {


            var permisos = (from en in context.encab_documento
                            where en.idencabezado == id
                            select new { en.estado_factura, en.devolucion }).ToList();

            var resultado1 = permisos.Where(x => x.devolucion == true).Count() > 0 ? "Si" : "No";

            ViewBag.Permiso = resultado1;

            var listaFP = (from f in context.formas_pago
                           join b in context.bancos
                           on f.idbanco equals b.id into formas
                           from fd in formas.DefaultIfEmpty()
                           orderby fd.Descripcion
                           select new
                           {
                               f.id,
                               nombre = fd.Descripcion + " " + f.formapago + " " + fd.numero_cuenta + " "
                           }).ToList();

            List<SelectListItem> list = new List<SelectListItem>();
            foreach (var item in listaFP)
            {
                list.Add(new SelectListItem
                {
                    Text = item.nombre,
                    Value = item.id.ToString()
                });
            }
            ViewBag.FormaPago = list;

            var buscar = (from a in context.lineas_documento
                          join b in context.icb_referencia
                              on a.codigo equals b.ref_codigo
                          where a.id_encabezado == id
                          select new
                          {
                              id = a.id_tarifa_cliente,
                              text = a.rtipocliente.descripcion,

                          }).ToList();

            List<SelectListItem> list2 = new List<SelectListItem>();
            foreach (var item in buscar)
            {
                list2.Add(new SelectListItem
                {
                    Text = item.text,
                    Value = item.id.ToString()
                });
            }
            ViewBag.tarifa = list2;

            var buscarRepuestos = (from referencia in context.icb_referencia
                                   where referencia.modulo == "R" && referencia.ref_estado
                                   select new
                                   {
                                       referencia.ref_codigo,
                                       ref_descripcion = referencia.ref_codigo + " - " + referencia.ref_descripcion,
                                       referencia.manejo_inv
                                   }).ToList();
            ViewBag.repuestos = new SelectList(buscarRepuestos, "ref_codigo", "ref_descripcion");
            ViewBag.repuestosG = new SelectList(buscarRepuestos.Where(x => x.manejo_inv == false), "ref_codigo",
                "ref_descripcion");


            var listaB = (from b in context.icb_bolsa
                          where b.estado == true
                          select new
                          {
                              b.id,
                              b.bolsa
                          }).ToList();

            List<SelectListItem> lista = new List<SelectListItem>();
            foreach (var item in listaB)
            {
                lista.Add(new SelectListItem
                {
                    Text = item.bolsa,
                    Value = item.id.ToString()
                });
            }
            ViewBag.Bolsa = lista;

            var listaAnulacion = (from b in context.motivo_anulacion
                                      //where b.
                                  select new
                                  {
                                      b.id,
                                      b.motivo
                                  }).ToList();

            List<SelectListItem> lista2 = new List<SelectListItem>();
            foreach (var item in listaAnulacion)
            {
                lista2.Add(new SelectListItem
                {
                    Text = item.motivo,
                    Value = item.id.ToString()
                });
            }
            ViewBag.Motivo = lista2;

            var provedores = from a in context.encab_documento
                             join b in context.icb_terceros
                                 on a.nit equals b.tercero_id
                             where a.idencabezado == id
                             select new
                             {
                                 value = b.tercero_id,
                                 text = "(" + b.doc_tercero + ") -" + b.prinom_tercero + " " + b.segnom_tercero + " " +
                                        b.apellido_tercero + " " + b.segapellido_tercero,
                                 razonSocial = b.razon_social
                             };

            ViewBag.cliente1 = new SelectList(provedores, "value", "text");

            listas();
            lineas_documento lineas = context.lineas_documento.FirstOrDefault(x => x.id_encabezado == id);
            ViewBag.numero = lineas.encab_documento.numero;
            ViewBag.valor_total = lineas.encab_documento.valor_total;
            ViewBag.fecha = lineas.encab_documento.fecha;
            /*ViewBag.idencabezado = lineas.encab_documento.idencabezado != null? id: 0 ;
            ViewBag.idEncabezado = id != null ? id : 0;*/
            ViewBag.idencabezado = id;
            ViewBag.idEncabezado = id;
            ViewBag.factura = context.encab_documento.Where(x => x.idencabezado == id).Select(x => x.numero)
                .FirstOrDefault();
            ViewBag.fecha = context.encab_documento.Where(x => x.idencabezado == id).Select(x => x.fec_creacion)
                .FirstOrDefault();
            ViewBag.fechaVencimiento = context.encab_documento.Where(x => x.idencabezado == id)
                .Select(x => x.vencimiento).FirstOrDefault();
            ViewBag.tipoDocumento = (from a in context.encab_documento
                                     join b in context.tp_doc_registros
                                         on a.tipo equals b.tpdoc_id
                                     where a.idencabezado == id
                                     select b.tpdoc_nombre).FirstOrDefault();

            ViewBag.bodega = (from a in context.encab_documento
                              join b in context.bodega_concesionario
                                  on a.bodega equals b.id
                              where a.idencabezado == id
                              select b.bodccs_nombre).FirstOrDefault();

            var cliente = (from a in context.encab_documento
                           join b in context.icb_terceros
                               on a.nit equals b.tercero_id
                           where a.idencabezado == id
                           select new
                           {
                               b.doc_tercero,
                               b.prinom_tercero,
                               b.segnom_tercero,
                               b.apellido_tercero,
                               b.segapellido_tercero
                           }).FirstOrDefault();
            ViewBag.cliente2 = cliente.prinom_tercero + " " + cliente.segnom_tercero + " " + cliente.apellido_tercero +
                              " " + cliente.segapellido_tercero;

            ViewBag.cliente3 = cliente.doc_tercero;

            ViewBag.tipoPago = (from c in context.encab_documento
                                join f in context.fpago_tercero
                                    on c.fpago_id equals f.fpago_id
                                where c.idencabezado == id
                                select f.fpago_nombre).FirstOrDefault();

            ViewBag.moneda = (from c in context.encab_documento
                              join f in context.monedas
                                  on c.moneda equals f.moneda
                              where c.idencabezado == id
                              select f.descripcion).FirstOrDefault();

            ViewBag.perfil = (from a in context.encab_documento
                              join b in context.perfil_contable_documento
                                  on a.perfilcontable equals b.id
                              where a.idencabezado == id
                              select b.descripcion).FirstOrDefault();

            ViewBag.fletes = (from a in context.encab_documento
                              where a.idencabezado == id
                              select a.fletes).FirstOrDefault();

            ViewBag.ivafletes = (from a in context.encab_documento
                                 where a.idencabezado == id
                                 select a.iva_fletes).FirstOrDefault();

            ViewBag.ic_bolsa = (from a in context.encab_documento
                                where a.idencabezado == id
                                select a.valor_bolsa).FirstOrDefault();

            var asesor = (from a in context.encab_documento
                          join b in context.users
                              on a.vendedor equals b.user_id
                          where a.idencabezado == id
                          select new
                          {
                              b.user_nombre,
                              b.user_apellido
                          }).FirstOrDefault();

            ViewBag.asesor = asesor.user_nombre + " " + asesor.user_apellido;

            ViewBag.concepto1 = (from a in context.encab_documento
                                 join b in context.tpdocconceptos
                                     on a.concepto equals b.id
                                 where a.idencabezado == id
                                 select b.Descripcion).FirstOrDefault();

            ViewBag.concepto2 = (from a in context.encab_documento
                                 join b in context.tpdocconceptos2
                                     on a.concepto equals b.id
                                 where a.idencabezado == id
                                 select b.Descripcion).FirstOrDefault();

            ViewBag.observaciones = (from a in context.encab_documento
                                     where a.idencabezado == id
                                     select a.notas != null ? a.notas : "").FirstOrDefault();

            ViewBag.pedido = (from a in context.encab_documento
                              join b in context.icb_referencia_mov
                                  on a.pedido equals b.refmov_id
                              where a.idencabezado == id
                              select b.refmov_numero).FirstOrDefault();

            BuscarFavoritos(menu);
            return View();

        }

        [HttpPost]
        public ActionResult SolicitudRepuestos(NotasContablesModel modelo, int? menu)
        {
            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        int idencanbinter = 0;
                        int idencanbinternum = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;


                        var iva = Request["valorIVA"];
                        var totaliva = iva.Remove(0, 1);

                        int documentointerno = 0;
                        grupoconsecutivos grupo2 = new grupoconsecutivos();
                        long consecutivo2 = 0;

                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == modelo.perfilcontable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();

                        //int secuencia = 1;
                        //decimal totalDebitos = 0;
                        //decimal totalCreditos = 0;
                        List<ElementosFacturacion> listaelementos = new List<ElementosFacturacion>();
                        List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                        centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                        int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;
                        decimal ivatotal = Convert.ToDecimal(totaliva, Cultureinfo);
                        int bodega = Convert.ToInt32(Request["selectBodegas"]);
                        List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();
                        decimal valorTotal = Convert.ToDecimal(Request["valorFinal"], Cultureinfo);
                        int costoLineas = Convert.ToInt32(Request["lista_referencias"]);
                        decimal totalmargen = 0, margen = 0;
                        for (int i = 0; i <= costoLineas; i++)
                        {
                            if (!string.IsNullOrEmpty(Request["referencia" + i]))
                            {
                                int anio = DateTime.Now.Year;
                                int mes = DateTime.Now.Month;

                                string referencia = Request["referencia" + i];
                                vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                decimal? costoReferencia = vwPromedio.Promedio;

                                costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                      Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                //Calular el margen de utilidad
                                int cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]);
                                decimal valiva = Convert.ToDecimal(Request["ivaTotalReferencia" + i], Cultureinfo);
                                decimal valorT = Convert.ToDecimal(Request["valorTotalReferencia" + i], Cultureinfo);
                                CsCalcularMargenUtilidad calcularmargen = new CsCalcularMargenUtilidad();
                                margen = calcularmargen.MargenUtilidad(bodega, referencia, cantidad, valorT, valiva);
                                totalmargen = totalmargen + margen;


                                listaelementos.Add(new ElementosFacturacion
                                {
                                    tipo = "R",
                                    cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]),
                                    centro_costo = Request["centro_costo_tf" + i] != null ? Convert.ToInt32(Request["centro_costo_tf" + i]) : 0,
                                    codigo = Request["referencia" + i],
                                    porcentaje_descuento = Request["descuentoReferencia" + i] != null ? Convert.ToDecimal(Request["descuentoReferencia" + i]) : 0,
                                    porcentaje_iva = Request["ivaReferencia" + i] != null ? Convert.ToDecimal(Request["ivaReferencia" + i]) : 0,
                                    tipo_tarifa = Request["tipo_tarifa_hidden_" + i] != null ? Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]) : 0,
                                    valor_descuento = Request["totalDescuentoReferencia" + i] != null ? Convert.ToDecimal(Request["totalDescuentoReferencia" + i]) : 0,
                                    valor_iva = Request["ivaTotalReferencia" + i] != null ? Convert.ToDecimal(Request["ivaTotalReferencia" + i]) : 0,
                                    valor_unitario = Request["valorUnitarioReferencia" + i] != null ? Convert.ToDecimal(Request["valorUnitarioReferencia" + i]) : 0,
                                });

                            }
                        }

                        string lista = Request["lista_referencias"];
                        if (!string.IsNullOrEmpty(lista))
                        {
                            int datos = Convert.ToInt32(lista);
                            decimal costoTotal =
                                Convert.ToDecimal(Request["valor_proveedor"], Cultureinfo); //costo con retenciones y fletes
                            decimal ivaEncabezado = Convert.ToDecimal(totaliva, Cultureinfo); //valor total del iva
                            decimal descuentoEncabezado =
                                Convert.ToDecimal(Request["valorDes"], Cultureinfo); //valor total del descuento
                            decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos

                            decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                            //consecutivo
                            grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                x.documento_id == modelo.tipo && x.bodega_id == bodega);
                            if (grupo != null)
                            {
                                DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
                                long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                //Encabezado documento
                                int tipotarifa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P147").Select(z => z.syspar_value).FirstOrDefault());


                                int numinterna = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).Count();
                                int numnormal = listaelementos.Where(x => x.tipo_tarifa != tipotarifa).Count();


                                if (numnormal > 0)
                                {



                                    #region encabezado

                                    var encabezado = context.encab_documento.Find(modelo.idencabezado);


                                    encabezado.tipo = modelo.tipo;
                                    encabezado.numero = consecutivo;
                                    encabezado.nit = modelo.nit;
                                    encabezado.fecha = DateTime.Now;
                                    encabezado.estado_factura = 1;
                                    encabezado.devolucion = false;
                                    int? condicion = modelo.fpago_id;
                                    encabezado.fpago_id = condicion;
                                    //encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                    int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                    DateTime vencimiento = DateTime.Now.AddDays(dias);
                                    encabezado.vencimiento = vencimiento;
                                    encabezado.valor_total = costoTotal;
                                    encabezado.prefactura = false;
                                    encabezado.iva = ivaEncabezado;
                                    encabezado.margen_utilidad = totalmargen;
                                    // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                    #region calculo de retenciones

                                    tp_doc_registros buscarTipoDocRegistro =
                                       context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
                                    icb_terceros buscarProveedor =
                                        context.icb_terceros.FirstOrDefault(x => x.tercero_id == modelo.nit);
                                    int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id ?? 0 : 0;
                                    perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                        x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                        x.tipo_regimenid == regimen_proveedor);

                                    decimal retenciones = 0;

                                    if (buscarPerfilTributario != null)
                                    {
                                        if (buscarPerfilTributario.retfuente == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretfuente ?? 0))
                                        {
                                            encabezado.porcen_retencion = buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0;
                                            encabezado.retencion =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion;
                                        }

                                        if (buscarPerfilTributario.retiva == "A" &&
                                            ivaEncabezado >= (buscarPerfilTributario.baseretiva ?? 0))
                                        {
                                            encabezado.porcen_reteiva = buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0;
                                            encabezado.retencion_iva =
                                                Math.Round(encabezado.iva *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_iva;
                                        }

                                        if (buscarPerfilTributario.autorretencion == "A")
                                        {
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                            encabezado.porcen_autorretencion = (float)tercero_acteco;
                                            encabezado.retencion_causada =
                                                Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_causada;
                                        }

                                        if (buscarPerfilTributario.retica == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretica ?? 0))
                                        {
                                            terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                                x.idcodica == buscarProveedor.id_acteco && x.bodega == bodega);
                                            decimal tercero_acteco = buscarProveedor.id_acteco != null ? buscarProveedor.acteco_tercero.tarifa : 0;
                                            if (bodega_acteco != null)
                                            {
                                                encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }

                                            if (tercero_acteco != 0)
                                            {
                                                encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(
                                                                   buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                            else
                                            {
                                                encabezado.porcen_retica = (float)(buscarPerfilTributario.pretica ?? 0);
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                        }
                                    }

                                    #endregion

                                    if (modelo.fletes != null)
                                    {
                                        encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                        encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                    }

                                    encabezado.costo = costoPromedioTotal;
                                    encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                    encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
                                    string pedido = Request["pedido"];
                                    if (!string.IsNullOrEmpty(pedido))
                                    {
                                        encabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                    }

                                    encabezado.bodega = bodega;
                                    encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                    if (Request["tasa"] != "")
                                    {
                                        encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                    }

                                    encabezado.valor_mercancia = valor_totalenca;
                                    encabezado.fec_creacion = DateTime.Now;
                                    encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    encabezado.estado = true;
                                    encabezado.concepto = modelo.concepto;
                                    encabezado.concepto2 = modelo.concepto2;

                                    context.Entry(encabezado).State = EntityState.Modified;
                                    context.SaveChanges();

                                    int listaLineas2 = Convert.ToInt32(Request["lista_referencias"]);



                                    for (
                                 int i = 0; i <= listaLineas2; i++)
                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            var idlineas = context.lineas_documento.Where(d => d.id_encabezado == modelo.idencabezado).Select(d => d.id).FirstOrDefault();

                                            var lineas = context.lineas_documento.Find(idlineas);

                                            //lineas.id_encabezado = id;
                                            lineas.codigo = Request["referencia" + i];
                                            lineas.seq = i + 1;
                                            lineas.fec = DateTime.Now;
                                            lineas.nit = modelo.nit;
                                            lineas.und = Convert.ToString(und);
                                            lineas.cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            }

                                            lineas.vendedor = encabezado.vendedor;

                                            context.Entry(lineas).State = EntityState.Modified;
                                            context.SaveChanges();
                                        }



                                    //veo si el documento externo tiene documento interno asociado
                                    tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == modelo.tipo).FirstOrDefault();
                                    //guardado de documento interno
                                    if (doc_interno.doc_interno_asociado != null)
                                    {
                                        //se consulta consecutivo de documento interno
                                        grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == bodega);
                                        if (grupo2 != null)
                                        {
                                            consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                            //calculo y guardo el encabezado del movimiento interno

                                            encab_documento encabezado2 = new encab_documento
                                            {
                                                tipo = doc_interno.doc_interno_asociado.Value,
                                                numero = consecutivo2,
                                                nit = encabezado.nit,
                                                fecha = DateTime.Now,
                                                fpago_id = encabezado.fpago_id,
                                                vencimiento = encabezado.vencimiento,
                                                valor_total = encabezado.valor_total,
                                                iva = encabezado.iva,
                                                porcen_retencion = encabezado.porcen_retencion,
                                                retencion = encabezado.retencion,
                                                porcen_reteiva = encabezado.porcen_reteiva,
                                                retencion_iva = encabezado.retencion_iva,
                                                porcen_retica = encabezado.porcen_retica,
                                                retencion_ica = encabezado.retencion_ica,
                                                fletes = encabezado.fletes,
                                                iva_fletes = encabezado.iva_fletes,
                                                costo = encabezado.costo,
                                                vendedor = encabezado.vendedor,
                                                documento = encabezado.documento,
                                                remision = encabezado.remision,
                                                bodega = encabezado.bodega,
                                                concepto = encabezado.concepto,
                                                moneda = encabezado.moneda,
                                                perfilcontable = encabezado.perfilcontable,
                                                valor_mercancia = encabezado.valor_mercancia,
                                                fec_creacion = encabezado.fec_creacion,
                                                userid_creacion = encabezado.userid_creacion,
                                                estado = true,
                                                concepto2 = encabezado.concepto2,
                                                id_movimiento_interno = encabezado.idencabezado,
                                            };
                                            context.encab_documento.Add(encabezado2);
                                            context.SaveChanges();
                                            documentointerno = encabezado2.idencabezado;
                                        }
                                    }
                                    #endregion

                                    int id_encabezado = context.encab_documento.OrderByDescending(x => x.idencabezado)
                                        .FirstOrDefault().idencabezado;

                                    encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);


                                    #region Documentos a cruzar

                                    string listaAnticipo = Request["listaAnticipo"];
                                    List<int> ids = new List<int>();
                                    List<int> idEncabAnticipos = new List<int>();
                                    if (!string.IsNullOrEmpty(listaAnticipo))
                                    {
                                        int la = Convert.ToInt32(listaAnticipo);
                                        for (int i = 1; i <= la; i++)
                                        {
                                            int encabAnti = Convert.ToInt32(Request["encabAnticipo" + i]);
                                            if (encabAnti != 0)
                                            {
                                                encab_documento encabezadoAnticipo =
                                                    context.encab_documento.FirstOrDefault(x =>
                                                        x.idencabezado == encabAnti);

                                                documentosacruzar dac = new documentosacruzar
                                                {
                                                    idencabrecibo = encabAnti,
                                                    valorrecibo = encabezadoAnticipo.valor_total,
                                                    idencabfactura = id_encabezado,
                                                    valorfactura = eg.valor_total,
                                                    saldo = encabezadoAnticipo.valor_total - eg.valor_total
                                                };

                                                //context.documentosacruzar.Add(dac);
                                                //int rasult = context.SaveChanges();
                                                ids.Add(dac.id);
                                                idEncabAnticipos.Add(encabAnti);
                                            }
                                        }
                                    }

                                    #endregion

                                    #region cruce documentos

                                    for (int q = 0; q < idEncabAnticipos.Count; q++)
                                    {
                                        //id del anticipo en la tabla documentos a cruzar
                                        int idDocACruzar = ids[q];
                                        //id del anticipo
                                        int idEncabAnticipo = idEncabAnticipos[q];
                                        //Anticipo a cruzar
                                        encab_documento anticipo = context.encab_documento.Where(x => x.idencabezado == idEncabAnticipo)
                                            .FirstOrDefault();
                                        //Factura a cruzar
                                        encab_documento factura = context.encab_documento
                                            .Where(x => x.idencabezado == encabezado.idencabezado).FirstOrDefault();
                                        documentosacruzar docAcruzar = context.documentosacruzar.Where(x => x.id == idDocACruzar)
                                            .FirstOrDefault();
                                        decimal valorAplicar = factura.valor_total - factura.valor_aplicado -
                                                           (anticipo.valor_total - anticipo.valor_aplicado);
                                        if (valorAplicar < 0)
                                        {
                                            decimal RestanteAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado -
                                                (factura.valor_total - factura.valor_aplicado);
                                            decimal valorAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado - RestanteAnticipo;
                                            anticipo.valor_aplicado = anticipo.valor_aplicado + valorAnticipo;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                            decimal nuevovalorF = factura.valor_aplicado + valorAnticipo;
                                            factura.valor_aplicado = nuevovalorF;
                                            context.Entry(factura).State = EntityState.Modified;
                                        }
                                        else
                                        {
                                            int valoraplicado = Convert.ToInt32(factura.valor_aplicado);
                                            decimal nuevovalor =
                                                Convert.ToDecimal(valoraplicado, Cultureinfo) +
                                                (anticipo.valor_total - anticipo.valor_aplicado);
                                            factura.valor_aplicado = nuevovalor;
                                            context.Entry(factura).State = EntityState.Modified;
                                            anticipo.valor_aplicado = anticipo.valor_total;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                        }

                                        docAcruzar.cruzado = true;
                                        //context.Entry(docAcruzar).State = EntityState.Modified;
                                        //context.SaveChanges();
                                        cruce_documentos cd = new cruce_documentos
                                        {
                                            idtipo = anticipo.tipo,
                                            numero = anticipo.numero,
                                            id_encab_aplica = factura.idencabezado,
                                            id_encabezado = anticipo.idencabezado,
                                            //tipo de la factura cruzada
                                            idtipoaplica = factura.tipo,
                                            //numero de la factura cruzada
                                            numeroaplica = factura.numero,
                                            //valor aplicado a cada factura
                                            valor = anticipo.valor_total,
                                            fecha = DateTime.Now,
                                            fechacruce = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"])
                                        };
                                        context.cruce_documentos.Add(cd);
                                    }

                                    #endregion

                                    //Lineas documento

                                    #region lineasDocumento

                                    List<mov_contable> listaMov = new List<mov_contable>();
                                    int listaLineas = Convert.ToInt32(Request["lista_referencias"]);
                                    for (
                                        int i = 0; i <= listaLineas; i++)
                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            lineas_documento lineas = new lineas_documento
                                            {
                                                id_encabezado = id_encabezado,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = modelo.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)


                                            };
                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            }

                                            lineas.vendedor = eg.vendedor;

                                            context.lineas_documento.Add(lineas);
                                            context.SaveChanges();
                                            #endregion

                                        }

                                    #region validaciones para guardar

                                    if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                    {
                                        TempData["documento_descuadrado"] =
                                            "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                        ViewBag.documentoSeleccionado = encabezado.tipo;
                                        ViewBag.bodegaSeleccionado = encabezado.bodega;
                                        ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                        ViewBag.documentoDescuadrado = listaDescuadrados;
                                        ViewBag.calculoDebito = totalDebitos;
                                        ViewBag.calculoCredito = totalCreditos;

                                        dbTran.Rollback();
                                        listas2(modelo);
                                        BuscarFavoritos(menu);
                                        return View(modelo);
                                        //return RedirectToAction("DetalleFactura", "FacturacionRepuestos", new { menu });
                                    }

                                    funciono = 1;

                                    #endregion



                                }
                                if (numinterna > 0)
                                {
                                    listaelementos = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).ToList();




                                    int empresa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P33").Select(z => z.syspar_value).FirstOrDefault());
                                    int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());
                                    int documento = context.tp_doc_registros.Where(x => x.tp_doc_sw.sw == swclasifica).Select(e => e.tpdoc_id).FirstOrDefault();
                                    grupoconsecutivos grupointerrep = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == documento && x.bodega_id == bodega);
                                    DocumentoPorBodegaController docinterrep = new DocumentoPorBodegaController();
                                    long consecutivointerrep = docinterrep.BuscarConsecutivo(grupointerrep.grupo);
                                    encab_documento docencabezado = new encab_documento();
                                    docencabezado.tipo = documento;
                                    docencabezado.numero = consecutivointerrep;
                                    docencabezado.fecha = DateTime.Now;
                                    docencabezado.nit = empresa;
                                    docencabezado.bodega = Convert.ToInt32(bodega);
                                    docencabezado.fec_creacion = DateTime.Now;
                                    docencabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    docencabezado.valor_total = Convert.ToDecimal(Request["totaltotal"]);
                                    docencabezado.impoconsumo = 0;
                                    docencabezado.anulado = false;
                                    docencabezado.estado = true;
                                    context.encab_documento.Add(docencabezado);
                                    context.SaveChanges();



                                    for (int i = 0; i < numinterna; i++)
                                    {
                                        int ano = DateTime.Now.Year;
                                        int mes = DateTime.Now.Month;
                                        int bodegaconsul = Convert.ToInt32(bodega);
                                        string referencia = listaelementos[i].codigo;
                                        referencias_inven referenciax = context.referencias_inven.Where(x => x.codigo == referencia && x.ano == ano && x.mes == mes && x.bodega == bodegaconsul).FirstOrDefault();


                                        lineas_documento linea_doc_rep = new lineas_documento
                                        {
                                            id_encabezado = docencabezado.idencabezado,
                                            codigo = listaelementos[i].codigo,
                                            fec = DateTime.Now,
                                            nit = modelo.nit,
                                            cantidad = listaelementos[i].cantidad,
                                            porcentaje_iva = float.Parse(listaelementos[i].porcentaje_iva.ToString()),
                                            valor_unitario = referenciax.costo_prom, //costo promedio 
                                            porcentaje_descuento = float.Parse(listaelementos[i].porcentaje_descuento.ToString()),
                                            costo_unitario = referenciax.costo_prom,
                                            bodega = Convert.ToInt32(bodega),
                                            cantidad_und = 0,
                                            cantidad_pedida = 0,
                                            costo_unitario_sin = 0,
                                            cantidad_devuelta = 0,
                                            fec_creacion = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                            estado = true,
                                            costo_niff = 0,
                                            id_tarifa_cliente = tipotarifa
                                        };
                                        context.lineas_documento.Add(linea_doc_rep);
                                        context.SaveChanges();
                                    }

                                    funciono = 1;

                                    if (idencanbinter != 0)
                                    {
                                        doc.ActualizarConsecutivo(grupointerrep.grupo, consecutivointerrep);

                                    }

                                    idencanbinter = Convert.ToInt32(docencabezado.numero.ToString());
                                    idencanbinternum = docencabezado.idencabezado;

                                }
                                if (funciono > 0)
                                {
                                    //visualiza el numero de encab y el id para descargar el pdf
                                    if (idencanbinter > 0)
                                    {
                                        TempData["mensajeinterno"] = idencanbinter;
                                        TempData["mensajeinterno2"] = idencanbinternum;
                                    }
                                    else
                                    {

                                        TempData["mensaje"] = "Registro actualizado correctamente";
                                    }

                                    context.SaveChanges();
                                    dbTran.Commit();

                                    DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                    doc.ActualizarConsecutivo(grupo.grupo, consecutivo);
                                    return RedirectToAction("DetalleFactura", "FacturacionRepuestos", new { menu });
                                }
                            }
                            else
                            {
                                TempData["mensaje_error"] = "no hay consecutivo";
                            }
                        }
                        //cierre
                        else
                        {
                            TempData["mensaje_error"] = "Lista vacia";
                        }
                    }
                    catch (DbEntityValidationException ex)
                    {
                        var mensaje = ex;
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible actualizar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }

            listas();
            BuscarFavoritos(menu);
            return RedirectToAction("DetalleFactura", "FacturacionRepuestos", new { menu });
        }

        [HttpGet]
        public ActionResult FacturarRepuestos(int? menu)
        {
            listas();
            BuscarFavoritos(menu);
            return View();
        }

        [HttpPost]
        public ActionResult FacturarRepuestos(NotasContablesModel modelo, int? menu)
        {
            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        int idencabezadonormal = 0;
                        int idencanbinter = 0;
                        int idencanbinternum = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;

                        //traigo el código de tipo documento orden de despacho de repuesto
                        icb_sysparameter parped = context.icb_sysparameter.Where(d => d.syspar_cod == "P97").FirstOrDefault();
                        int pedidorep = parped != null ? Convert.ToInt32(parped.syspar_value) : 3074;
                        //busco el id del tipo de documento documento orden de despacho de repuesto
                        tp_doc_registros consec = context.tp_doc_registros.Where(d => d.tpdoc_id == pedidorep).FirstOrDefault();

                        DocumentoPorBodegaController doc = new DocumentoPorBodegaController();

                        //int documentointerno = 0;
                        //int iddespacho = 0;
                        grupoconsecutivos grupo2 = new grupoconsecutivos();
                        //long consecutivo2 = 0;

                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == modelo.perfilcontable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();

                        //int secuencia = 1;
                        //decimal totalDebitos = 0;
                        //decimal totalCreditos = 0;
                        List<ElementosFacturacion> listaelementos = new List<ElementosFacturacion>();
                        List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                        centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                        int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;
                        decimal ivatotal = Convert.ToDecimal(Request["valorIVA"], Cultureinfo);
                        int bodega = Convert.ToInt32(Request["selectBodegas"]);
                        List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();
                        decimal valorTotal = Convert.ToDecimal(Request["valorFinal"], Cultureinfo);
                        int costoLineas = Convert.ToInt32(Request["lista_referencias"]);
                        decimal totalmargen = 0, margen = 0;
                        for (int i = 0; i <= costoLineas; i++)
                        {
                            if (!string.IsNullOrEmpty(Request["referencia" + i]))
                            {
                                int anio = DateTime.Now.Year;
                                int mes = DateTime.Now.Month;

                                string referencia = Request["referencia" + i];
                                vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                decimal? costoReferencia = vwPromedio.Promedio;

                                costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                      Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                //Calular el margen de utilidad
                                int cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]);
                                decimal valiva = Convert.ToDecimal(Request["ivaTotalReferencia" + i], Cultureinfo);
                                decimal valorT = Convert.ToDecimal(Request["valorTotalReferencia" + i], Cultureinfo);
                                CsCalcularMargenUtilidad calcularmargen = new CsCalcularMargenUtilidad();
                                margen = calcularmargen.MargenUtilidad(bodega, referencia, cantidad, valorT, valiva);
                                totalmargen = totalmargen + margen;


                                listaelementos.Add(new ElementosFacturacion
                                {
                                    tipo = "R",
                                    cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]),
                                    centro_costo = Request["centro_costo_tf" + i] != null ? Convert.ToInt32(Request["centro_costo_tf" + i]) : 0,
                                    codigo = Request["referencia" + i],
                                    porcentaje_descuento = Request["descuentoReferencia" + i] != null ? Convert.ToDecimal(Request["descuentoReferencia" + i]) : 0,
                                    porcentaje_iva = Request["ivaReferencia" + i] != null ? Convert.ToDecimal(Request["ivaReferencia" + i]) : 0,
                                    tipo_tarifa = Request["tipo_tarifa_hidden_" + i] != null ? Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]) : 0,
                                    valor_descuento = Request["totalDescuentoReferencia" + i] != null ? Convert.ToDecimal(Request["totalDescuentoReferencia" + i]) : 0,
                                    valor_iva = Request["ivaTotalReferencia" + i] != null ? Convert.ToDecimal(Request["ivaTotalReferencia" + i]) : 0,
                                    valor_unitario = Request["valorUnitarioReferencia" + i] != null ? Convert.ToDecimal(Request["valorUnitarioReferencia" + i]) : 0,
                                });

                            }
                        }

                        string lista = Request["lista_referencias"];
                        if (!string.IsNullOrEmpty(lista))
                        {
                            int datos = Convert.ToInt32(lista);
                            decimal costoTotal =
                                Convert.ToDecimal(Request["valor_proveedor"], Cultureinfo); //costo con retenciones y fletes
                            decimal ivaEncabezado = Convert.ToDecimal(Request["valorIVA"], Cultureinfo); //valor total del iva
                            decimal descuentoEncabezado =
                                Convert.ToDecimal(Request["valorDes"], Cultureinfo); //valor total del descuento
                            decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos

                            decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                            //consecutivo
                            grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                x.documento_id == modelo.tipo && x.bodega_id == bodega);
                            if (grupo != null)
                            {

                                long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                //Encabezado documento
                                int tipotarifa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P147").Select(z => z.syspar_value).FirstOrDefault());


                                int numinterna = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).Count();
                                int numnormal = listaelementos.Where(x => x.tipo_tarifa != tipotarifa).Count();


                                if (numnormal > 0)
                                {



                                    #region encabezado

                                    //facturacion
                                    encab_documento encabezado = new encab_documento
                                    {
                                        tipo = modelo.tipo,
                                        numero = consecutivo,
                                        nit = modelo.nit,
                                        fecha = DateTime.Now,
                                        estado_factura = 1,
                                    };
                                    int? condicion = modelo.fpago_id;
                                    encabezado.fpago_id = condicion;
                                    //encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                    int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                    if (dias > 0)
                                    {
                                        encabezado.usa_cupo = true;
                                    }
                                    else
                                    {
                                        encabezado.usa_cupo = false;
                                    }
                                    DateTime vencimiento = DateTime.Now.AddDays(dias);
                                    encabezado.vencimiento = vencimiento;
                                    encabezado.valor_total = costoTotal;
                                    encabezado.prefactura = false;
                                    encabezado.iva = ivaEncabezado;
                                    encabezado.margen_utilidad = totalmargen;
                                    // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                    #region calculo de retenciones

                                    tp_doc_registros buscarTipoDocRegistro =
                                       context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
                                    icb_terceros buscarProveedor =
                                        context.icb_terceros.FirstOrDefault(x => x.tercero_id == modelo.nit);
                                    int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id ?? 0 : 0;
                                    perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                        x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                        x.tipo_regimenid == regimen_proveedor);

                                    decimal retenciones = 0;

                                    if (buscarPerfilTributario != null)
                                    {
                                        if (buscarPerfilTributario.retfuente == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretfuente ?? 0))
                                        {
                                            encabezado.porcen_retencion = buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0;
                                            encabezado.retencion =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion;
                                        }

                                        if (buscarPerfilTributario.retiva == "A" &&
                                            ivaEncabezado >= (buscarPerfilTributario.baseretiva ?? 0))
                                        {
                                            encabezado.porcen_reteiva = buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0;
                                            encabezado.retencion_iva =
                                                Math.Round(encabezado.iva *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_iva;
                                        }

                                        if (buscarPerfilTributario.autorretencion == "A")
                                        {
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                            encabezado.porcen_autorretencion = (float)tercero_acteco;
                                            encabezado.retencion_causada =
                                                Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_causada;
                                        }

                                        if (buscarPerfilTributario.retica == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretica ?? 0))
                                        {
                                            terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                                x.idcodica == buscarProveedor.id_acteco && x.bodega == bodega);
                                            decimal tercero_acteco = buscarProveedor.id_acteco != null ? buscarProveedor.acteco_tercero.tarifa : 0;
                                            if (bodega_acteco != null)
                                            {
                                                encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }

                                            if (tercero_acteco != 0)
                                            {
                                                encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(
                                                                   buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                            else
                                            {
                                                encabezado.porcen_retica = (float)(buscarPerfilTributario.pretica ?? 0);
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                        }
                                    }

                                    #endregion

                                    if (modelo.fletes != null)
                                    {
                                        encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                        encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                    }

                                    encabezado.costo = costoPromedioTotal;
                                    encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                    encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
                                    string pedido = Request["pedido"];
                                    if (!string.IsNullOrEmpty(pedido))
                                    {
                                        encabezado.pedido = Convert.ToInt32(Request["pedido"]);//pedido
                                    }

                                    encabezado.bodega = bodega;
                                    encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                    if (Request["tasa"] != "")
                                    {
                                        encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                    }

                                    encabezado.valor_mercancia = valor_totalenca;
                                    encabezado.fec_creacion = DateTime.Now;
                                    encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    encabezado.estado = true;
                                    encabezado.concepto = modelo.concepto;
                                    encabezado.concepto2 = modelo.concepto2;

                                    context.encab_documento.Add(encabezado);
                                    context.SaveChanges();
                                    idencabezadonormal = encabezado.idencabezado;
                                    int listaLineas2 = Convert.ToInt32(Request["lista_referencias"]);
                                    /*
                                    for (int i = 0; i <= listaLineas2; i++)

                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            lineas_documento lineas = new lineas_documento
                                            {
                                                id_encabezado = encabezado.idencabezado,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = modelo.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)


                                            };
                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            }

                                            lineas.vendedor = encabezado.vendedor;

                                            context.lineas_documento.Add(lineas);
                                            context.SaveChanges();
                                        }
                                    */
                                    //busco el consecutivo documento orden de despacho de repuesto
                                    /*
                                    grupoconsecutivos grupo1 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == consec.tpdoc_id && x.bodega_id == bodega);
                                    long consecutivo_ = doc.BuscarConsecutivo(grupo1.grupo);

                                    //genero la solicitud de despacho
                                    encab_documento crearEncabezado = new encab_documento
                                    {
                                        fecha = DateTime.Now,
                                        fec_creacion = DateTime.Now,
                                        tipo = consec.tpdoc_id,
                                        bodega = bodega,
                                        numero = consecutivo_,
                                        valor_total = 0,
                                        valor_aplicado = 0,
                                        valor_mercancia = 0,
                                        iva = 0,
                                        notas = "",
                                        vendedor = Convert.ToInt32(Session["user_usuarioid"]),
                                        costo = 0,
                                        bodega_destino = bodega,
                                        nit = encabezado.nit,
                                        //orden_taller = order.id,
                                        impoconsumo = 0,
                                        userid_creacion = Convert.ToInt32(Session["user_usuarioid"])
                                    };

                                    context.encab_documento.Add(crearEncabezado);
                                    int result = context.SaveChanges();
                                    iddespacho = crearEncabezado.idencabezado;

                                    doc.ActualizarConsecutivo(grupo1.grupo, consecutivo);
                                    */
                                    //veo si el documento externo tiene documento interno asociado
                                    /*
                                    tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == modelo.tipo).FirstOrDefault();
                                    //guardado de documento interno
                                    if (doc_interno.doc_interno_asociado != null)
                                    {
                                        //se consulta consecutivo de documento interno
                                        
                                        grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == bodega);
                                        if (grupo2 != null)
                                        {
                                            consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                            //calculo y guardo el encabezado del movimiento interno
                                            encab_documento encabezado2 = new encab_documento
                                            {
                                                tipo = doc_interno.doc_interno_asociado.Value,
                                                numero = consecutivo2,
                                                nit = encabezado.nit,
                                                fecha = DateTime.Now,
                                                fpago_id = encabezado.fpago_id,
                                                vencimiento = encabezado.vencimiento,
                                                valor_total = encabezado.valor_total,
                                                iva = encabezado.iva,
                                                porcen_retencion = encabezado.porcen_retencion,
                                                retencion = encabezado.retencion,
                                                porcen_reteiva = encabezado.porcen_reteiva,
                                                retencion_iva = encabezado.retencion_iva,
                                                porcen_retica = encabezado.porcen_retica,
                                                retencion_ica = encabezado.retencion_ica,
                                                fletes = encabezado.fletes,
                                                iva_fletes = encabezado.iva_fletes,
                                                costo = encabezado.costo,
                                                vendedor = encabezado.vendedor,
                                                documento = encabezado.documento,
                                                remision = encabezado.remision,
                                                bodega = encabezado.bodega,
                                                concepto = encabezado.concepto,
                                                moneda = encabezado.moneda,
                                                perfilcontable = encabezado.perfilcontable,
                                                valor_mercancia = encabezado.valor_mercancia,
                                                fec_creacion = encabezado.fec_creacion,
                                                userid_creacion = encabezado.userid_creacion,
                                                estado = true,
                                                concepto2 = encabezado.concepto2,
                                                id_movimiento_interno = encabezado.idencabezado,
                                            };
                                            context.encab_documento.Add(encabezado2);
                                            context.SaveChanges();
                                            documentointerno = encabezado2.idencabezado;
                                        }
                                    }*/
                                    #endregion
                                    int id_encabezado = encabezado.idencabezado;
                                    /*int id_encabezado = context.encab_documento.OrderByDescending(x => x.idencabezado)
                                        .FirstOrDefault().idencabezado;*/

                                    //encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);
                                    encab_documento eg = encabezado;

                                    //Mov Contable

                                    #region movimientos contables

                                    //buscamos en perfil cuenta documento, por medio del perfil seleccionado

                                    //                            foreach (var parametro in parametrosCuentasVerificar)
                                    //                    {
                                    //                        string descripcionParametro = context.paramcontablenombres
                                    //                            .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                    //                            .descripcion_parametro;
                                    //                        cuenta_puc buscarCuenta =
                                    //                            context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                    //                        if (buscarCuenta != null)
                                    //                        {
                                    //                            if (parametro.id_nombre_parametro == 10 &&
                                    //                                Convert.ToDecimal(valor_totalenca, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 3 &&
                                    //                                Convert.ToDecimal(eg.retencion, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 4 &&
                                    //                                Convert.ToDecimal(eg.retencion_iva, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 5 &&
                                    //                                Convert.ToDecimal(eg.retencion_ica, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 6 && Convert.ToDecimal(eg.fletes, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 14 &&
                                    //                                Convert.ToDecimal(eg.iva_fletes, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 17 &&
                                    //                                Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0
                                    //                                || parametro.id_nombre_parametro == 18 &&
                                    //                                Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0)
                                    //                            {
                                    //                                mov_contable movNuevo = new mov_contable
                                    //                                {
                                    //                                    id_encab = eg.idencabezado,
                                    //                                    seq = secuencia,
                                    //                                    idparametronombre = parametro.id_nombre_parametro,
                                    //                                    cuenta = parametro.cuenta,
                                    //                                    centro = parametro.centro,
                                    //                                    fec = DateTime.Now,
                                    //                                    fec_creacion = DateTime.Now,
                                    //                                    userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                    //                                    documento = Convert.ToString(modelo.pedido),
                                    //                                    detalle = "Facturacion de repuestos con consecutivo " + eg.numero,
                                    //                                    estado = true
                                    //                                };

                                    //                                cuenta_puc info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta)
                                    //                                    .FirstOrDefault();

                                    //                                if (info.tercero)
                                    //                                {
                                    //                                    movNuevo.nit = modelo.nit;
                                    //                                }
                                    //                                else
                                    //                                {
                                    //                                    icb_terceros tercero = context.icb_terceros.Where(t => t.doc_tercero == "0")
                                    //                                        .FirstOrDefault();
                                    //                                    movNuevo.nit = tercero.tercero_id;
                                    //                                }

                                    //                                // las siguientes validaciones se hacen dependiendo de la cuenta que esta moviendo la compra manual, para guardar la informacion acorde

                                    //                                #region Cuentas X Cobrar

                                    //                                if (parametro.id_nombre_parametro == 10)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = Convert.ToString(modelo.pedido);
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);

                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region Retencion

                                    //                                if (parametro.id_nombre_parametro == 3)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion;

                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region ReteIVA

                                    //                                if (parametro.id_nombre_parametro == 4)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(ivaEncabezado, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_iva;

                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_iva;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_iva;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_iva;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region ReteICA

                                    //                                if (parametro.id_nombre_parametro == 5)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_ica;

                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_ica;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_ica;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_ica;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region Fletes

                                    //                                if (parametro.id_nombre_parametro == 6)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.fletes;
                                    //                                        movNuevo.debito = 0;

                                    //                                        movNuevo.creditoniif = eg.fletes;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = eg.fletes;
                                    //                                        ;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.fletes;
                                    //                                        movNuevo.debito = 0;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region IVA fletes

                                    //                                if (parametro.id_nombre_parametro == 14)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.iva_fletes;
                                    //                                        movNuevo.debito = 0;

                                    //                                        movNuevo.creditoniif = eg.iva_fletes;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = eg.iva_fletes;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.iva_fletes;
                                    //                                        movNuevo.debito = 0;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region AutoRetencion Debito

                                    //                                if (parametro.id_nombre_parametro == 17)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_causada;

                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_causada;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = 0;
                                    //                                        movNuevo.debitoniif = eg.retencion_causada;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = 0;
                                    //                                        movNuevo.debito = eg.retencion_causada;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                #region AutoRetencion Credito

                                    //                                if (parametro.id_nombre_parametro == 18)
                                    //                                {
                                    //                                    /*if (info.aplicaniff==true)
                                    //{

                                    //}*/

                                    //                                    if (info.manejabase)
                                    //                                    {
                                    //                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        movNuevo.basecontable = 0;
                                    //                                    }

                                    //                                    if (info.documeto)
                                    //                                    {
                                    //                                        movNuevo.documento = modelo.documento;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 1)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.retencion_causada;
                                    //                                        movNuevo.debito = 0;

                                    //                                        movNuevo.creditoniif = eg.retencion_causada;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 4)
                                    //                                    {
                                    //                                        movNuevo.creditoniif = eg.retencion_causada;
                                    //                                        movNuevo.debitoniif = 0;
                                    //                                    }

                                    //                                    if (buscarCuenta.concepniff == 5)
                                    //                                    {
                                    //                                        movNuevo.credito = eg.retencion_causada;
                                    //                                        movNuevo.debito = 0;
                                    //                                    }
                                    //                                }

                                    //                                #endregion

                                    //                                //context.mov_contable.Add(movNuevo);
                                    //                                //context.SaveChanges();

                                    //                                secuencia++;
                                    //                                //Cuentas valores

                                    //                                #region Cuentas valores

                                    //                                cuentas_valores buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x =>
                                    //                                    x.centro == parametro.centro && x.cuenta == parametro.cuenta &&
                                    //                                    x.nit == movNuevo.nit);
                                    //                                if (buscar_cuentas_valores != null)
                                    //                                {
                                    //                                    buscar_cuentas_valores.debito += movNuevo.debito;
                                    //                                    buscar_cuentas_valores.credito += movNuevo.credito;
                                    //                                    buscar_cuentas_valores.debitoniff += movNuevo.debitoniif;
                                    //                                    buscar_cuentas_valores.creditoniff += movNuevo.creditoniif;
                                    //                                    context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
                                    //                                }
                                    //                                else
                                    //                                {
                                    //                                    DateTime fechaHoy = DateTime.Now;
                                    //                                    cuentas_valores crearCuentaValor = new cuentas_valores
                                    //                                    {
                                    //                                        ano = fechaHoy.Year,
                                    //                                        mes = fechaHoy.Month,
                                    //                                        cuenta = movNuevo.cuenta,
                                    //                                        centro = movNuevo.centro,
                                    //                                        nit = movNuevo.nit,
                                    //                                        debito = movNuevo.debito,
                                    //                                        credito = movNuevo.credito,
                                    //                                        debitoniff = movNuevo.debitoniif,
                                    //                                        creditoniff = movNuevo.creditoniif
                                    //                                    };
                                    //                                    context.cuentas_valores.Add(crearCuentaValor);
                                    //                                    //context.SaveChanges();
                                    //                                }

                                    //                                #endregion

                                    //                                totalCreditos += movNuevo.credito;
                                    //                                totalDebitos += movNuevo.debito;
                                    //                                listaDescuadrados.Add(new DocumentoDescuadradoModel
                                    //                                {
                                    //                                    NumeroCuenta =
                                    //                                        "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
                                    //                                    DescripcionParametro = descripcionParametro,
                                    //                                    ValorDebito = movNuevo.debito,
                                    //                                    ValorCredito = movNuevo.credito
                                    //                                });
                                    //                            }
                                    //                        }
                                    //                    }

                                    #endregion

                                    //Documentos a cruzar

                                    #region Documentos a cruzar

                                    string listaAnticipo = Request["listaAnticipo"];
                                    List<int> ids = new List<int>();
                                    List<int> idEncabAnticipos = new List<int>();
                                    if (!string.IsNullOrEmpty(listaAnticipo))
                                    {
                                        int la = Convert.ToInt32(listaAnticipo);
                                        for (int i = 1; i <= la; i++)
                                        {
                                            int encabAnti = Convert.ToInt32(Request["encabAnticipo" + i]);
                                            if (encabAnti != 0)
                                            {
                                                encab_documento encabezadoAnticipo =
                                                    context.encab_documento.FirstOrDefault(x =>
                                                        x.idencabezado == encabAnti);

                                                documentosacruzar dac = new documentosacruzar
                                                {
                                                    idencabrecibo = encabAnti,
                                                    valorrecibo = encabezadoAnticipo.valor_total,
                                                    idencabfactura = id_encabezado,
                                                    valorfactura = eg.valor_total,
                                                    saldo = encabezadoAnticipo.valor_total - eg.valor_total
                                                };

                                                //context.documentosacruzar.Add(dac);
                                                //int rasult = context.SaveChanges();
                                                ids.Add(dac.id);
                                                idEncabAnticipos.Add(encabAnti);
                                            }
                                        }
                                    }

                                    #endregion

                                    #region cruce documentos

                                    for (int q = 0; q < idEncabAnticipos.Count; q++)
                                    {
                                        //id del anticipo en la tabla documentos a cruzar
                                        int idDocACruzar = ids[q];
                                        //id del anticipo
                                        int idEncabAnticipo = idEncabAnticipos[q];
                                        //Anticipo a cruzar
                                        encab_documento anticipo = context.encab_documento.Where(x => x.idencabezado == idEncabAnticipo)
                                            .FirstOrDefault();
                                        //Factura a cruzar
                                        encab_documento factura = context.encab_documento
                                            .Where(x => x.idencabezado == encabezado.idencabezado).FirstOrDefault();
                                        documentosacruzar docAcruzar = context.documentosacruzar.Where(x => x.id == idDocACruzar)
                                            .FirstOrDefault();
                                        decimal valorAplicar = factura.valor_total - factura.valor_aplicado -
                                                           (anticipo.valor_total - anticipo.valor_aplicado);
                                        if (valorAplicar < 0)
                                        {
                                            decimal RestanteAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado -
                                                (factura.valor_total - factura.valor_aplicado);
                                            decimal valorAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado - RestanteAnticipo;
                                            anticipo.valor_aplicado = anticipo.valor_aplicado + valorAnticipo;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                            decimal nuevovalorF = factura.valor_aplicado + valorAnticipo;
                                            factura.valor_aplicado = nuevovalorF;
                                            context.Entry(factura).State = EntityState.Modified;
                                        }
                                        else
                                        {
                                            int valoraplicado = Convert.ToInt32(factura.valor_aplicado);
                                            decimal nuevovalor =
                                                Convert.ToDecimal(valoraplicado, Cultureinfo) +
                                                (anticipo.valor_total - anticipo.valor_aplicado);
                                            factura.valor_aplicado = nuevovalor;
                                            context.Entry(factura).State = EntityState.Modified;
                                            anticipo.valor_aplicado = anticipo.valor_total;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                        }

                                        docAcruzar.cruzado = true;
                                        //context.Entry(docAcruzar).State = EntityState.Modified;
                                        //context.SaveChanges();
                                        cruce_documentos cd = new cruce_documentos
                                        {
                                            idtipo = anticipo.tipo,
                                            numero = anticipo.numero,
                                            id_encab_aplica = factura.idencabezado,
                                            id_encabezado = anticipo.idencabezado,
                                            //tipo de la factura cruzada
                                            idtipoaplica = factura.tipo,
                                            //numero de la factura cruzada
                                            numeroaplica = factura.numero,
                                            //valor aplicado a cada factura
                                            valor = anticipo.valor_total,
                                            fecha = DateTime.Now,
                                            fechacruce = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"])
                                        };
                                        context.cruce_documentos.Add(cd);
                                    }

                                    #endregion

                                    //Lineas documento

                                    #region lineasDocumento

                                    List<mov_contable> listaMov = new List<mov_contable>();
                                    int listaLineas = Convert.ToInt32(Request["lista_referencias"]);
                                    for (int i = 0; i <= listaLineas; i++)
                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            lineas_documento lineas = new lineas_documento
                                            {
                                                id_encabezado = id_encabezado,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = modelo.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)


                                            };
                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            }

                                            lineas.vendedor = eg.vendedor;

                                            context.lineas_documento.Add(lineas);
                                            context.SaveChanges();

                                            //lineas de solicitud despacho de repuesto
                                            /*
                                            lineas_documento crearLineasDespacho = new lineas_documento
                                            {

                                                id_encabezado = iddespacho,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = modelo.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo),
                                                porcentaje_iva = (float)ivaLista,
                                                valor_unitario = final,
                                                porcentaje_descuento = (float)descuento,
                                                costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo),
                                                bodega = bodega,
                                                fec_creacion = DateTime.Now,
                                                userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                estado = true,
                                                id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]),
                                                moneda = Convert.ToInt32(Request["moneda"]),
                                                vendedor = eg.vendedor,
                                            };

                                            if (Request["tasa"] != "")
                                            {
                                                crearLineasDespacho.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            context.lineas_documento.Add(crearLineasDespacho);
                                            int result2 = context.SaveChanges();
                                            */

                                            //creo la linea del mjovimiento salida por venta
                                            /*
                                            if (documentointerno > 0)
                                            {
                                                lineas_documento crearLineasSalida = new lineas_documento
                                                {

                                                    id_encabezado = documentointerno,
                                                    codigo = Request["referencia" + i],
                                                    seq = i + 1,
                                                    fec = DateTime.Now,
                                                    nit = modelo.nit,
                                                    und = Convert.ToString(und),
                                                    cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo),
                                                    porcentaje_iva = (float)ivaLista,
                                                    valor_unitario = final,
                                                    porcentaje_descuento = (float)descuento,
                                                    costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo),
                                                    bodega = bodega,
                                                    fec_creacion = DateTime.Now,
                                                    userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                    estado = true,
                                                    id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]),
                                                    moneda = Convert.ToInt32(Request["moneda"]),
                                                    vendedor = eg.vendedor,
                                                };

                                                if (Request["tasa"] != "")
                                                {
                                                    crearLineasSalida.tasa = Convert.ToInt32(Request["tasa"]);
                                                }

                                                context.lineas_documento.Add(crearLineasSalida);
                                                int result3 = context.SaveChanges();
                                            }*/
                                            #endregion

                                            //Referencias Inven

                                            #region referencias inven

                                            //int anio = DateTime.Now.Year;
                                            //int mes = DateTime.Now.Month;

                                            //referencias_inven refin = new referencias_inven();

                                            //referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                            //    x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);

                                            //var entrada = false;
                                            //if (doc_interno.doc_interno_asociado != null)
                                            //{//calculo el comportamiento del documento interno asociado

                                            //    var docinternoaso = context.tp_doc_registros.Where(d => d.tpdoc_id == doc_interno.doc_interno_asociado.Value).FirstOrDefault();
                                            //    if (docinternoaso.entrada_salida != null)
                                            //    {
                                            //        entrada = docinternoaso.entrada_salida.Value;
                                            //    }
                                            //}

                                            //if (existencia != null)
                                            //{
                                            //    if (entrada == false)
                                            //    {
                                            //        existencia.codigo = codigo;
                                            //        existencia.can_sal += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        existencia.cos_sal +=
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        existencia.can_vta += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        existencia.cos_vta +=
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        existencia.val_vta += baseUnitario;
                                            //    }
                                            //    else
                                            //    {
                                            //        existencia.codigo = codigo;
                                            //        existencia.can_ent += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        existencia.cos_ent +=
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        existencia.can_com += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        existencia.cos_com +=
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        existencia.val_vta += 0;
                                            //        existencia.costo_prom = baseUnitario;
                                            //    }

                                            //    context.Entry(existencia).State = EntityState.Modified;
                                            //}
                                            //else
                                            //{
                                            //    refin.bodega = bodega;
                                            //    refin.codigo = codigo;
                                            //    refin.ano = Convert.ToInt16(DateTime.Now.Year);
                                            //    refin.mes = Convert.ToInt16(DateTime.Now.Month);
                                            //    refin.modulo = "R";
                                            //    if (entrada == false)
                                            //    {
                                            //        refin.can_sal = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        refin.cos_sal =
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        refin.can_vta = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        refin.cos_vta =
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        refin.val_vta = baseUnitario;
                                            //    }
                                            //    else
                                            //    {
                                            //        refin.can_ent = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        refin.cos_ent =
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        refin.can_com = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            //        refin.cos_com =
                                            //            Convert.ToDecimal(
                                            //                cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                            //        refin.val_vta = 0;
                                            //        existencia.costo_prom = Convert.ToDecimal(
                                            //                cr, Cultureinfo);

                                            //    }




                                            //    context.referencias_inven.Add(refin);
                                            //}

                                            #endregion

                                            //Mov Contable (IVA, Inventario, Costo, Ingreso)

                                            #region Mov Contable (IVA, Inventario, Costo, Ingreso)

                                            //                         foreach (var parametro in parametrosCuentasVerificar)
                                            //                         {
                                            //                             string descripcionParametro = context.paramcontablenombres
                                            //                                 .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                            //                                 .descripcion_parametro;
                                            //                             cuenta_puc buscarCuenta =
                                            //                                 context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                            //                             if (buscarCuenta != null)
                                            //                             {
                                            //                                 if (parametro.id_nombre_parametro == 2 &&
                                            //                                     Convert.ToDecimal(ivaEncabezado, Cultureinfo) != 0
                                            //                                     || parametro.id_nombre_parametro == 9 &&
                                            //                                     Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                            //                                     || parametro.id_nombre_parametro == 20 &&
                                            //                                     Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                            //                                     || parametro.id_nombre_parametro == 11 &&
                                            //                                     Convert.ToDecimal(costoEncabezado, Cultureinfo) != 0
                                            //                                     || parametro.id_nombre_parametro == 12 &&
                                            //                                     Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0) //costo promedio
                                            //                                 {
                                            //                                     mov_contable movNuevo = new mov_contable
                                            //                                     {
                                            //                                         id_encab = encabezado.idencabezado,
                                            //                                         seq = secuencia,
                                            //                                         idparametronombre = parametro.id_nombre_parametro,
                                            //                                         cuenta = parametro.cuenta,
                                            //                                         centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                             ? parametro.id_nombre_parametro == 11
                                            //                                                 ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                            //                                                 : parametro.id_nombre_parametro == 12
                                            //                                                     ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                            //                                                     : parametro.centro
                                            //                                             : parametro.centro
                                            //                                     };
                                            //                                     ;
                                            //                                     movNuevo.fec = DateTime.Now;
                                            //                                     movNuevo.fec_creacion = DateTime.Now;
                                            //                                     movNuevo.tipo_tarifa =
                                            //                                         Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                            //                                     movNuevo.userid_creacion =
                                            //                                         Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                     movNuevo.documento = Convert.ToString(modelo.pedido);

                                            //                                     cuenta_puc info = context.cuenta_puc
                                            //                                         .Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

                                            //                                     if (info.tercero)
                                            //                                     {
                                            //                                         movNuevo.nit = modelo.nit;
                                            //                                     }
                                            //                                     else
                                            //                                     {
                                            //                                         icb_terceros tercero = context.icb_terceros
                                            //                                             .Where(t => t.doc_tercero == "0").FirstOrDefault();
                                            //                                         movNuevo.nit = tercero.tercero_id;
                                            //                                     }

                                            //                                     #region IVA

                                            //                                     if (parametro.id_nombre_parametro == 2)
                                            //                                     {
                                            //                                         icb_referencia perfilReferencia =
                                            //                                             context.icb_referencia.FirstOrDefault(x =>
                                            //                                                 x.ref_codigo == lineas.codigo);
                                            //                                         int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                            //                                         perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                            //                                             r.id == perfilBuscar);

                                            //                                         #region Tiene perfil la referencia

                                            //                                         if (pcr != null)
                                            //                                         {
                                            //                                             int? cuentaIva = pcr.cuenta_dev_iva_compras;

                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                            //                                             #region si tiene perfil y cuenta asignada a ese perfil

                                            //                                             if (cuentaIva != null)
                                            //                                             {
                                            //                                                 movNuevo.cuenta = Convert.ToInt32(cuentaIva);
                                            //                                                 movNuevo.centro = parametro.centro;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == cuentaIva)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 // context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion

                                            //                                             #region si tiene perfil pero no tiene cuenta asignada

                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.cuenta = parametro.cuenta;
                                            //                                                 movNuevo.centro = parametro.centro;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == parametro.cuenta)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion
                                            //                                         }

                                            //                                         #endregion

                                            //                                         #region La referencia no tiene perfil

                                            //                                         else
                                            //                                         {
                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                            //                                             movNuevo.cuenta = parametro.cuenta;
                                            //                                             movNuevo.centro = parametro.centro;
                                            //                                             movNuevo.fec = DateTime.Now;
                                            //                                             movNuevo.fec_creacion = DateTime.Now;
                                            //                                             movNuevo.userid_creacion =
                                            //                                                 Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                             /*if (info.aplicaniff==true)
                                            //{

                                            //}*/

                                            //                                             if (info.manejabase)
                                            //                                             {
                                            //                                                 movNuevo.basecontable = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                             }
                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.basecontable = 0;
                                            //                                             }

                                            //                                             if (info.documeto)
                                            //                                             {
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 1)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;

                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 4)
                                            //                                             {
                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 5)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;
                                            //                                             }

                                            //                                             //context.mov_contable.Add(movNuevo);
                                            //                                         }

                                            //                                         #endregion

                                            //                                         mov_contable buscarIVA = context.mov_contable.FirstOrDefault(x =>
                                            //                x.id_encab == id_encabezado &&
                                            //                x.cuenta == movNuevo.cuenta &&
                                            //                x.idparametronombre == parametro.id_nombre_parametro);
                                            //                                         if (buscarIVA != null)
                                            //                                             {
                                            //                                             buscarIVA.debito += movNuevo.debito;
                                            //                                             buscarIVA.debitoniif += movNuevo.debitoniif;
                                            //                                             buscarIVA.credito += movNuevo.credito;
                                            //                                             buscarIVA.creditoniif += movNuevo.creditoniif;
                                            //                                             buscarIVA.basecontable += movNuevo.basecontable;
                                            //                                             context.Entry(buscarIVA).State = EntityState.Modified;
                                            //                                             }
                                            //                                         else
                                            //                                             {
                                            //                                             mov_contable crearMovContable = new mov_contable
                                            //                                                 {
                                            //                                                 id_encab = encabezado.idencabezado,
                                            //                                                 seq = secuencia,
                                            //                                                 idparametronombre =
                                            //                                                     parametro.id_nombre_parametro,
                                            //                                                 cuenta = Convert.ToInt32(movNuevo.cuenta),
                                            //                                                 centro = parametro.centro,
                                            //                                                 nit = encabezado.nit,
                                            //                                                 fec = DateTime.Now,
                                            //                                                 debito = movNuevo.debito,
                                            //                                                 debitoniif = movNuevo.debitoniif,
                                            //                                                 basecontable = movNuevo.basecontable,
                                            //                                                 credito = movNuevo.credito,
                                            //                                                 creditoniif = movNuevo.creditoniif,
                                            //                                                 fec_creacion = DateTime.Now,
                                            //                                                 userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]),
                                            //                                                 detalle =
                                            //                                                     "Facturacion de repuestos con consecutivo " +
                                            //                                                     eg.numero,
                                            //                                                 estado = true
                                            //                                                 };
                                            //                                             context.mov_contable.Add(crearMovContable);
                                            //                                             context.SaveChanges();
                                            //                                             }

                                            //                                         }

                                            //                                     #endregion

                                            //                                     #region Inventario

                                            //                                     if (parametro.id_nombre_parametro == 9 ||
                                            //                                         parametro.id_nombre_parametro == 20)
                                            //                                     {
                                            //                                         icb_referencia perfilReferencia =
                                            //                                             context.icb_referencia.FirstOrDefault(x =>
                                            //                                                 x.ref_codigo == lineas.codigo);
                                            //                                         int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                            //                                         perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                            //                                             r.id == perfilBuscar);

                                            //                                         #region Tiene perfil la referencia

                                            //                                         if (pcr != null)
                                            //                                         {
                                            //                                             int? cuentaInven = pcr.cta_inventario;

                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                            //                                             #region tiene perfil y cuenta asignada al perfil

                                            //                                             if (cuentaInven != null)
                                            //                                             {
                                            //                                                 movNuevo.cuenta = Convert.ToInt32(cuentaInven);
                                            //                                                 movNuevo.centro = parametro.centro;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == cuentaInven)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion

                                            //                                             #region tiene perfil pero no tiene cuenta asignada

                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.cuenta = parametro.cuenta;
                                            //                                                 movNuevo.centro = parametro.centro;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == parametro.cuenta)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion
                                            //                                         }

                                            //                                         #endregion

                                            //                                         #region La referencia no tiene perfil

                                            //                                         else
                                            //                                         {
                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                            //                                             movNuevo.cuenta = parametro.cuenta;
                                            //                                             movNuevo.centro = parametro.centro;
                                            //                                             movNuevo.fec = DateTime.Now;
                                            //                                             movNuevo.fec_creacion = DateTime.Now;
                                            //                                             movNuevo.userid_creacion =
                                            //                                                 Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                             /*if (info.aplicaniff==true)
                                            //{

                                            //}*/

                                            //                                             if (info.manejabase)
                                            //                                             {
                                            //                                                 movNuevo.basecontable =
                                            //                                                     Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                             }
                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.basecontable = 0;
                                            //                                             }

                                            //                                             if (info.documeto)
                                            //                                             {
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 1)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;

                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 4)
                                            //                                             {
                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 5)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;
                                            //                                             }

                                            //                                             context.mov_contable.Add(movNuevo);
                                            //                                         }

                                            //                                         #endregion

                                            //                                         mov_contable buscarInventario = context.mov_contable.FirstOrDefault(x =>
                                            //                                             x.id_encab == id_encabezado &&
                                            //                                             x.cuenta == movNuevo.cuenta &&
                                            //                                             x.idparametronombre == parametro.id_nombre_parametro);
                                            //                                         if (buscarInventario != null)
                                            //                                         {
                                            //                                             buscarInventario.basecontable += movNuevo.basecontable;
                                            //                                             buscarInventario.debito += movNuevo.debito;
                                            //                                             buscarInventario.debitoniif += movNuevo.debitoniif;
                                            //                                             buscarInventario.credito += movNuevo.credito;
                                            //                                             buscarInventario.creditoniif += movNuevo.creditoniif;
                                            //                                             context.Entry(buscarInventario).State =
                                            //                                                 EntityState.Modified;
                                            //                                         }
                                            //                                         else
                                            //                                         {
                                            //                                             mov_contable crearMovContable = new mov_contable
                                            //                                             {
                                            //                                                 id_encab = encabezado.idencabezado,
                                            //                                                 seq = secuencia,
                                            //                                                 idparametronombre =
                                            //                                                     parametro.id_nombre_parametro,
                                            //                                                 cuenta = Convert.ToInt32(movNuevo.cuenta),
                                            //                                                 centro = parametro.centro,
                                            //                                                 nit = encabezado.nit,
                                            //                                                 fec = DateTime.Now,
                                            //                                                 debito = movNuevo.debito,
                                            //                                                 debitoniif = movNuevo.debitoniif,
                                            //                                                 basecontable = movNuevo.basecontable,
                                            //                                                 credito = movNuevo.credito,
                                            //                                                 creditoniif = movNuevo.creditoniif,
                                            //                                                 fec_creacion = DateTime.Now,
                                            //                                                 userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]),
                                            //                                                 detalle =
                                            //                                                     "Facturacion de repuestos con consecutivo " +
                                            //                                                     eg.numero,
                                            //                                                 estado = true
                                            //                                             };
                                            //                                             //context.mov_contable.Add(crearMovContable);
                                            //                                             //context.SaveChanges();
                                            //                                         }
                                            //                                     }

                                            //                                     #endregion

                                            //                                     #region Ingreso

                                            //                                     bool siva = Request["tipo_tarifa_hidden_" + i] == "2";

                                            //                                     if (parametro.id_nombre_parametro == 11 && siva != true)
                                            //                                     {
                                            //                                         icb_referencia perfilReferencia =
                                            //                                             context.icb_referencia.FirstOrDefault(x =>
                                            //                                                 x.ref_codigo == lineas.codigo);
                                            //                                         int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                            //                                         perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                            //                                             r.id == perfilBuscar);

                                            //                                         #region Tiene perfil la referencia

                                            //                                         if (pcr != null)
                                            //                                         {
                                            //                                             int? cuentaVenta = pcr.cuenta_ventas;

                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                            //                                             #region tiene perfil y cuenta asignada al perfil

                                            //                                             if (cuentaVenta != null)
                                            //                                             {
                                            //                                                 movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
                                            //                                                 movNuevo.centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 11
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro;
                                            //                                                 ;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == cuentaVenta)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion

                                            //                                             #region tiene perfil pero no tiene cuenta asignada

                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.cuenta = parametro.cuenta;
                                            //                                                 movNuevo.centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 11
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro;
                                            //                                                 ;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == parametro.cuenta)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;

                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif =
                                            //                                                         Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debitoniif = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                     movNuevo.debito = 0;
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion
                                            //                                         }

                                            //                                         #endregion

                                            //                                         #region La referencia no tiene perfil

                                            //                                         else
                                            //                                         {
                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                            //                                             movNuevo.cuenta = parametro.cuenta;
                                            //                                             movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                 ? parametro.id_nombre_parametro == 11
                                            //                                                     ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                            //                                                     : parametro.centro
                                            //                                                 : parametro.centro;
                                            //                                             movNuevo.fec = DateTime.Now;
                                            //                                             movNuevo.fec_creacion = DateTime.Now;
                                            //                                             movNuevo.userid_creacion =
                                            //                                                 Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                             /*if (info.aplicaniff==true)
                                            //{

                                            //}*/

                                            //                                             if (info.manejabase)
                                            //                                             {
                                            //                                                 movNuevo.basecontable =
                                            //                                                     Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                             }
                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.basecontable = 0;
                                            //                                             }

                                            //                                             if (info.documeto)
                                            //                                             {
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 1)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;

                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 4)
                                            //                                             {
                                            //                                                 movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 movNuevo.debitoniif = 0;
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 5)
                                            //                                             {
                                            //                                                 movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                            //                                                 movNuevo.debito = 0;
                                            //                                             }

                                            //                                             //context.mov_contable.Add(movNuevo);
                                            //                                         }

                                            //                                         #endregion

                                            //                                         mov_contable buscarVenta = context.mov_contable.FirstOrDefault(x =>
                                            //                                             x.id_encab == id_encabezado &&
                                            //                                             x.cuenta == movNuevo.cuenta &&
                                            //                                             x.idparametronombre == parametro.id_nombre_parametro);
                                            //                                         if (buscarVenta != null)
                                            //                                         {
                                            //                                             buscarVenta.basecontable += movNuevo.basecontable;
                                            //                                             buscarVenta.debito += movNuevo.debito;
                                            //                                             buscarVenta.debitoniif += movNuevo.debitoniif;
                                            //                                             buscarVenta.credito += movNuevo.credito;
                                            //                                             buscarVenta.creditoniif += movNuevo.creditoniif;
                                            //                                             context.Entry(buscarVenta).State = EntityState.Modified;
                                            //                                         }
                                            //                                         else
                                            //                                         {
                                            //                                             mov_contable crearMovContable = new mov_contable
                                            //                                             {
                                            //                                                 id_encab = encabezado.idencabezado,
                                            //                                                 seq = secuencia,
                                            //                                                 idparametronombre =
                                            //                                                     parametro.id_nombre_parametro,
                                            //                                                 cuenta = Convert.ToInt32(movNuevo.cuenta),
                                            //                                                 centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 11
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro,
                                            //                                                 nit = encabezado.nit,
                                            //                                                 fec = DateTime.Now,
                                            //                                                 debito = movNuevo.debito,
                                            //                                                 debitoniif = movNuevo.debitoniif,
                                            //                                                 basecontable = movNuevo.basecontable,
                                            //                                                 credito = movNuevo.credito,
                                            //                                                 creditoniif = movNuevo.creditoniif,
                                            //                                                 fec_creacion = DateTime.Now,
                                            //                                                 userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]),
                                            //                                                 detalle =
                                            //                                                     "Facturacion de repuestos con consecutivo " +
                                            //                                                     eg.numero,
                                            //                                                 estado = true
                                            //                                             };
                                            //                                             context.mov_contable.Add(crearMovContable);
                                            //                                             context.SaveChanges();
                                            //                                         }
                                            //                                     }

                                            //                                     #endregion

                                            //                                     #region Costo

                                            //                                     if (parametro.id_nombre_parametro == 12)
                                            //                                     {
                                            //                                         icb_referencia perfilReferencia =
                                            //                                             context.icb_referencia.FirstOrDefault(x =>
                                            //                                                 x.ref_codigo == lineas.codigo);
                                            //                                         int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                            //                                         perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                            //                                             r.id == perfilBuscar);

                                            //                                         #region Tiene perfil la referencia

                                            //                                         if (pcr != null)
                                            //                                         {
                                            //                                             int? cuentaCosto = pcr.cuenta_costo;

                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                            //                                             #region tiene perfil y cuenta asignada al perfil

                                            //                                             if (cuentaCosto != null)
                                            //                                             {
                                            //                                                 movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
                                            //                                                 movNuevo.centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 12
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == cuentaCosto)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = 0;
                                            //                                                     movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                            //                                                     movNuevo.creditoniif = 0;
                                            //                                                     movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif = 0;
                                            //                                                     movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = 0;
                                            //                                                     movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion

                                            //                                             #region tiene perfil pero no tiene cuenta asignada

                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.cuenta = parametro.cuenta;
                                            //                                                 movNuevo.centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 12
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro;
                                            //                                                 ;
                                            //                                                 movNuevo.fec = DateTime.Now;
                                            //                                                 movNuevo.fec_creacion = DateTime.Now;
                                            //                                                 movNuevo.userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);

                                            //                                                 cuenta_puc infoReferencia = context.cuenta_puc
                                            //                                                     .Where(a => a.cntpuc_id == parametro.cuenta)
                                            //                                                     .FirstOrDefault();
                                            //                                                 if (infoReferencia.manejabase)
                                            //                                                 {
                                            //                                                     movNuevo.basecontable =
                                            //                                                         Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                                 }
                                            //                                                 else
                                            //                                                 {
                                            //                                                     movNuevo.basecontable = 0;
                                            //                                                 }

                                            //                                                 if (infoReferencia.documeto)
                                            //                                                 {
                                            //                                                     movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 1)
                                            //                                                 {
                                            //                                                     movNuevo.credito = 0;
                                            //                                                     movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                            //                                                     movNuevo.creditoniif = 0;
                                            //                                                     movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 4)
                                            //                                                 {
                                            //                                                     movNuevo.creditoniif = 0;
                                            //                                                     movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 if (infoReferencia.concepniff == 5)
                                            //                                                 {
                                            //                                                     movNuevo.credito = 0;
                                            //                                                     movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                                 }

                                            //                                                 //context.mov_contable.Add(movNuevo);
                                            //                                             }

                                            //                                             #endregion
                                            //                                         }

                                            //                                         #endregion

                                            //                                         #region La referencia no tiene perfil

                                            //                                         else
                                            //                                         {
                                            //                                             movNuevo.id_encab = encabezado.idencabezado;
                                            //                                             movNuevo.seq = secuencia;
                                            //                                             movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                            //                                             movNuevo.cuenta = parametro.cuenta;
                                            //                                             movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                 ? parametro.id_nombre_parametro == 12
                                            //                                                     ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                            //                                                     : parametro.centro
                                            //                                                 : parametro.centro;
                                            //                                             movNuevo.fec = DateTime.Now;
                                            //                                             movNuevo.fec_creacion = DateTime.Now;
                                            //                                             movNuevo.userid_creacion =
                                            //                                                 Convert.ToInt32(Session["user_usuarioid"]);
                                            //                                             /*if (info.aplicaniff==true)
                                            //{

                                            //}*/

                                            //                                             if (info.manejabase)
                                            //                                             {
                                            //                                                 movNuevo.basecontable =
                                            //                                                     Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                            //                                             }
                                            //                                             else
                                            //                                             {
                                            //                                                 movNuevo.basecontable = 0;
                                            //                                             }

                                            //                                             if (info.documeto)
                                            //                                             {
                                            //                                                 movNuevo.documento = Convert.ToString(eg.numero);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 1)
                                            //                                             {
                                            //                                                 movNuevo.credito = 0;
                                            //                                                 movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                            //                                                 movNuevo.creditoniif = 0;
                                            //                                                 movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 4)
                                            //                                             {
                                            //                                                 movNuevo.creditoniif = 0;
                                            //                                                 movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                             }

                                            //                                             if (buscarCuenta.concepniff == 5)
                                            //                                             {
                                            //                                                 movNuevo.credito = 0;
                                            //                                                 movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                            //                                             }

                                            //                                             //context.mov_contable.Add(movNuevo);
                                            //                                         }

                                            //                                         #endregion

                                            //                                         mov_contable buscarCosto = context.mov_contable.FirstOrDefault(x =>
                                            //                                             x.id_encab == id_encabezado &&
                                            //                                             x.cuenta == movNuevo.cuenta &&
                                            //                                             x.idparametronombre == parametro.id_nombre_parametro);
                                            //                                         if (buscarCosto != null)
                                            //                                         {
                                            //                                             buscarCosto.basecontable += movNuevo.basecontable;
                                            //                                             buscarCosto.debito += movNuevo.debito;
                                            //                                             buscarCosto.debitoniif += movNuevo.debitoniif;
                                            //                                             buscarCosto.credito += movNuevo.credito;
                                            //                                             buscarCosto.creditoniif += movNuevo.creditoniif;
                                            //                                             context.Entry(buscarCosto).State = EntityState.Modified;
                                            //                                         }
                                            //                                         else
                                            //                                         {
                                            //                                             mov_contable crearMovContable = new mov_contable
                                            //                                             {
                                            //                                                 id_encab = encabezado.idencabezado,
                                            //                                                 seq = secuencia,
                                            //                                                 idparametronombre =
                                            //                                                     parametro.id_nombre_parametro,
                                            //                                                 cuenta = Convert.ToInt32(movNuevo.cuenta),
                                            //                                                 centro =
                                            //                                                     Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                         ? parametro.id_nombre_parametro == 12
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : parametro.centro
                                            //                                                         : parametro.centro,
                                            //                                                 nit = encabezado.nit,
                                            //                                                 fec = DateTime.Now,
                                            //                                                 debito = movNuevo.debito,
                                            //                                                 debitoniif = movNuevo.debitoniif,
                                            //                                                 basecontable = movNuevo.basecontable,
                                            //                                                 credito = movNuevo.credito,
                                            //                                                 creditoniif = movNuevo.creditoniif,
                                            //                                                 fec_creacion = DateTime.Now,
                                            //                                                 userid_creacion =
                                            //                                                     Convert.ToInt32(Session["user_usuarioid"]),
                                            //                                                 detalle =
                                            //                                                     "Facturacion de repuestos con consecutivo " +
                                            //                                                     eg.numero,
                                            //                                                 estado = true
                                            //                                             };
                                            //                                             context.mov_contable.Add(crearMovContable);
                                            //                                             context.SaveChanges();
                                            //                                         }
                                            //                                     }

                                            //                                     #endregion

                                            //                                     secuencia++;
                                            //                                     //Cuentas valores

                                            //                                     #region Cuentas valores

                                            //                                     cuentas_valores buscar_cuentas_valores =
                                            //                                         context.cuentas_valores.FirstOrDefault(x =>
                                            //                                             x.centro == parametro.centro &&
                                            //                                             x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit);
                                            //                                     if (buscar_cuentas_valores != null)
                                            //                                     {
                                            //                                         buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
                                            //                                         buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
                                            //                                         buscar_cuentas_valores.debitoniff +=
                                            //                                             Math.Round(movNuevo.debitoniif);
                                            //                                         buscar_cuentas_valores.creditoniff +=
                                            //                                             Math.Round(movNuevo.creditoniif);
                                            //                                         context.Entry(buscar_cuentas_valores).State = EntityState.Modified;

                                            //                                     }
                                            //                                     else
                                            //                                     {
                                            //                                         DateTime fechaHoy = DateTime.Now;
                                            //                                         cuentas_valores crearCuentaValor = new cuentas_valores
                                            //                                         {
                                            //                                             ano = fechaHoy.Year,
                                            //                                             mes = fechaHoy.Month,
                                            //                                             cuenta = movNuevo.cuenta,
                                            //                                             centro =  Request["tipo_tarifa_hidden_" + i] == "2"
                                            //                                                     ? parametro.id_nombre_parametro == 11
                                            //                                                         ? Convert.ToInt32(
                                            //                                                             Request["centro_costo_tf" + i])
                                            //                                                         : parametro.id_nombre_parametro == 12
                                            //                                                             ? Convert.ToInt32(
                                            //                                                                 Request["centro_costo_tf" + i])
                                            //                                                             : movNuevo.centro
                                            //                                                     : movNuevo.centro
                                            //                                         };                                                  
                                            //                                         crearCuentaValor.nit = movNuevo.nit;
                                            //                                         crearCuentaValor.debito = Math.Round(movNuevo.debito);
                                            //                                         crearCuentaValor.credito = Math.Round(movNuevo.credito);
                                            //                                         crearCuentaValor.debitoniff = Math.Round(movNuevo.debitoniif);
                                            //                                         crearCuentaValor.creditoniff = Math.Round(movNuevo.creditoniif);
                                            //                                         context.cuentas_valores.Add(crearCuentaValor);

                                            //                                         }

                                            //                                     #endregion

                                            //                                     totalCreditos += Math.Round(movNuevo.credito);
                                            //                                     totalDebitos += Math.Round(movNuevo.debito);
                                            //                                     listaDescuadrados.Add(new DocumentoDescuadradoModel
                                            //                                     {
                                            //                                         NumeroCuenta =
                                            //                                             "(" + buscarCuenta.cntpuc_numero + ")" +
                                            //                                             buscarCuenta.cntpuc_descp,
                                            //                                         DescripcionParametro = descripcionParametro,
                                            //                                         ValorDebito = movNuevo.debito,
                                            //                                         ValorCredito = movNuevo.credito
                                            //                                     });
                                            //                                  }
                                            //                             }
                                            //                         }

                                            #endregion
                                        }

                                    #region validaciones para guardar

                                    if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                    {
                                        TempData["documento_descuadrado"] =
                                            "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                        ViewBag.documentoSeleccionado = encabezado.tipo;
                                        ViewBag.bodegaSeleccionado = encabezado.bodega;
                                        ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                        ViewBag.documentoDescuadrado = listaDescuadrados;
                                        ViewBag.calculoDebito = totalDebitos;
                                        ViewBag.calculoCredito = totalCreditos;

                                        dbTran.Rollback();
                                        listas2(modelo);
                                        BuscarFavoritos(menu);
                                        return View(modelo);
                                        //return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
                                    }

                                    funciono = 1;

                                    #endregion



                                }
                                if (numinterna > 0)
                                {
                                    listaelementos = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).ToList();




                                    int empresa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P33").Select(z => z.syspar_value).FirstOrDefault());
                                    int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());
                                    int documento = context.tp_doc_registros.Where(x => x.tp_doc_sw.sw == swclasifica).Select(e => e.tpdoc_id).FirstOrDefault();
                                    grupoconsecutivos grupointerrep = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == documento && x.bodega_id == bodega);
                                    DocumentoPorBodegaController docinterrep = new DocumentoPorBodegaController();
                                    long consecutivointerrep = docinterrep.BuscarConsecutivo(grupointerrep.grupo);
                                    encab_documento docencabezado = new encab_documento();
                                    docencabezado.tipo = documento;
                                    docencabezado.numero = consecutivointerrep;
                                    docencabezado.fecha = DateTime.Now;
                                    docencabezado.nit = empresa;
                                    docencabezado.bodega = Convert.ToInt32(bodega);
                                    docencabezado.fec_creacion = DateTime.Now;
                                    docencabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    docencabezado.valor_total = Convert.ToDecimal(Request["totaltotal"]);
                                    docencabezado.impoconsumo = 0;
                                    docencabezado.anulado = false;
                                    docencabezado.estado = true;
                                    context.encab_documento.Add(docencabezado);
                                    context.SaveChanges();



                                    for (int i = 0; i < numinterna; i++)
                                    {
                                        int ano = DateTime.Now.Year;
                                        int mes = DateTime.Now.Month;
                                        int bodegaconsul = Convert.ToInt32(bodega);
                                        string referencia = listaelementos[i].codigo;
                                        referencias_inven referenciax = context.referencias_inven.Where(x => x.codigo == referencia && x.ano == ano && x.mes == mes && x.bodega == bodegaconsul).FirstOrDefault();


                                        lineas_documento linea_doc_rep = new lineas_documento
                                        {
                                            id_encabezado = docencabezado.idencabezado,
                                            codigo = listaelementos[i].codigo,
                                            fec = DateTime.Now,
                                            nit = modelo.nit,
                                            cantidad = listaelementos[i].cantidad,
                                            porcentaje_iva = float.Parse(listaelementos[i].porcentaje_iva.ToString()),
                                            valor_unitario = referenciax.costo_prom, //costo promedio 
                                            porcentaje_descuento = float.Parse(listaelementos[i].porcentaje_descuento.ToString()),
                                            costo_unitario = referenciax.costo_prom,
                                            bodega = Convert.ToInt32(bodega),
                                            cantidad_und = 0,
                                            cantidad_pedida = 0,
                                            costo_unitario_sin = 0,
                                            cantidad_devuelta = 0,
                                            fec_creacion = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                            estado = true,
                                            costo_niff = 0,
                                            id_tarifa_cliente = tipotarifa
                                        };
                                        context.lineas_documento.Add(linea_doc_rep);
                                        context.SaveChanges();
                                    }

                                    funciono = 1;

                                    if (idencanbinter != 0)
                                    {
                                        doc.ActualizarConsecutivo(grupointerrep.grupo, consecutivointerrep);

                                    }

                                    idencanbinter = Convert.ToInt32(docencabezado.numero.ToString());
                                    idencanbinternum = docencabezado.idencabezado;

                                }
                                if (funciono > 0)
                                {
                                    //visualiza el numero de encab y el id para descargar el pdf
                                    if (idencanbinter > 0)
                                    {
                                        TempData["mensajeinterno"] = idencanbinter;
                                        TempData["mensajeinterno2"] = idencanbinternum;
                                        ViewBag.facid = idencabezadonormal;
                                    }
                                    else
                                    {

                                        TempData["mensaje"] = "Registro creado correctamente";
                                        ViewBag.facid = idencabezadonormal;
                                        ViewBag.repve = idencanbinternum;
                                    }

                                    context.SaveChanges();
                                    dbTran.Commit();

                                    DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                    doc.ActualizarConsecutivo(grupo.grupo, consecutivo);
                                    return RedirectToAction("FacturarRepuestos", "FacturacionRepuestos", new { menu });
                                }
                            }
                            else
                            {
                                TempData["mensaje_error"] = "no hay consecutivo";
                            }
                        }
                        //cierre
                        else
                        {
                            TempData["mensaje_error"] = "Lista vacia";
                        }
                    }
                    catch (DbEntityValidationException ex)
                    {
                        var mensaje = ex;
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible guardar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }

            listas();
            BuscarFavoritos(menu);
            return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
        }

        public JsonResult Descuentoporcliente(int idtercero)
        {

            var descuentocli = context.tercero_cliente.Where(x => x.tercero_id == idtercero).Select(d => d.dscto_rep).FirstOrDefault();


            return Json(descuentocli, JsonRequestBehavior.AllowGet);
        }

        public ActionResult descargarpdfDI(int id)
        {
            var ot = context.encab_documento.Where(x => x.idencabezado == id).FirstOrDefault();
            int facturado = Convert.ToInt32(Session["user_usuarioid"]);
            var nombrefa = context.users.Where(x => x.user_id == facturado).Select(s => new { nombre = s.user_nombre + " " + s.user_apellido }).FirstOrDefault();
            var ciudad = context.nom_ciudad.Where(x => x.ciu_id == ot.icb_terceros.ciu_id).Select(x => x.ciu_nombre).FirstOrDefault();
            var empresa = context.tablaempresa.FirstOrDefault();
            PDFRetiroInterno_icbrefmov retiroRep = new PDFRetiroInterno_icbrefmov
            {
                Aseguradoa = empresa.nombre_empresa,
                Direccion = empresa.direccion,
                Telefono = empresa.telefono,
                Documentocliente = empresa.nit,
                Ciudad = "",
                Bodega = ot.bodega_concesionario.bodccs_nombre,
                //  Placa = ot.icb_vehiculo.plac_vh != null ? ot.icb_vehiculo.plac_vh : "",
                //      Vehiculo = ot.icb_vehiculo.modelo_vehiculo.modvh_nombre != null ? ot.icb_vehiculo.modelo_vehiculo.modvh_nombre : "",
                //     Serie = ot.icb_vehiculo.vin != null ? ot.icb_vehiculo.vin : "",
                //      Modelo = ot.icb_vehiculo.anio_vh.ToString() != null ? ot.icb_vehiculo.anio_vh.ToString() : "",
                //     Kilometraje = ot.icb_vehiculo.kilometraje.ToString() != null ? ot.icb_vehiculo.kilometraje.ToString() : "",
                OrdenT = ot.numero.ToString(),
                Facturadopor = nombrefa.nombre.ToString(),
                Asesor = ot.vendedor != null ? ot.users.user_nombre + " " + ot.users.user_apellido : "",
                Repuestosr = context.lineas_documento.Where(x => x.id_encabezado == id).ToList()


            };
            int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());

            var dicodigo = context.encab_documento.Where(x => x.id_pedido_vehiculo == id && x.tp_doc_registros.tp_doc_sw.sw == swclasifica).Select(s => new { codigo = s.tp_doc_registros.prefijo + "-" + s.numero }).FirstOrDefault();

            string nombre = "RetiroInternoRI_";
            nombre = nombre + "file.pdf";
            string bodega = ot.bodega_concesionario.bodccs_nombre;
            string customSwitches = string.Format("--print-media-type --allow {0} --header-html {0} --header-spacing 5 --footer-html {1} --footer-spacing 0",
                    Url.Action("CabeceraRetiroRIPDF", "ordenTaller", new { codigoentrada = ot.numero, bodega = bodega, aseguradoa = empresa.nombre_empresa, dir = empresa.direccion, tel = empresa.telefono, nit = empresa.nit }, Request.Url.Scheme), Url.Action("PiePDF", "ordenTaller", new { area = "" }, Request.Url.Scheme));

            ViewAsPdf something = new ViewAsPdf("RetiroInternoRIPDF_icbrefmov", retiroRep)
            {
                PageOrientation = Orientation.Landscape,
                CustomSwitches = customSwitches,
                FileName = nombre,
                PageSize = Size.Letter,
                PageMargins = new Margins { Top = 40, Bottom = 5 }
            };



            return something;


        }

        /*
        public JsonResult buscartipoDocumentoCargue(int? id)
        {


    
        public ActionResult CabeceraRetiroRIPDF(string codigoentrada, string bodega, string aseguradoa, string dir, string tel, string nit)
            {
            var recibido = Request;
            var fecha = DateTime.Now;
            var modelo2 = new PDFRetiroInterno
                {
                CodigoRetiro = codigoentrada,
                Fechadocumento = fecha.ToString("yyyy-MM-dd"),
                Bodega = bodega,
                Aseguradoa = aseguradoa,
                Direccion = dir,
                Telefono = tel,
                Documentocliente = nit
                };

            return View(modelo2);
            }

        public ActionResult PiePDF()
            {
            return View();
            }



        
      

     



        //[HttpPost]
        //public ActionResult Facturar(NotasContablesModel modelo, int? menu)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        using (DbContextTransaction dbTran = context.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                var funciono = 0;
        //                decimal totalCreditos = 0;
        //                decimal totalDebitos = 0;
        //                decimal costoPromedioTotal = 0;

        //                var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
        //                                                  join nombreParametro in context.paramcontablenombres
        //                                                  on perfil.id_nombre_parametro equals nombreParametro.id
        //                                                  join cuenta in context.cuenta_puc
        //                                                  on perfil.cuenta equals cuenta.cntpuc_id
        //                                                  where perfil.id_perfil == modelo.perfilcontable
        //                                                  select new
        //                                                  {
        //                                                      perfil.id,
        //                                                      perfil.id_nombre_parametro,
        //                                                      perfil.cuenta,
        //                                                      perfil.centro,
        //                                                      perfil.id_perfil,
        //                                                      nombreParametro.descripcion_parametro,
        //                                                      cuenta.cntpuc_numero
        //                                                  }).ToList();

        //                var secuencia = 1;
        //                //decimal totalDebitos = 0;
        //                //decimal totalCreditos = 0;


        //                List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
        //                var centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
        //                var idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;

        //                List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();

        //                var costoLineas = Convert.ToInt32(Request["lista_referencias"]);
        //                for (int i = 0; i <= costoLineas; i++)
        //                {
        //                    if (!string.IsNullOrEmpty(Request["referencia" + i]))
        //                    {
        //                        var anio = DateTime.Now.Year;
        //                        var mes = DateTime.Now.Month;

        //                        var referencia = Request["referencia" + i];
        //                        var vwPromedio = context.vw_promedio.FirstOrDefault(x => x.codigo == referencia && x.ano == anio && x.mes == mes);
        //                        var costoReferencia = vwPromedio.Promedio;

        //                        costoPromedioTotal += Convert.ToDecimal(costoReferencia) * Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                    }
        //                }
        //                var bodega = Convert.ToInt32(Request["selectBodegas"]);
        //                var lista = Request["lista_referencias"];
        //                if (!String.IsNullOrEmpty(lista))
        //                {
        //                    var datos = Convert.ToInt32(lista);
        //                    var costoTotal = Convert.ToDecimal(Request["valor_proveedor"]);//costo con retenciones y fletes
        //                    var ivaEncabezado = Convert.ToDecimal(Request["valorIVA"]);//valor total del iva
        //                    var descuentoEncabezado = Convert.ToDecimal(Request["valorDes"]);//valor total del descuento
        //                    var costoEncabezado = Convert.ToDecimal(Request["valorSub"]);//valor antes de impuestos

        //                    var valor_totalenca = costoEncabezado - descuentoEncabezado;

        //                    //consecutivo
        //                    var grupo = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == modelo.tipo && x.bodega_id == bodega);
        //                    if (grupo != null)
        //                    {
        //                        DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
        //                        var consecutivo = doc.BuscarConsecutivo(grupo.grupo);

        //                        //Encabezado documento
        //                        #region encabezado
        //                        encab_documento encabezado = new encab_documento();
        //                        encabezado.tipo = modelo.tipo;
        //                        encabezado.numero = consecutivo;
        //                        encabezado.nit = modelo.nit;
        //                        encabezado.fecha = DateTime.Now;
        //                        encabezado.prefactura = true;
        //                        var condicion = modelo.fpago_id;
        //                        encabezado.fpago_id = condicion;
        //                        //encabezado.centro_doc = Convert.ToInt32(modelo.centro);
        //                        var dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
        //                        var vencimiento = DateTime.Now.AddDays(dias);
        //                        encabezado.vencimiento = vencimiento;
        //                        encabezado.valor_total = costoTotal;
        //                        encabezado.iva = ivaEncabezado;
        //                        // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado
        //                        #region calculo de retenciones
        //                        var buscarTipoDocRegistro = context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
        //                        var buscarProveedor = context.tercero_proveedor.FirstOrDefault(x => x.tercero_id == modelo.nit);
        //                        var regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id : 0;
        //                        var buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x => x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw && x.tipo_regimenid == regimen_proveedor);

        //                        decimal retenciones = 0;

        //                        if (buscarPerfilTributario != null)
        //                        {
        //                            if (buscarPerfilTributario.retfuente == "A" && valor_totalenca >= buscarTipoDocRegistro.baseretencion)
        //                            {
        //                                encabezado.porcen_retencion = buscarTipoDocRegistro.retencion;
        //                                encabezado.retencion = Math.Round(valor_totalenca * Convert.ToDecimal(buscarTipoDocRegistro.retencion / 100));
        //                                retenciones += encabezado.retencion;
        //                            }
        //                            if (buscarPerfilTributario.retiva == "A" && ivaEncabezado >= buscarTipoDocRegistro.baseiva)
        //                            {
        //                                encabezado.porcen_reteiva = buscarTipoDocRegistro.retiva;
        //                                encabezado.retencion_iva = Math.Round(encabezado.iva * Convert.ToDecimal(buscarTipoDocRegistro.retiva / 100));
        //                                retenciones += encabezado.retencion_iva;
        //                            }
        //                            if (buscarPerfilTributario.autorretencion == "A")
        //                            {
        //                                var tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
        //                                encabezado.porcen_autorretencion = (float)tercero_acteco;
        //                                encabezado.retencion_causada = Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100));
        //                                retenciones += encabezado.retencion_causada;
        //                            }
        //                            if (buscarPerfilTributario.retica == "A" && valor_totalenca >= buscarTipoDocRegistro.baseica)
        //                            {
        //                                var bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x => x.idcodica == buscarProveedor.acteco_id && x.bodega == bodega);
        //                                var tercero_acteco = buscarProveedor.acteco_tercero.tarifa;
        //                                if (bodega_acteco != null)
        //                                {
        //                                    encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
        //                                    encabezado.retencion_ica = Math.Round(valor_totalenca * Convert.ToDecimal(bodega_acteco.porcentaje / 1000));
        //                                    retenciones += encabezado.retencion_ica;
        //                                }
        //                                if (tercero_acteco != 0)
        //                                {
        //                                    encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
        //                                    encabezado.retencion_ica = Math.Round(valor_totalenca * Convert.ToDecimal(buscarProveedor.acteco_tercero.tarifa / 1000));
        //                                    retenciones += encabezado.retencion_ica;
        //                                }
        //                                else
        //                                {
        //                                    encabezado.porcen_retica = (float)buscarTipoDocRegistro.retica;
        //                                    encabezado.retencion_ica = Math.Round(valor_totalenca * Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000));
        //                                    retenciones += encabezado.retencion_ica;
        //                                }
        //                            }
        //                        }
        //                        #endregion
        //                        if (modelo.fletes != null)
        //                        {
        //                            encabezado.fletes = Convert.ToDecimal(modelo.fletes);
        //                            encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes);
        //                        }
        //                        encabezado.costo = costoPromedioTotal;
        //                        encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
        //                        encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
        //                        var pedido = Request["pedido"];
        //                        if (!String.IsNullOrEmpty(pedido))
        //                        {
        //                            encabezado.pedido = Convert.ToInt32(Request["pedido"]);
        //                        }
        //                        encabezado.bodega = bodega;
        //                        encabezado.moneda = Convert.ToInt32(Request["moneda"]);
        //                        if (Request["tasa"] != "")
        //                        {
        //                            encabezado.tasa = Convert.ToInt32(Request["tasa"]);
        //                        }
        //                        encabezado.valor_mercancia = valor_totalenca;
        //                        encabezado.fec_creacion = DateTime.Now;
        //                        encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                        encabezado.estado = true;
        //                        encabezado.concepto = modelo.concepto;
        //                        encabezado.concepto2 = modelo.concepto2;

        //                        context.encab_documento.Add(encabezado);
        //                        context.SaveChanges();
        //                        #endregion

        //                        var id_encabezado = context.encab_documento.OrderByDescending(x => x.idencabezado).FirstOrDefault().idencabezado;

        //                        var eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);

        //                        //Mov Contable
        //                        #region movimientos contables
        //                        //buscamos en perfil cuenta documento, por medio del perfil seleccionado
        //                        decimal creditosuma = 0;
        //                        decimal creditosumaniff = 0;

        //                        decimal debitosuma = 0;
        //                        decimal debitosumaniff = 0;

        //                        foreach (var parametro in parametrosCuentasVerificar)
        //                        {
        //                            var descripcionParametro = context.paramcontablenombres.FirstOrDefault(x => x.id == parametro.id_nombre_parametro).descripcion_parametro;
        //                            var buscarCuenta = context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

        //                            if (buscarCuenta != null)
        //                            {
        //                                if ((parametro.id_nombre_parametro == 10 && Convert.ToDecimal(valor_totalenca) != 0)
        //                                    || (parametro.id_nombre_parametro == 3 && Convert.ToDecimal(eg.retencion) != 0)
        //                                    || (parametro.id_nombre_parametro == 4 && Convert.ToDecimal(eg.retencion_iva) != 0)
        //                                    || (parametro.id_nombre_parametro == 5 && Convert.ToDecimal(eg.retencion_ica) != 0)
        //                                    || (parametro.id_nombre_parametro == 6 && Convert.ToDecimal(eg.fletes) != 0)
        //                                    || (parametro.id_nombre_parametro == 14 && Convert.ToDecimal(eg.iva_fletes) != 0)
        //                                    || (parametro.id_nombre_parametro == 17 && Convert.ToDecimal(eg.retencion_causada) != 0)
        //                                    || (parametro.id_nombre_parametro == 18 && Convert.ToDecimal(eg.retencion_causada) != 0))
        //                                {
        //                                    /*
        //                                    mov_contable movNuevo = new mov_contable();
        //                                    movNuevo.id_encab = eg.idencabezado;
        //                                    movNuevo.seq = secuencia;
        //                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                    movNuevo.cuenta = parametro.cuenta;
        //                                    movNuevo.centro = parametro.centro;
        //                                    movNuevo.fec = DateTime.Now;
        //                                    movNuevo.fec_creacion = DateTime.Now;
        //                                    movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                    movNuevo.documento = Convert.ToString(modelo.pedido);
        //                                    movNuevo.detalle = "Facturacion de repuestos con consecutivo " + eg.numero;
        //                                    movNuevo.estado = true;
        //                                    */
        //                                    var info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

        //                                    if (info.tercero == true)
        //                                    {
        //                                        //movNuevo.nit = modelo.nit;
        //                                    }
        //                                    else
        //                                    {
        //                                        var tercero = context.icb_terceros.Where(t => t.doc_tercero == "0").FirstOrDefault();
        //                                        //movNuevo.nit = tercero.tercero_id;
        //                                    }

        //                                    // las siguientes validaciones se hacen dependiendo de la cuenta que esta moviendo la compra manual, para guardar la informacion acorde

        //                                    #region Cuentas X Cobrar
        //                                    if (parametro.id_nombre_parametro == 10)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/

        //                                        if (info.manejabase == true)
        //                                        {
        //                                            //movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                        }
        //                                        else
        //                                        {
        //                                            //movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            //movNuevo.documento = Convert.ToString(modelo.pedido);
        //                                        }

        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma= Convert.ToDecimal(costoTotal);
        //                                            /*movNuevo.credito = 0;
        //                                            movNuevo.debito = Convert.ToDecimal(costoTotal);*/
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff= Convert.ToDecimal(costoTotal);
        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = Convert.ToDecimal(costoTotal);*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(costoTotal);

        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = Convert.ToDecimal(costoTotal);*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(costoTotal);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = Convert.ToDecimal(costoTotal);
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region Retencion
        //                                    if (parametro.id_nombre_parametro == 3)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/

        //                                        if (info.manejabase == true)
        //                                        {
        //                                            //movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                        }
        //                                        else
        //                                        {
        //                                            //movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            //movNuevo.documento = modelo.documento;
        //                                        }

        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion);

        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion;
        //                                            */
        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion;*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion);
        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion;*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion);
        //                                            /*movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion;*/
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region ReteIVA
        //                                    if (parametro.id_nombre_parametro == 4)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(ivaEncabezado);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }
        //                                        */

        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_iva);
        //                                            /*movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_iva;*/
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_iva);
        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_iva;*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_iva);
        //                                            /*movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_iva;*/
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_iva);
        //                                            /*movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_iva;*/
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region ReteICA
        //                                    if (parametro.id_nombre_parametro == 5)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }*/

        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_ica);


        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_ica);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_ica;

        //                                            movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_ica;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_ica);
        //                                            /*
        //                                            movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_ica;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_ica);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_ica;
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region Fletes
        //                                    if (parametro.id_nombre_parametro == 6)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(modelo.fletes);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }*/

        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {

        //                                            creditosuma = Convert.ToDecimal(eg.fletes);
        //                                            debitosuma =0;


        //                                            creditosumaniff = Convert.ToDecimal(eg.fletes);
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.fletes;
        //                                            movNuevo.debito = 0;

        //                                            movNuevo.creditoniif = eg.fletes;
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = Convert.ToDecimal(eg.fletes);
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.creditoniif = eg.fletes; 
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = Convert.ToDecimal(eg.fletes);
        //                                            debitosuma = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.fletes;
        //                                            movNuevo.debito = 0;
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region IVA fletes
        //                                    if (parametro.id_nombre_parametro == 14)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(modelo.fletes);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }
        //                                        */
        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = Convert.ToDecimal(eg.iva_fletes);
        //                                            debitosuma = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.iva_fletes;
        //                                            movNuevo.debito = 0;
        //                                            */
        //                                            creditosumaniff = Convert.ToDecimal(eg.fletes);
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.creditoniif = eg.iva_fletes;
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = Convert.ToDecimal(eg.iva_fletes);
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.creditoniif = eg.iva_fletes;
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = Convert.ToDecimal(eg.iva_fletes);
        //                                            debitosuma = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.iva_fletes;
        //                                            movNuevo.debito = 0;
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region AutoRetencion Debito
        //                                    if (parametro.id_nombre_parametro == 17)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }
        //                                        */
        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_causada);

        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_causada);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_causada;

        //                                            movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_causada;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = 0;
        //                                            debitosumaniff = Convert.ToDecimal(eg.retencion_causada);
        //                                            /*
        //                                            movNuevo.creditoniif = 0;
        //                                            movNuevo.debitoniif = eg.retencion_causada;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = 0;
        //                                            debitosuma = Convert.ToDecimal(eg.retencion_causada);
        //                                            /*
        //                                            movNuevo.credito = 0;
        //                                            movNuevo.debito = eg.retencion_causada;
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region AutoRetencion Credito
        //                                    if (parametro.id_nombre_parametro == 18)
        //                                    {
        //                                        /*if (info.aplicaniff==true)
        //                                        {

        //                                        }*/
        //                                        /*
        //                                        if (info.manejabase == true)
        //                                        {
        //                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                        }
        //                                        else
        //                                        {
        //                                            movNuevo.basecontable = 0;
        //                                        }

        //                                        if (info.documeto == true)
        //                                        {
        //                                            movNuevo.documento = modelo.documento;
        //                                        }
        //                                        */
        //                                        if (buscarCuenta.concepniff == 1)
        //                                        {
        //                                            creditosuma = eg.retencion_causada;
        //                                            debitosuma =0;

        //                                            creditosumaniff = eg.retencion_causada;
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.retencion_causada;
        //                                            movNuevo.debito = 0;

        //                                            movNuevo.creditoniif = eg.retencion_causada;
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 4)
        //                                        {
        //                                            creditosumaniff = eg.retencion_causada;
        //                                            debitosumaniff = 0;
        //                                            /*
        //                                            movNuevo.creditoniif = eg.retencion_causada;
        //                                            movNuevo.debitoniif = 0;
        //                                            */
        //                                        }

        //                                        if (buscarCuenta.concepniff == 5)
        //                                        {
        //                                            creditosuma = eg.retencion_causada;
        //                                            debitosuma = 0;
        //                                            /*
        //                                            movNuevo.credito = eg.retencion_causada;
        //                                            movNuevo.debito = 0;
        //                                            */
        //                                        }
        //                                    }
        //                                    #endregion

        //                                    //context.mov_contable.Add(movNuevo);
        //                                    //context.SaveChanges();

        //                                    secuencia++;
        //                                    //Cuentas valores
        //                                    #region Cuentas valores
        //                                    /*
        //                                    var buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x => x.centro == parametro.centro && x.cuenta == parametro.cuenta && x.nit == movNuevo.nit);
        //                                    if (buscar_cuentas_valores != null)
        //                                    {
        //                                        buscar_cuentas_valores.debito += movNuevo.debito;
        //                                        buscar_cuentas_valores.credito += movNuevo.credito;
        //                                        buscar_cuentas_valores.debitoniff += movNuevo.debitoniif;
        //                                        buscar_cuentas_valores.creditoniff += movNuevo.creditoniif;
        //                                        context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
        //                                    }
        //                                    else
        //                                    {
        //                                        var fechaHoy = DateTime.Now;
        //                                        var crearCuentaValor = new cuentas_valores();
        //                                        crearCuentaValor.ano = fechaHoy.Year;
        //                                        crearCuentaValor.mes = fechaHoy.Month;
        //                                        crearCuentaValor.cuenta = movNuevo.cuenta;
        //                                        crearCuentaValor.centro = movNuevo.centro;
        //                                        crearCuentaValor.nit = movNuevo.nit;
        //                                        crearCuentaValor.debito = movNuevo.debito;
        //                                        crearCuentaValor.credito = movNuevo.credito;
        //                                        crearCuentaValor.debitoniff = movNuevo.debitoniif;
        //                                        crearCuentaValor.creditoniff = movNuevo.creditoniif;
        //                                        context.cuentas_valores.Add(crearCuentaValor);
        //                                        //context.SaveChanges();
        //                                    }
        //                                    */
        //                                    #endregion

        //                                    totalCreditos += creditosuma;
        //                                    totalDebitos += debitosuma;
        //                                    /*
        //                                    totalCreditos += movNuevo.credito;
        //                                    totalDebitos += movNuevo.debito;
        //                                    */
        //                                    listaDescuadrados.Add(new DocumentoDescuadradoModel()
        //                                    {
        //                                        NumeroCuenta = "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
        //                                        DescripcionParametro = descripcionParametro,
        //                                        /*ValorDebito = movNuevo.debito,
        //                                        ValorCredito = movNuevo.credito*/
        //                                        ValorDebito = debitosuma,
        //                                        ValorCredito = creditosuma
        //                                    });
        //                                }
        //                            }
        //                        }
        //                        #endregion

        //                        //Documentos a cruzar
        //                        #region Documentos a cruzar
        //                        /*var listaAnticipo = Request["listaAnticipo"];
        //                        if (!String.IsNullOrEmpty(listaAnticipo))
        //                        {
        //                            var la = Convert.ToInt32(listaAnticipo);
        //                            for (int i = 1; i <= la; i++)
        //                            {
        //                                var encabAnti = Convert.ToInt32(Request["encabAnticipo" + i]);
        //                                if (encabAnti != 0)
        //                                {
        //                                    var encabezadoAnticipo = context.encab_documento.FirstOrDefault(x => x.idencabezado == encabAnti);

        //                                    documentosacruzar dac = new documentosacruzar();
        //                                    dac.idencabrecibo = encabAnti;
        //                                    dac.valorrecibo = encabezadoAnticipo.valor_total;
        //                                    dac.idencabfactura = id_encabezado;
        //                                    dac.valorfactura = eg.valor_total;
        //                                    dac.saldo = encabezadoAnticipo.valor_total - eg.valor_total;

        //                                    context.documentosacruzar.Add(dac);
        //                                    context.SaveChanges();
        //                                }
        //                            }
        //                        }*/
        //                        #endregion

        //                        //Lineas documento
        //                        #region lineasDocumento
        //                        List<mov_contable> listaMov = new List<mov_contable>();
        //                        var listaLineas = Convert.ToInt32(Request["lista_referencias"]);
        //                        for (int i = 0; i <= listaLineas; i++)
        //                        {
        //                            if (!string.IsNullOrEmpty(Request["referencia" + i]))
        //                            {
        //                                var porDescuento = (!string.IsNullOrEmpty(Request["descuentoReferencia" + i])) ? Convert.ToDecimal(Request["descuentoReferencia" + i]) : 0;

        //                                var codigo = Request["referencia" + i];
        //                                var cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                var valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i]);
        //                                var descontar = porDescuento / 100;
        //                                var porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i]) / 100;
        //                                var final = Math.Round((valorReferencia - (valorReferencia * descontar)));
        //                                var baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                var ivaReferencia = Math.Round((final * porIVAReferencia) * Convert.ToDecimal(Request["cantidadReferencia" + i]));
        //                                var unidadCodigo = context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
        //                                var und = unidadCodigo.unidad_medida;

        //                                var vwPromedio = context.vw_promedio.FirstOrDefault(x => x.codigo == codigo && x.ano == DateTime.Now.Year && x.mes == DateTime.Now.Month);
        //                                var costoReferencia = vwPromedio.Promedio;
        //                                var cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i]);

        //                                if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
        //                                {
        //                                    var pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

        //                                    var buscar_movimientoPedido = context.icb_referencia_movdetalle.FirstOrDefault(x => x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
        //                                    if (buscar_movimientoPedido != null)
        //                                    {
        //                                        if (buscar_movimientoPedido.refdet_saldo != null)
        //                                        {
        //                                            buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
        //                                        }
        //                                        else
        //                                        {
        //                                            buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
        //                                        }

        //                                        context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
        //                                    }
        //                                }

        //                                lineas_documento lineas = new lineas_documento();
        //                                lineas.id_encabezado = id_encabezado;
        //                                lineas.codigo = Request["referencia" + i];
        //                                lineas.seq = i + 1;
        //                                lineas.fec = DateTime.Now;
        //                                lineas.nit = modelo.nit;
        //                                lineas.und = Convert.ToString(und);
        //                                lineas.cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                var ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i]);
        //                                lineas.porcentaje_iva = (float)ivaLista;
        //                                lineas.valor_unitario = final;
        //                                var descuento = porDescuento;
        //                                lineas.porcentaje_descuento = (float)descuento;
        //                                lineas.costo_unitario = Convert.ToDecimal(costoReferencia);
        //                                lineas.bodega = bodega;
        //                                lineas.fec_creacion = DateTime.Now;
        //                                lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                lineas.estado = true;
        //                                lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
        //                                lineas.moneda = Convert.ToInt32(Request["moneda"]);
        //                                if (Request["tasa"] != "")
        //                                {
        //                                    lineas.tasa = Convert.ToInt32(Request["tasa"]);
        //                                }
        //                                if (Request["centro_costo_tf"+i] != "")
        //                                {
        //                                    lineas.centro_costo = Convert.ToInt32("centro_costo_tf"+i);
        //                                }
        //                                lineas.vendedor = eg.vendedor;

        //                                context.lineas_documento.Add(lineas);

        //                                #endregion

        //                                //Referencias Inven
        //                                #region referencias inven
        //                                var anio = DateTime.Now.Year;
        //                                var mes = DateTime.Now.Month;

        //                                /*
        //                                referencias_inven refin = new referencias_inven();

        //                                var existencia = context.referencias_inven.FirstOrDefault(x => x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);

        //                                if (existencia != null)
        //                                {
        //                                    existencia.codigo = codigo;
        //                                    existencia.can_sal += Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                    existencia.cos_sal += Convert.ToDecimal(cr);//(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
        //                                    existencia.can_vta += Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                    existencia.cos_vta += Convert.ToDecimal(cr);//(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
        //                                    existencia.val_vta += baseUnitario;
        //                                    context.Entry(existencia).State = EntityState.Modified;
        //                                }
        //                                else
        //                                {
        //                                    refin.bodega = bodega;
        //                                    refin.codigo = codigo;
        //                                    refin.ano = Convert.ToInt16(DateTime.Now.Year);
        //                                    refin.mes = Convert.ToInt16(DateTime.Now.Month);
        //                                    refin.can_sal = Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                    refin.cos_sal = Convert.ToDecimal(cr); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
        //                                    refin.can_vta = Convert.ToDecimal(Request["cantidadReferencia" + i]);
        //                                    refin.cos_vta = Convert.ToDecimal(cr); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
        //                                    refin.val_vta = baseUnitario;
        //                                    refin.modulo = "R";
        //                                    context.referencias_inven.Add(refin);
        //                                }
        //                                */
        //                                #endregion

        //                                //Mov Contable (IVA, Inventario, Costo, Ingreso)
        //                                #region Mov Contable (IVA, Inventario, Costo, Ingreso)
        //                                foreach (var parametro in parametrosCuentasVerificar)
        //                                {
        //                                    var descripcionParametro = context.paramcontablenombres.FirstOrDefault(x => x.id == parametro.id_nombre_parametro).descripcion_parametro;
        //                                    var buscarCuenta = context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

        //                                    if (buscarCuenta != null)
        //                                    {
        //                                        if ((parametro.id_nombre_parametro == 2 && Convert.ToDecimal(ivaEncabezado) != 0)
        //                                            || (parametro.id_nombre_parametro == 9 && Convert.ToDecimal(costoPromedioTotal) != 0)//costo promedio
        //                                            || (parametro.id_nombre_parametro == 20 && Convert.ToDecimal(costoPromedioTotal) != 0)//costo promedio
        //                                            || (parametro.id_nombre_parametro == 11 && Convert.ToDecimal(costoEncabezado) != 0)
        //                                            || (parametro.id_nombre_parametro == 12 && Convert.ToDecimal(costoPromedioTotal) != 0))//costo promedio
        //                                        {
        //                                            /*
        //                                            mov_contable movNuevo = new mov_contable();
        //                                            movNuevo.id_encab = encabezado.idencabezado;
        //                                            movNuevo.seq = secuencia;
        //                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                            movNuevo.cuenta = parametro.cuenta;
        //                                            movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro; ;
        //                                            movNuevo.fec = DateTime.Now;
        //                                            movNuevo.fec_creacion = DateTime.Now;
        //                                            movNuevo.tipo_tarifa = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
        //                                            movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                            movNuevo.documento = Convert.ToString(modelo.pedido);
        //                                            */
        //                                            var info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

        //                                            if (info.tercero == true)
        //                                            {
        //                                                //movNuevo.nit = modelo.nit;
        //                                            }
        //                                            else
        //                                            {
        //                                                var tercero = context.icb_terceros.Where(t => t.doc_tercero == "0").FirstOrDefault();
        //                                                //movNuevo.nit = tercero.tercero_id;
        //                                            }

        //                                            #region IVA
        //                                            if (parametro.id_nombre_parametro == 2)
        //                                            {
        //                                                var perfilReferencia = context.icb_referencia.FirstOrDefault(x => x.ref_codigo == lineas.codigo);
        //                                                var perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
        //                                                var pcr = context.perfilcontable_referencia.FirstOrDefault(r => r.id == perfilBuscar);
        //                                                #region Tiene perfil la referencia
        //                                                if (pcr != null)
        //                                                {
        //                                                    var cuentaIva = pcr.cuenta_dev_iva_compras;

        //                                                    //movNuevo.id_encab = encabezado.idencabezado;
        //                                                    //movNuevo.seq = secuencia;
        //                                                    //movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    #region si tiene perfil y cuenta asignada a ese perfil
        //                                                    if (cuentaIva != null)
        //                                                    {
        //                                                        /*movNuevo.cuenta = Convert.ToInt32(cuentaIva);
        //                                                        movNuevo.centro = parametro.centro;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);*/

        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == cuentaIva).FirstOrDefault();
        //                                                        if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            //movNuevo.basecontable = Convert.ToDecimal(baseUnitario);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            //movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            //movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma= Convert.ToDecimal(ivaReferencia);
        //                                                            debitosuma = 0;
        //                                                            /*movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debito = 0;*/
        //                                                            creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosumaniff = 0;
        //                                                            /*movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debitoniif = 0;*/
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                        }
        //                                                        // context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                    #region si tiene perfil pero no tiene cuenta asignada
        //                                                    else
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = parametro.cuenta;
        //                                                        movNuevo.centro = parametro.centro;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();
        //                                                        if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            //movNuevo.basecontable = Convert.ToDecimal(baseUnitario);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            //movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            //movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosuma = 0;

        //                                                            creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debito = 0;

        //                                                            movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debitoniif = 0;*/
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(ivaReferencia);
        //                                                            debitosuma = 0;
        //                                                            /*movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                            movNuevo.debito = 0;*/
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                }
        //                                                #endregion
        //                                                #region La referencia no tiene perfil
        //                                                else
        //                                                {
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    movNuevo.cuenta = parametro.cuenta;
        //                                                    movNuevo.centro = parametro.centro;
        //                                                    movNuevo.fec = DateTime.Now;
        //                                                    movNuevo.fec_creacion = DateTime.Now;
        //                                                    movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    */
        //                                                    /*if (info.aplicaniff==true)
        //                                                    {

        //                                                    }*/
        //                                                    /*
        //                                                    if (info.manejabase == true)
        //                                                    {
        //                                                        movNuevo.basecontable = Convert.ToDecimal(baseUnitario);
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        movNuevo.basecontable = 0;
        //                                                    }

        //                                                    if (info.documeto == true)
        //                                                    {
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                    }*/

        //                                                    if (buscarCuenta.concepniff == 1)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(ivaReferencia);
        //                                                        debitosuma = 0;
        //                                                        /*movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                        movNuevo.debito = 0;*/
        //                                                        creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                        debitosumaniff = 0;
        //                                                        /*
        //                                                        movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                        movNuevo.debitoniif = 0;
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 4)
        //                                                    {
        //                                                        creditosumaniff = Convert.ToDecimal(ivaReferencia);
        //                                                        debitosumaniff = 0;
        //                                                        /*movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia);
        //                                                        movNuevo.debitoniif = 0;*/
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 5)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(ivaReferencia);
        //                                                        debitosuma = 0;
        //                                                        /*
        //                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia);
        //                                                        movNuevo.debito = 0;
        //                                                        */
        //                                                    }
        //                                                    //context.mov_contable.Add(movNuevo);
        //                                                }
        //                                                #endregion
        //                                                /*
        //                                                var buscarIVA = context.mov_contable.FirstOrDefault(x => x.id_encab == id_encabezado && x.cuenta == movNuevo.cuenta && x.idparametronombre == parametro.id_nombre_parametro);
        //                                                if (buscarIVA != null)
        //                                                {
        //                                                    buscarIVA.debito += movNuevo.debito;
        //                                                    buscarIVA.debitoniif += movNuevo.debitoniif;
        //                                                    buscarIVA.credito += movNuevo.credito;
        //                                                    buscarIVA.creditoniif += movNuevo.creditoniif;
        //                                                    context.Entry(buscarIVA).State = EntityState.Modified;
        //                                                }
        //                                                else
        //                                                {
        //                                                    var crearMovContable = new mov_contable();
        //                                                    crearMovContable.id_encab = encabezado.idencabezado;
        //                                                    crearMovContable.seq = secuencia;
        //                                                    crearMovContable.idparametronombre = parametro.id_nombre_parametro;
        //                                                    crearMovContable.cuenta = Convert.ToInt32(movNuevo.cuenta);
        //                                                    crearMovContable.centro = parametro.centro;
        //                                                    crearMovContable.nit = encabezado.nit;
        //                                                    crearMovContable.fec = DateTime.Now;
        //                                                    crearMovContable.debito = movNuevo.debito;
        //                                                    crearMovContable.debitoniif = movNuevo.debitoniif;
        //                                                    crearMovContable.basecontable = movNuevo.basecontable;
        //                                                    crearMovContable.credito = movNuevo.credito;
        //                                                    crearMovContable.creditoniif = movNuevo.creditoniif;
        //                                                    crearMovContable.fec_creacion = DateTime.Now;
        //                                                    crearMovContable.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    crearMovContable.detalle = "Facturacion de repuestos con consecutivo " + eg.numero;
        //                                                    crearMovContable.estado = true;
        //                                                    context.mov_contable.Add(crearMovContable);
        //                                                    context.SaveChanges();
        //                                                }
        //                                                */
        //                                            }
        //                                            #endregion

        //                                            #region Inventario				
        //                                            if (parametro.id_nombre_parametro == 9 || parametro.id_nombre_parametro == 20)
        //                                            {
        //                                                var perfilReferencia = context.icb_referencia.FirstOrDefault(x => x.ref_codigo == lineas.codigo);
        //                                                var perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
        //                                                var pcr = context.perfilcontable_referencia.FirstOrDefault(r => r.id == perfilBuscar);
        //                                                #region Tiene perfil la referencia
        //                                                if (pcr != null)
        //                                                {
        //                                                    var cuentaInven = pcr.cta_inventario;
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    */
        //                                                    #region tiene perfil y cuenta asignada al perfil
        //                                                    if (cuentaInven != null)
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = Convert.ToInt32(cuentaInven);
        //                                                        movNuevo.centro = parametro.centro;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == cuentaInven).FirstOrDefault();
        //                                                        /*if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(baseUnitario);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }
        //                                                        */
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(cr);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(cr);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                            creditosumaniff = Convert.ToDecimal(cr);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(cr);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(cr);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(cr);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                    #region tiene perfil pero no tiene cuenta asignada
        //                                                    else
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = parametro.cuenta;
        //                                                        movNuevo.centro = parametro.centro;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();
        //                                                        /*
        //                                                        if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }
        //                                                        */
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(cr);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(cr);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                            creditosumaniff = Convert.ToDecimal(cr);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(cr);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(cr);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(cr);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                }

        //                                                #endregion
        //                                                #region La referencia no tiene perfil
        //                                                else
        //                                                {
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    movNuevo.cuenta = parametro.cuenta;
        //                                                    movNuevo.centro = parametro.centro;
        //                                                    movNuevo.fec = DateTime.Now;
        //                                                    movNuevo.fec_creacion = DateTime.Now;
        //                                                    movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    */
        //                                                    /*if (info.aplicaniff==true)
        //                                                    {

        //                                                    }*/
        //                                                    /*
        //                                                    if (info.manejabase == true)
        //                                                    {
        //                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        movNuevo.basecontable = 0;
        //                                                    }

        //                                                    if (info.documeto == true)
        //                                                    {
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                    }
        //                                                    */

        //                                                    if (buscarCuenta.concepniff == 1)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(cr);
        //                                                        debitosuma = 0;
        //                                                        /*
        //                                                        movNuevo.credito = Convert.ToDecimal(cr);
        //                                                        movNuevo.debito = 0;
        //                                                        */
        //                                                        creditosumaniff = Convert.ToDecimal(cr);
        //                                                        debitosumaniff = 0;
        //                                                        /*
        //                                                        movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                        movNuevo.debitoniif = 0;
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 4)
        //                                                    {
        //                                                        creditosumaniff = Convert.ToDecimal(cr);
        //                                                        debitosumaniff = 0;
        //                                                        /*
        //                                                        movNuevo.creditoniif = Convert.ToDecimal(cr);
        //                                                        movNuevo.debitoniif = 0;
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 5)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(cr);
        //                                                        debitosuma = 0;
        //                                                        /*
        //                                                        movNuevo.credito = Convert.ToDecimal(cr);
        //                                                        movNuevo.debito = 0;
        //                                                        */
        //                                                    }
        //                                                    //context.mov_contable.Add(movNuevo);
        //                                                }
        //                                                #endregion
        //                                                /*
        //                                                var buscarInventario = context.mov_contable.FirstOrDefault(x => x.id_encab == id_encabezado && x.cuenta == movNuevo.cuenta && x.idparametronombre == parametro.id_nombre_parametro);
        //                                                if (buscarInventario != null)
        //                                                {
        //                                                    buscarInventario.basecontable += movNuevo.basecontable;
        //                                                    buscarInventario.debito += movNuevo.debito;
        //                                                    buscarInventario.debitoniif += movNuevo.debitoniif;
        //                                                    buscarInventario.credito += movNuevo.credito;
        //                                                    buscarInventario.creditoniif += movNuevo.creditoniif;
        //                                                    context.Entry(buscarInventario).State = EntityState.Modified;
        //                                                }
        //                                                else
        //                                                {
        //                                                    var crearMovContable = new mov_contable();
        //                                                    crearMovContable.id_encab = encabezado.idencabezado;
        //                                                    crearMovContable.seq = secuencia;
        //                                                    crearMovContable.idparametronombre = parametro.id_nombre_parametro;
        //                                                    crearMovContable.cuenta = Convert.ToInt32(movNuevo.cuenta);
        //                                                    crearMovContable.centro = parametro.centro;
        //                                                    crearMovContable.nit = encabezado.nit;
        //                                                    crearMovContable.fec = DateTime.Now;
        //                                                    crearMovContable.debito = movNuevo.debito;
        //                                                    crearMovContable.debitoniif = movNuevo.debitoniif;
        //                                                    crearMovContable.basecontable = movNuevo.basecontable;
        //                                                    crearMovContable.credito = movNuevo.credito;
        //                                                    crearMovContable.creditoniif = movNuevo.creditoniif;
        //                                                    crearMovContable.fec_creacion = DateTime.Now;
        //                                                    crearMovContable.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    crearMovContable.detalle = "Facturacion de repuestos con consecutivo " + eg.numero;
        //                                                    crearMovContable.estado = true;
        //                                                    context.mov_contable.Add(crearMovContable);
        //                                                    context.SaveChanges();
        //                                                }
        //                                                */
        //                                            }
        //                                            #endregion

        //                                            #region Ingreso	
        //                                            var siva = Request["tipo_tarifa_hidden_" + i] == "2";

        //                                            if (parametro.id_nombre_parametro == 11 && siva != true)
        //                                            {
        //                                                var perfilReferencia = context.icb_referencia.FirstOrDefault(x => x.ref_codigo == lineas.codigo);
        //                                                var perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
        //                                                var pcr = context.perfilcontable_referencia.FirstOrDefault(r => r.id == perfilBuscar);
        //                                                #region Tiene perfil la referencia
        //                                                if (pcr != null)
        //                                                {
        //                                                    var cuentaVenta = pcr.cuenta_ventas;
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    */
        //                                                    #region tiene perfil y cuenta asignada al perfil
        //                                                    if (cuentaVenta != null)
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
        //                                                        movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro; ;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */

        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == cuentaVenta).FirstOrDefault();
        //                                                        /*if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(baseUnitario);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }
        //                                                        */
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                            creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debitoniif = 0;*/
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                    #region tiene perfil pero no tiene cuenta asignada
        //                                                    else
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = parametro.cuenta;
        //                                                        movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro; ;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();
        //                                                        /*if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }*/
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                            creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                            debitosumaniff = 0;
        //                                                            /*
        //                                                            movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debitoniif = 0;
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                            debitosuma = 0;
        //                                                            /*
        //                                                            movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                            movNuevo.debito = 0;
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                }

        //                                                #endregion
        //                                                #region La referencia no tiene perfil
        //                                                else
        //                                                {
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    movNuevo.cuenta = parametro.cuenta;
        //                                                    movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro;
        //                                                    movNuevo.fec = DateTime.Now;
        //                                                    movNuevo.fec_creacion = DateTime.Now;
        //                                                    movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    */
        //                                                    /*if (info.aplicaniff==true)
        //                                                    {

        //                                                    }*/
        //                                                    /*
        //                                                    if (info.manejabase == true)
        //                                                    {
        //                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        movNuevo.basecontable = 0;
        //                                                    }

        //                                                    if (info.documeto == true)
        //                                                    {
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                    }*/

        //                                                    if (buscarCuenta.concepniff == 1)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                        debitosuma = 0;
        //                                                        /*
        //                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                        movNuevo.debito = 0;
        //                                                        */
        //                                                        creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                        debitosumaniff = 0;
        //                                                        /*
        //                                                        movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                        movNuevo.debitoniif = 0;
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 4)
        //                                                    {
        //                                                        creditosumaniff = Convert.ToDecimal(baseUnitario);
        //                                                        debitosumaniff = 0;
        //                                                        /*
        //                                                        movNuevo.creditoniif = Convert.ToDecimal(baseUnitario);
        //                                                        movNuevo.debitoniif = 0;
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 5)
        //                                                    {
        //                                                        creditosuma = Convert.ToDecimal(baseUnitario);
        //                                                        debitosuma = 0;
        //                                                        /*
        //                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario);
        //                                                        movNuevo.debito = 0;
        //                                                        */
        //                                                    }
        //                                                    //context.mov_contable.Add(movNuevo);
        //                                                }
        //                                                #endregion
        //                                                /*
        //                                                var buscarVenta = context.mov_contable.FirstOrDefault(x => x.id_encab == id_encabezado && x.cuenta == movNuevo.cuenta && x.idparametronombre == parametro.id_nombre_parametro);
        //                                                if (buscarVenta != null)
        //                                                {
        //                                                    buscarVenta.basecontable += movNuevo.basecontable;
        //                                                    buscarVenta.debito += movNuevo.debito;
        //                                                    buscarVenta.debitoniif += movNuevo.debitoniif;
        //                                                    buscarVenta.credito += movNuevo.credito;
        //                                                    buscarVenta.creditoniif += movNuevo.creditoniif;
        //                                                    context.Entry(buscarVenta).State = EntityState.Modified;
        //                                                }
        //                                                else
        //                                                {
        //                                                    var crearMovContable = new mov_contable();
        //                                                    crearMovContable.id_encab = encabezado.idencabezado;
        //                                                    crearMovContable.seq = secuencia;
        //                                                    crearMovContable.idparametronombre = parametro.id_nombre_parametro;
        //                                                    crearMovContable.cuenta = Convert.ToInt32(movNuevo.cuenta);
        //                                                    crearMovContable.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro;
        //                                                    crearMovContable.nit = encabezado.nit;
        //                                                    crearMovContable.fec = DateTime.Now;
        //                                                    crearMovContable.debito = movNuevo.debito;
        //                                                    crearMovContable.debitoniif = movNuevo.debitoniif;
        //                                                    crearMovContable.basecontable = movNuevo.basecontable;
        //                                                    crearMovContable.credito = movNuevo.credito;
        //                                                    crearMovContable.creditoniif = movNuevo.creditoniif;
        //                                                    crearMovContable.fec_creacion = DateTime.Now;
        //                                                    crearMovContable.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    crearMovContable.detalle = "Facturacion de repuestos con consecutivo " + eg.numero;
        //                                                    crearMovContable.estado = true;
        //                                                    context.mov_contable.Add(crearMovContable);
        //                                                    context.SaveChanges();
        //                                                }*/
        //                                            }
        //                                            #endregion

        //                                            #region Costo				
        //                                            if (parametro.id_nombre_parametro == 12)
        //                                            {
        //                                                var perfilReferencia = context.icb_referencia.FirstOrDefault(x => x.ref_codigo == lineas.codigo);
        //                                                var perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
        //                                                var pcr = context.perfilcontable_referencia.FirstOrDefault(r => r.id == perfilBuscar);
        //                                                #region Tiene perfil la referencia
        //                                                if (pcr != null)
        //                                                {
        //                                                    var cuentaCosto = pcr.cuenta_costo;
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    */
        //                                                    #region tiene perfil y cuenta asignada al perfil
        //                                                    if (cuentaCosto != null)
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
        //                                                        movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == cuentaCosto).FirstOrDefault();
        //                                                        /*if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }*/
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {

        //                                                            creditosuma = 0;
        //                                                            debitosuma = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.credito = 0;
        //                                                            movNuevo.debito = Convert.ToDecimal(cr);
        //                                                            */
        //                                                            creditosumaniff = 0;
        //                                                            debitosumaniff = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.creditoniif = 0;
        //                                                            movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = 0;
        //                                                            debitosumaniff = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.creditoniif = 0;
        //                                                            movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = 0;
        //                                                            debitosuma = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.credito = 0;
        //                                                            movNuevo.debito = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                    #region tiene perfil pero no tiene cuenta asignada
        //                                                    else
        //                                                    {
        //                                                        /*
        //                                                        movNuevo.cuenta = parametro.cuenta;
        //                                                        movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro; ;
        //                                                        movNuevo.fec = DateTime.Now;
        //                                                        movNuevo.fec_creacion = DateTime.Now;
        //                                                        movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        */
        //                                                        var infoReferencia = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();
        //                                                        /*if (infoReferencia.manejabase == true)
        //                                                        {
        //                                                            movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            movNuevo.basecontable = 0;
        //                                                        }

        //                                                        if (infoReferencia.documeto == true)
        //                                                        {
        //                                                            movNuevo.documento = Convert.ToString(eg.numero);
        //                                                        }*/
        //                                                        if (infoReferencia.concepniff == 1)
        //                                                        {
        //                                                            creditosuma = 0;
        //                                                            debitosuma = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.credito = 0;
        //                                                            movNuevo.debito = Convert.ToDecimal(cr);
        //                                                            */
        //                                                            creditosumaniff = 0;
        //                                                            debitosumaniff = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.creditoniif = 0;
        //                                                            movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 4)
        //                                                        {
        //                                                            creditosumaniff = 0;
        //                                                            debitosumaniff = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.creditoniif = 0;
        //                                                            movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }

        //                                                        if (infoReferencia.concepniff == 5)
        //                                                        {
        //                                                            creditosuma = 0;
        //                                                            debitosuma = Convert.ToDecimal(cr);
        //                                                            /*
        //                                                            movNuevo.credito = 0;
        //                                                            movNuevo.debito = Convert.ToDecimal(cr);
        //                                                            */
        //                                                        }
        //                                                        //context.mov_contable.Add(movNuevo);
        //                                                    }
        //                                                    #endregion
        //                                                }

        //                                                #endregion
        //                                                #region La referencia no tiene perfil
        //                                                else
        //                                                {
        //                                                    /*
        //                                                    movNuevo.id_encab = encabezado.idencabezado;
        //                                                    movNuevo.seq = secuencia;
        //                                                    movNuevo.idparametronombre = parametro.id_nombre_parametro;
        //                                                    movNuevo.cuenta = parametro.cuenta;
        //                                                    movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro;
        //                                                    movNuevo.fec = DateTime.Now;
        //                                                    movNuevo.fec_creacion = DateTime.Now;
        //                                                    movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    */
        //                                                    /*if (info.aplicaniff==true)
        //                                                    {

        //                                                    }*/
        //                                                    /*
        //                                                    if (info.manejabase == true)
        //                                                    {
        //                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca);
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        movNuevo.basecontable = 0;
        //                                                    }

        //                                                    if (info.documeto == true)
        //                                                    {
        //                                                        movNuevo.documento = Convert.ToString(eg.numero);
        //                                                    }*/

        //                                                    if (buscarCuenta.concepniff == 1)
        //                                                    {
        //                                                        creditosuma = 0;
        //                                                        debitosuma = Convert.ToDecimal(cr);
        //                                                        /*
        //                                                        movNuevo.credito = 0;
        //                                                        movNuevo.debito = Convert.ToDecimal(cr);
        //                                                        */
        //                                                        creditosumaniff = 0;
        //                                                        debitosumaniff = Convert.ToDecimal(cr);
        //                                                        /*
        //                                                        movNuevo.creditoniif = 0;
        //                                                        movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 4)
        //                                                    {
        //                                                        creditosumaniff = 0;
        //                                                        debitosumaniff = Convert.ToDecimal(cr);
        //                                                        /*
        //                                                        movNuevo.creditoniif = 0;
        //                                                        movNuevo.debitoniif = Convert.ToDecimal(cr);
        //                                                        */
        //                                                    }

        //                                                    if (buscarCuenta.concepniff == 5)
        //                                                    {
        //                                                        creditosuma = 0;
        //                                                        debitosuma = Convert.ToDecimal(cr);
        //                                                        /*
        //                                                        movNuevo.credito = 0;
        //                                                        movNuevo.debito = Convert.ToDecimal(cr);
        //                                                        */
        //                                                    }
        //                                                    //context.mov_contable.Add(movNuevo);
        //                                                }
        //                                                #endregion
        //                                                /*
        //                                                var buscarCosto = context.mov_contable.FirstOrDefault(x => x.id_encab == id_encabezado && x.cuenta == movNuevo.cuenta && x.idparametronombre == parametro.id_nombre_parametro);
        //                                                if (buscarCosto != null)
        //                                                {
        //                                                    buscarCosto.basecontable += movNuevo.basecontable;
        //                                                    buscarCosto.debito += movNuevo.debito;
        //                                                    buscarCosto.debitoniif += movNuevo.debitoniif;
        //                                                    buscarCosto.credito += movNuevo.credito;
        //                                                    buscarCosto.creditoniif += movNuevo.creditoniif;
        //                                                    context.Entry(buscarCosto).State = EntityState.Modified;
        //                                                }
        //                                                else
        //                                                {
        //                                                    var crearMovContable = new mov_contable();
        //                                                    crearMovContable.id_encab = encabezado.idencabezado;
        //                                                    crearMovContable.seq = secuencia;
        //                                                    crearMovContable.idparametronombre = parametro.id_nombre_parametro;
        //                                                    crearMovContable.cuenta = Convert.ToInt32(movNuevo.cuenta);
        //                                                    crearMovContable.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.centro : parametro.centro;
        //                                                    crearMovContable.nit = encabezado.nit;
        //                                                    crearMovContable.fec = DateTime.Now;
        //                                                    crearMovContable.debito = movNuevo.debito;
        //                                                    crearMovContable.debitoniif = movNuevo.debitoniif;
        //                                                    crearMovContable.basecontable = movNuevo.basecontable;
        //                                                    crearMovContable.credito = movNuevo.credito;
        //                                                    crearMovContable.creditoniif = movNuevo.creditoniif;
        //                                                    crearMovContable.fec_creacion = DateTime.Now;
        //                                                    crearMovContable.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
        //                                                    crearMovContable.detalle = "Facturacion de repuestos con consecutivo " + eg.numero;
        //                                                    crearMovContable.estado = true;
        //                                                    context.mov_contable.Add(crearMovContable);
        //                                                    context.SaveChanges();
        //                                                }
        //                                                */
        //                                            }
        //                                            #endregion

        //                                            secuencia++;
        //                                            //Cuentas valores
        //                                            #region Cuentas valores
        //                                            /*var buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x => x.centro == parametro.centro && x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit);
        //                                            if (buscar_cuentas_valores != null)
        //                                            {
        //                                                buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
        //                                                buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
        //                                                buscar_cuentas_valores.debitoniff += Math.Round(movNuevo.debitoniif);
        //                                                buscar_cuentas_valores.creditoniff += Math.Round(movNuevo.creditoniif);
        //                                                context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
        //                                                //context.SaveChanges();
        //                                            }
        //                                            else
        //                                            {
        //                                                var fechaHoy = DateTime.Now;
        //                                                var crearCuentaValor = new cuentas_valores();
        //                                                crearCuentaValor.ano = fechaHoy.Year;
        //                                                crearCuentaValor.mes = fechaHoy.Month;
        //                                                crearCuentaValor.cuenta = movNuevo.cuenta;
        //                                                crearCuentaValor.centro = Request["tipo_tarifa_hidden_" + i] == "2" ? parametro.id_nombre_parametro == 11 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : parametro.id_nombre_parametro == 12 ? Convert.ToInt32(Request["centro_costo_tf" + i]) : movNuevo.centro : movNuevo.centro; ;
        //                                                crearCuentaValor.nit = movNuevo.nit;
        //                                                crearCuentaValor.debito = Math.Round(movNuevo.debito);
        //                                                crearCuentaValor.credito = Math.Round(movNuevo.credito);
        //                                                crearCuentaValor.debitoniff = Math.Round(movNuevo.debitoniif);
        //                                                crearCuentaValor.creditoniff = Math.Round(movNuevo.creditoniif);
        //                                                context.cuentas_valores.Add(crearCuentaValor);
        //                                                context.SaveChanges();
        //                                            }*/
        //                                            #endregion

        //                                            totalCreditos += Math.Round(creditosuma);
        //                                            totalDebitos += Math.Round(debitosuma);
        //                                            /*
        //                                            totalCreditos += Math.Round(movNuevo.credito);
        //                                            totalDebitos += Math.Round(movNuevo.debito);
        //                                            */
        //                                            listaDescuadrados.Add(new DocumentoDescuadradoModel()
        //                                            {
        //                                                NumeroCuenta = "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
        //                                                DescripcionParametro = descripcionParametro,
        //                                                ValorDebito = debitosuma,
        //                                                ValorCredito = creditosuma
        //                                            });
        //                                            /*
        //                                            listaDescuadrados.Add(new DocumentoDescuadradoModel()
        //                                            {
        //                                                NumeroCuenta = "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
        //                                                DescripcionParametro = descripcionParametro,
        //                                                ValorDebito = movNuevo.debito,
        //                                                ValorCredito = movNuevo.credito
        //                                            });
        //                                            */
        //                                        }
        //                                    }
        //                                }
        //                                #endregion
        //                            }
        //                        }

        //                        #region validaciones para guardar
        //                        if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
        //                        {
        //                            TempData["documento_descuadrado"] = "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

        //                            ViewBag.documentoSeleccionado = encabezado.tipo;
        //                            ViewBag.bodegaSeleccionado = encabezado.bodega;
        //                            ViewBag.perfilSeleccionado = encabezado.perfilcontable;

        //                            ViewBag.documentoDescuadrado = listaDescuadrados;
        //                            ViewBag.calculoDebito = totalDebitos;
        //                            ViewBag.calculoCredito = totalCreditos;

        //                            dbTran.Rollback();
        //                            listas();
        //                            BuscarFavoritos(menu);
        //                            return View(modelo);
        //                            //return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
        //                        }
        //                        else
        //                        {
        //                            funciono = 1;
        //                        }
        //                        #endregion
        //                        if (funciono > 0)
        //                        {
        //                            context.SaveChanges();
        //                            dbTran.Commit();
        //                            TempData["mensaje"] = "Registro creado correctamente";
        //                            DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
        //                            doc.ActualizarConsecutivo(grupo.grupo, consecutivo);

        //                            return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
        //                        }
        //                    }
        //                    else
        //                    {
        //                        TempData["mensaje_error"] = "no hay consecutivo";
        //                    }
        //                }
        //                //cierre
        //                else
        //                {
        //                    TempData["mensaje_error"] = "Lista vacia";
        //                }
        //            }
        //            catch (DbEntityValidationException ex)
        //            {
        //                dbTran.Rollback();
        //                throw;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        TempData["mensaje_error"] = "No fue posible guardar el registro, por favor valide";
        //        var errors = ModelState.Select(x => x.Value.Errors)
        //                               .Where(y => y.Count > 0)
        //                               .ToList();
        //    }

        //    listas();
        //    BuscarFavoritos(menu);
        //    return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
        //}

        public ActionResult BusquedaDevoluciones(int? menu)
        {
            if (Session["user_usuarioid"] != null)
            {
                var bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado)
                    .Select(d => new { d.id, nombre = d.bodccs_cod + "-" + d.bodccs_nombre }).ToList();
                int rol = Convert.ToInt32(Session["user_rolid"]);
                int usuario = Convert.ToInt32(Session["user_usuarioid"]);
                icb_sysparameter admin1 = context.icb_sysparameter.Where(d => d.syspar_cod == "P109").FirstOrDefault();
                int admin = admin1 != null ? Convert.ToInt32(admin1.syspar_value) : 1;
                if (rol != admin)
                {
                    //bodegasusuario
                    List<int> bode = context.bodega_usuario.Where(d => d.id_usuario == usuario).Select(d => d.id_bodega)
                        .ToList();
                    bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado && bode.Contains(d.id))
                        .Select(d => new { d.id, nombre = d.bodccs_cod + "-" + d.bodccs_nombre }).ToList();
                }

                DateTime fecha = DateTime.Now;
                DateTime fechainicio = fecha.AddDays(-30);
                ViewBag.fechadesde = fechainicio.ToString("yyyy/MM/dd", new CultureInfo("en-US"));
                ViewBag.fechahasta = fecha.ToString("yyyy/MM/dd", new CultureInfo("en-US"));
                ViewBag.bodega = new MultiSelectList(bodegas, "id", "nombre");
                BuscarFavoritos(menu);
                return View();
            }

            return RedirectToAction("Login", "Login");
        }

        public ActionResult BusquedaFacturas(int? menu)
        {
            if (Session["user_usuarioid"] != null)
            {
                var bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado)
                    .Select(d => new { d.id, nombre = d.bodccs_cod + "-" + d.bodccs_nombre }).ToList();
                int rol = Convert.ToInt32(Session["user_rolid"]);
                int usuario = Convert.ToInt32(Session["user_usuarioid"]);
                icb_sysparameter admin1 = context.icb_sysparameter.Where(d => d.syspar_cod == "P109").FirstOrDefault();
                int admin = admin1 != null ? Convert.ToInt32(admin1.syspar_value) : 1;
                if (rol != admin)
                {
                    //bodegasusuario
                    List<int> bode = context.bodega_usuario.Where(d => d.id_usuario == usuario).Select(d => d.id_bodega)
                        .ToList();
                    bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado && bode.Contains(d.id))
                        .Select(d => new { d.id, nombre = d.bodccs_cod + "-" + d.bodccs_nombre }).ToList();
                }

                DateTime fecha = DateTime.Now;
                DateTime fechainicio = fecha.AddDays(-30);
                ViewBag.fechadesde = fechainicio.ToString("yyyy/MM/dd", new CultureInfo("en-US"));
                ViewBag.fechahasta = fecha.ToString("yyyy/MM/dd", new CultureInfo("en-US"));
                ViewBag.bodega = new MultiSelectList(bodegas, "id", "nombre");
                BuscarFavoritos(menu);
                return View();
            }

            return RedirectToAction("Login", "Login");
        }

        [HttpGet]
        public ActionResult ConfirmarFactura(int? menu, int? id)
        {
            if (Session["user_usuarioid"] != null)
            {
                //valido si se está enviando el id
                if (id != null)
                {
                    //busco el documento
                    encab_documento encab = context.encab_documento.Where(d => d.idencabezado == id && d.prefactura)
                        .FirstOrDefault();
                    if (encab != null)
                    {
                        NotasContablesModel modelo = new NotasContablesModel
                        {
                            idencabezado = encab.idencabezado,
                            perfilcontable = encab.perfilcontable,
                            tipo = encab.tipo,
                            numero = encab.numero,
                            nit = encab.nit,
                            fecha = encab.fecha,
                            fpago_id = encab.fpago_id,
                            vencimiento = encab.vencimiento,
                            valor_total = encab.valor_total.ToString("N0", new CultureInfo("is-IS")),
                            iva = encab.iva.ToString("N0", new CultureInfo("is-IS")),
                            por_retencion = encab.porcen_retencion.ToString("N0", new CultureInfo("is-IS")),
                            retencion = encab.retencion.ToString("N0", new CultureInfo("is-IS")),
                            por_retencion_iva = encab.porcen_reteiva.ToString("N0", new CultureInfo("is-IS")),
                            retencion_iva = encab.retencion_iva.ToString("N0", new CultureInfo("is-IS")),
                            retencion_causada = encab.retencion_causada.ToString("N0", new CultureInfo("is-IS")),
                            pedido = encab.pedido != null ? encab.pedido.Value : 0,
                            moneda = encab.moneda,
                            tasa = encab.tasa,
                            fletes = encab.fletes.ToString("N0", new CultureInfo("is-IS")),
                            iva_fletes = encab.iva_fletes.ToString("N0", new CultureInfo("is-IS")),
                            vendedor = encab.vendedor,
                            concepto = encab.concepto,
                            concepto2 = encab.concepto2,
                            nota1 = encab.nota1,
                            bodega = encab.bodega
                        };
                        listas2(modelo);
                        BuscarFavoritos(menu);
                        return View(modelo);
                    }

                    TempData["mensaje_error"] = "El id ingresado no corresponde a una prefactura";
                    return RedirectToAction("BusquedaFacturas", "FacturacionRepuestos");
                }

                TempData["mensaje_error"] = "Debe ingresar un id de prefactura válido";
                return RedirectToAction("BusquedaFacturas", "FacturacionRepuestos");
            }

            TempData["mensaje_error"] = "La sesión ha expirado";
            return RedirectToAction("Login", "Login");
        }

        public JsonResult filtrofacturas(string filtroGeneral, int[] bodega, string fechadesde, string fechahasta)
        {
            //parametros de sistema de tipo de factura repuestos
            icb_sysparameter estao1 = context.icb_sysparameter.Where(d => d.syspar_value == "P127").FirstOrDefault();
            int estadotermi = estao1 != null ? Convert.ToInt32(estao1.syspar_value) : 4;

            if (Session["user_usuarioid"] != null)
            {
                string draw = Request.Form.GetValues("draw").FirstOrDefault();
                string start = Request.Form.GetValues("start").FirstOrDefault();
                string length = Request.Form.GetValues("length").FirstOrDefault();
                string search = Request.Form.GetValues("search[value]").FirstOrDefault();
                //esto me sirve para reiniciar la consulta cuando ordeno las columnas de menor a mayor y que no me vuelva a recalcular todo
                //ES IMPORTANTE QUE LA COLUMNA EN EL DATATABLE TENGA EL NOMBRE DE LA TABLA O VISTA A CONSULTAR, porque vamos a usarla para ordenar.
                string sortColumn = Request.Form
                    .GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]")
                    .FirstOrDefault();
                string sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
                search = search.Replace(" ", "");
                int pagina = Convert.ToInt32(start);
                int pageSize = Convert.ToInt32(length);

                int skip = 0;
                if (pagina == 0)
                {
                    skip = 0;
                }
                else
                {
                    skip = pagina;
                }

                CultureInfo elGR = CultureInfo.CreateSpecificCulture("is-IS");

                int idusuario = Convert.ToInt32(Session["user_usuarioid"]);
                //busco el usuario
                users usuario = context.users.Where(d => d.user_id == idusuario).FirstOrDefault();
                int rol = Convert.ToInt32(Session["user_rolid"]);

                //por si necesito el rol del usuario

                icb_sysparameter admin1 = context.icb_sysparameter.Where(d => d.syspar_cod == "P109").FirstOrDefault();
                int admin = admin1 != null ? Convert.ToInt32(admin1.syspar_value) : 1;

                Expression<Func<vw_prefacturas, bool>> predicado = PredicateBuilder.True<vw_prefacturas>();
                Expression<Func<vw_prefacturas, bool>> predicado2 = PredicateBuilder.False<vw_prefacturas>();
                Expression<Func<vw_prefacturas, bool>> predicado3 = PredicateBuilder.False<vw_prefacturas>();
                if (bodega.Count() > 0 && bodega[0] != 0)
                {
                    foreach (int item in bodega)
                    {
                        predicado2 = predicado2.Or(d => d.bodega_id == item);
                    }

                    predicado = predicado.And(predicado2);
                }
                else
                {
                    if (rol != admin)
                    {
                        //bodegasusuario
                        List<int> bode = context.bodega_usuario.Where(d => d.id_usuario == idusuario).Select(d => d.id_bodega)
                            .ToList();
                        var bodegas = context.bodega_concesionario.Where(d => d.bodccs_estado && bode.Contains(d.id))
                            .Select(d => new { d.id, nombre = d.bodccs_cod + "-" + d.bodccs_nombre }).ToList();
                        foreach (var item in bodegas)
                        {
                            predicado2 = predicado2.Or(d => d.bodega_id == item.id);
                        }

                        predicado = predicado.And(predicado2);
                    }
                }

                if (!string.IsNullOrWhiteSpace(fechadesde))
                {
                    DateTime fechax = DateTime.Now;
                    bool convertir = DateTime.TryParse(fechadesde, out fechax);
                    if (convertir)
                    {
                        predicado = predicado.And(d => d.fecha >= fechax);
                    }
                }

                if (!string.IsNullOrWhiteSpace(fechahasta))
                {
                    DateTime fechax2 = DateTime.Now;
                    bool convertir = DateTime.TryParse(fechahasta, out fechax2);
                    if (convertir)
                    {
                        fechax2 = fechax2.AddDays(1);
                        predicado = predicado.And(d => d.fecha <= fechax2);
                    }
                }

                if (!string.IsNullOrEmpty(filtroGeneral))
                {
                    predicado3 = predicado3.Or(d => 1 == 1 && d.tipoDocumento.ToString().Contains(filtroGeneral));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.numero2.ToUpper().Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.tipo2.ToUpper().Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.bodccs_nombre.Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.fecha2.Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.valor_total2.Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d =>
                        1 == 1 && d.idencabezado2.ToUpper().Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d =>
                        1 == 1 && d.doc_tercero.ToUpper().Contains(filtroGeneral.ToUpper()));
                    predicado3 = predicado3.Or(d => 1 == 1 && d.tercero.ToUpper().Contains(filtroGeneral.ToUpper()));
                    predicado = predicado.And(predicado3);
                }

                int registrostotales = context.vw_prefacturas.Where(predicado).Count();
                //si el ordenamiento es ascendente o descendente es distinto
                if (pageSize == -1)
                {
                    pageSize = registrostotales;
                }

                if (sortColumnDir == "asc")
                {
                    List<vw_prefacturas> query2 = context.vw_prefacturas.Where(predicado).OrderBy(GetColumnName(sortColumn).Compile())
                        .Skip(skip).Take(pageSize).ToList();
                    var query = query2.Select(d => new
                    {
                        d.tipoDocumento,
                        d.numero2,
                        d.fecha2,
                        d.valor_total2,
                        d.bodccs_nombre,
                        d.doc_tercero,
                        d.tercero,
                        d.idencabezado
                    }).ToList();
                    int contador = query.Count();
                    return Json(
                        new { draw, recordsFiltered = registrostotales, recordsTotal = registrostotales, data = query },
                        JsonRequestBehavior.AllowGet);
                }
                else
                {
                    List<vw_prefacturas> query2 = context.vw_prefacturas.Where(predicado)
                        .OrderByDescending(GetColumnName(sortColumn).Compile()).Skip(skip).Take(pageSize).ToList();
                    var query = query2.Select(d => new
                    {
                        d.tipoDocumento,
                        d.numero2,
                        d.fecha2,
                        d.valor_total2,
                        d.bodccs_nombre,
                        d.doc_tercero,
                        d.tercero,
                        d.idencabezado
                    }).ToList();
                    int contador = query.Count();
                    return Json(
                        new { draw, recordsFiltered = registrostotales, recordsTotal = registrostotales, data = query },
                        JsonRequestBehavior.AllowGet);
                }
            }

            return Json(0);
        }

        public JsonResult buscarPrecios(string[] datos)
        {
            if (datos != null)
            {
                List<precios> precio = new List<precios>();

                for (int i = 0; i < datos.Count(); i++)
                {
                    string ref_codigo = datos[i];
                    var buscar = context.detalleArchListaPrecios.OrderByDescending(x => x.idArch)
                        .Where(x => x.referencia == ref_codigo).Select(x => new
                        {
                            x.referencia,
                            x.precio,
                            x.costo
                        }).FirstOrDefault();

                    if (buscar == null)
                    {
                        vw_promedio costoReferencia = context.vw_promedio.FirstOrDefault(x =>
                            x.codigo == ref_codigo && x.ano == DateTime.Now.Year && x.mes == DateTime.Now.Month);
                        rprecios rprecio = context.rprecios.Where(x => x.codigo == ref_codigo).FirstOrDefault();
                        decimal? costo = costoReferencia != null ? costoReferencia.Promedio : 0;
                        string referencia = costoReferencia != null ? costoReferencia.codigo : "";
                        decimal precio_ref = rprecio != null ? rprecio.precio1 : 0;

                        precio.Add(new precios
                        {
                            referencia = referencia,
                            precio = precio_ref,
                            costo = costo
                        });
                    }

                    if (buscar != null)
                    {
                        precio.Add(new precios
                        {
                            referencia = buscar.referencia,
                            precio = buscar.precio,
                            costo = buscar.costo
                        });
                    }
                }

                return Json(precio, JsonRequestBehavior.AllowGet);
            }

            return Json(-1, JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public ActionResult Facturar(NotasContablesModel modelo, int? menu)
        {
            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;


                        int documentointerno = 0;
                        grupoconsecutivos grupo2 = new grupoconsecutivos();
                        long consecutivo2 = 0;

                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == modelo.perfilcontable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();

                        int secuencia = 1;
                        //decimal totalDebitos = 0;
                        //decimal totalCreditos = 0;

                        List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                        centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                        int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;
                        decimal ivatotal = Convert.ToDecimal(Request["valorIVA"], Cultureinfo);
                        int bodega = Convert.ToInt32(Request["selectBodegas"]);
                        List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();
                        decimal valorTotal = Convert.ToDecimal(Request["valorFinal"], Cultureinfo);
                        int costoLineas = Convert.ToInt32(Request["lista_referencias"]);
                        decimal totalmargen = 0, margen = 0;
                        for (int i = 0; i <= costoLineas; i++)
                        {
                            if (!string.IsNullOrEmpty(Request["referencia" + i]))
                            {
                                int anio = DateTime.Now.Year;
                                int mes = DateTime.Now.Month;

                                string referencia = Request["referencia" + i];
                                vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                decimal? costoReferencia = vwPromedio.Promedio;

                                costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                      Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                //Calular el margen de utilidad
                                int cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]);
                                decimal valiva = Convert.ToDecimal(Request["ivaTotalReferencia" + i], Cultureinfo);
                                decimal valorT = Convert.ToDecimal(Request["valorTotalReferencia" + i], Cultureinfo);
                                CsCalcularMargenUtilidad calcularmargen = new CsCalcularMargenUtilidad();
                                margen = calcularmargen.MargenUtilidad(bodega, referencia, cantidad, valorT, valiva);
                                totalmargen = totalmargen + margen;

                            }
                        }

                        string lista = Request["lista_referencias"];
                        if (!string.IsNullOrEmpty(lista))
                        {
                            int datos = Convert.ToInt32(lista);
                            decimal costoTotal =
                                Convert.ToDecimal(Request["valor_proveedor"], Cultureinfo); //costo con retenciones y fletes
                            decimal ivaEncabezado = Convert.ToDecimal(Request["valorIVA"], Cultureinfo); //valor total del iva
                            decimal descuentoEncabezado =
                                Convert.ToDecimal(Request["valorDes"], Cultureinfo); //valor total del descuento
                            decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos

                            decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                            //consecutivo
                            grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                x.documento_id == modelo.tipo && x.bodega_id == bodega);
                            if (grupo != null)
                            {
                                DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
                                long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                //Encabezado documento

                                #region encabezado

                                encab_documento encabezado = new encab_documento
                                {
                                    tipo = modelo.tipo,
                                    numero = consecutivo,
                                    nit = modelo.nit,
                                    fecha = DateTime.Now,
                                    estado_factura = 1,
                                };
                                int? condicion = modelo.fpago_id;
                                encabezado.fpago_id = condicion;
                                //encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                DateTime vencimiento = DateTime.Now.AddDays(dias);
                                encabezado.prefactura = false;
                                encabezado.vencimiento = vencimiento;
                                encabezado.valor_total = costoTotal;
                                encabezado.iva = ivaEncabezado;
                                encabezado.margen_utilidad = totalmargen;
                                // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                #region calculo de retenciones

                                tp_doc_registros buscarTipoDocRegistro =
                                   context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
                                icb_terceros buscarProveedor =
                                    context.icb_terceros.FirstOrDefault(x => x.tercero_id == modelo.nit);
                                int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id ?? 0 : 0;
                                perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                    x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                    x.tipo_regimenid == regimen_proveedor);

                                decimal retenciones = 0;

                                if (buscarPerfilTributario != null)
                                {
                                    if (buscarPerfilTributario.retfuente == "A" &&
                                        valor_totalenca >= (buscarPerfilTributario.baseretfuente ?? 0))
                                    {
                                        encabezado.porcen_retencion = buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0;
                                        encabezado.retencion =
                                            Math.Round(valor_totalenca *
                                                       Convert.ToDecimal((buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0) / 100, Cultureinfo));
                                        retenciones += encabezado.retencion;
                                    }

                                    if (buscarPerfilTributario.retiva == "A" &&
                                        ivaEncabezado >= (buscarPerfilTributario.baseretiva ?? 0))
                                    {
                                        encabezado.porcen_reteiva = buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0;
                                        encabezado.retencion_iva =
                                            Math.Round(encabezado.iva *
                                                       Convert.ToDecimal((buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0) / 100, Cultureinfo));
                                        retenciones += encabezado.retencion_iva;
                                    }

                                    if (buscarPerfilTributario.autorretencion == "A")
                                    {
                                        decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                        encabezado.porcen_autorretencion = (float)tercero_acteco;
                                        encabezado.retencion_causada =
                                            Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                        retenciones += encabezado.retencion_causada;
                                    }

                                    if (buscarPerfilTributario.retica == "A" &&
                                        valor_totalenca >= (buscarPerfilTributario.baseretica ?? 0))
                                    {
                                        terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                            x.idcodica == buscarProveedor.id_acteco && x.bodega == bodega);
                                        decimal tercero_acteco = buscarProveedor.id_acteco != null ? buscarProveedor.acteco_tercero.tarifa : 0;
                                        if (bodega_acteco != null)
                                        {
                                            encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }

                                        if (tercero_acteco != 0)
                                        {
                                            encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(
                                                               buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }
                                        else
                                        {
                                            encabezado.porcen_retica = (float)(buscarPerfilTributario.pretica ?? 0);
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }
                                    }
                                }

                                #endregion

                                if (modelo.fletes != null)
                                {
                                    encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                    encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                }

                                encabezado.costo = costoPromedioTotal;
                                encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
                                string pedido = Request["pedido"];
                                if (!string.IsNullOrEmpty(pedido))
                                {
                                    encabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                }

                                encabezado.bodega = bodega;
                                encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                if (Request["tasa"] != "")
                                {
                                    encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                }

                                encabezado.valor_mercancia = valor_totalenca;
                                encabezado.fec_creacion = DateTime.Now;
                                encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                encabezado.estado = true;
                                encabezado.concepto = modelo.concepto;
                                encabezado.concepto2 = modelo.concepto2;

                                context.encab_documento.Add(encabezado);
                                context.SaveChanges();

                                //veo si el documento externo tiene documento interno asociado
                                tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == modelo.tipo).FirstOrDefault();
                                //guardado de documento interno
                                if (doc_interno.doc_interno_asociado != null)
                                {
                                    //se consulta consecutivo de documento interno
                                    grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == bodega);
                                    if (grupo2 != null)
                                    {
                                        consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                        //calculo y guardo el encabezado del movimiento interno
                                        encab_documento encabezado2 = new encab_documento
                                        {
                                            tipo = doc_interno.doc_interno_asociado.Value,
                                            numero = consecutivo2,
                                            nit = encabezado.nit,
                                            fecha = DateTime.Now,
                                            fpago_id = encabezado.fpago_id,
                                            vencimiento = encabezado.vencimiento,
                                            valor_total = encabezado.valor_total,
                                            iva = encabezado.iva,
                                            porcen_retencion = encabezado.porcen_retencion,
                                            retencion = encabezado.retencion,
                                            porcen_reteiva = encabezado.porcen_reteiva,
                                            retencion_iva = encabezado.retencion_iva,
                                            porcen_retica = encabezado.porcen_retica,
                                            retencion_ica = encabezado.retencion_ica,
                                            fletes = encabezado.fletes,
                                            iva_fletes = encabezado.iva_fletes,
                                            costo = encabezado.costo,
                                            vendedor = encabezado.vendedor,
                                            documento = encabezado.documento,
                                            remision = encabezado.remision,
                                            bodega = encabezado.bodega,
                                            concepto = encabezado.concepto,
                                            moneda = encabezado.moneda,
                                            perfilcontable = encabezado.perfilcontable,
                                            valor_mercancia = encabezado.valor_mercancia,
                                            fec_creacion = encabezado.fec_creacion,
                                            userid_creacion = encabezado.userid_creacion,
                                            estado = true,
                                            concepto2 = encabezado.concepto2,
                                            id_movimiento_interno = encabezado.idencabezado,
                                        };
                                        context.encab_documento.Add(encabezado2);
                                        context.SaveChanges();
                                        documentointerno = encabezado2.idencabezado;
                                    }
                                }
                                #endregion

                                int id_encabezado = context.encab_documento.OrderByDescending(x => x.idencabezado)
                                    .FirstOrDefault().idencabezado;

                                encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);

                                //Mov Contable

                                #region movimientos contables

                                //buscamos en perfil cuenta documento, por medio del perfil seleccionado

                                foreach (var parametro in parametrosCuentasVerificar)
                                {
                                    string descripcionParametro = context.paramcontablenombres
                                        .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                        .descripcion_parametro;
                                    cuenta_puc buscarCuenta =
                                        context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                    if (buscarCuenta != null)
                                    {
                                        if (parametro.id_nombre_parametro == 10 &&
                                            Convert.ToDecimal(valor_totalenca, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 3 &&
                                            Convert.ToDecimal(eg.retencion, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 4 &&
                                            Convert.ToDecimal(eg.retencion_iva, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 5 &&
                                            Convert.ToDecimal(eg.retencion_ica, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 6 && Convert.ToDecimal(eg.fletes, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 14 &&
                                            Convert.ToDecimal(eg.iva_fletes, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 17 &&
                                            Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 18 &&
                                            Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0)
                                        {
                                            mov_contable movNuevo = new mov_contable
                                            {
                                                id_encab = eg.idencabezado,
                                                seq = secuencia,
                                                idparametronombre = parametro.id_nombre_parametro,
                                                cuenta = parametro.cuenta,
                                                centro = parametro.centro,
                                                fec = DateTime.Now,
                                                fec_creacion = DateTime.Now,
                                                userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                documento = Convert.ToString(modelo.pedido),
                                                detalle = "Facturacion de repuestos con consecutivo " + eg.numero,
                                                estado = true
                                            };

                                            cuenta_puc info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta)
                                                .FirstOrDefault();

                                            if (info.tercero)
                                            {
                                                movNuevo.nit = modelo.nit;
                                            }
                                            else
                                            {
                                                icb_terceros tercero = context.icb_terceros.Where(t => t.doc_tercero == "0")
                                                    .FirstOrDefault();
                                                movNuevo.nit = tercero.tercero_id;
                                            }

                                            // las siguientes validaciones se hacen dependiendo de la cuenta que esta moviendo la compra manual, para guardar la informacion acorde

                                            #region Cuentas X Cobrar

                                            if (parametro.id_nombre_parametro == 10)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = Convert.ToString(modelo.pedido);
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }
                                            }

                                            #endregion

                                            #region Retencion

                                            if (parametro.id_nombre_parametro == 3)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion;
                                                }
                                            }

                                            #endregion

                                            #region ReteIVA

                                            if (parametro.id_nombre_parametro == 4)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(ivaEncabezado, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_iva;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_iva;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_iva;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_iva;
                                                }
                                            }

                                            #endregion

                                            #region ReteICA

                                            if (parametro.id_nombre_parametro == 5)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_ica;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_ica;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_ica;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_ica;
                                                }
                                            }

                                            #endregion

                                            #region Fletes

                                            if (parametro.id_nombre_parametro == 6)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.fletes;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.fletes;
                                                    ;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.fletes;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            #region IVA fletes

                                            if (parametro.id_nombre_parametro == 14)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.iva_fletes;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.iva_fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.iva_fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.iva_fletes;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            #region AutoRetencion Debito

                                            if (parametro.id_nombre_parametro == 17)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_causada;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_causada;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_causada;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_causada;
                                                }
                                            }

                                            #endregion

                                            #region AutoRetencion Credito

                                            if (parametro.id_nombre_parametro == 18)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.retencion_causada;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.retencion_causada;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.retencion_causada;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.retencion_causada;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            context.mov_contable.Add(movNuevo);
                                            //context.SaveChanges();

                                            secuencia++;
                                            //Cuentas valores

                                            #region Cuentas valores

                                            cuentas_valores buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x =>
                                                x.centro == parametro.centro && x.cuenta == parametro.cuenta &&
                                                x.nit == movNuevo.nit);
                                            if (buscar_cuentas_valores != null)
                                            {
                                                buscar_cuentas_valores.debito += movNuevo.debito;
                                                buscar_cuentas_valores.credito += movNuevo.credito;
                                                buscar_cuentas_valores.debitoniff += movNuevo.debitoniif;
                                                buscar_cuentas_valores.creditoniff += movNuevo.creditoniif;
                                                context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
                                            }
                                            else
                                            {
                                                DateTime fechaHoy = DateTime.Now;
                                                cuentas_valores crearCuentaValor = new cuentas_valores
                                                {
                                                    ano = fechaHoy.Year,
                                                    mes = fechaHoy.Month,
                                                    cuenta = movNuevo.cuenta,
                                                    centro = movNuevo.centro,
                                                    nit = movNuevo.nit,
                                                    debito = movNuevo.debito,
                                                    credito = movNuevo.credito,
                                                    debitoniff = movNuevo.debitoniif,
                                                    creditoniff = movNuevo.creditoniif
                                                };
                                                context.cuentas_valores.Add(crearCuentaValor);
                                                //context.SaveChanges();
                                            }

                                            #endregion

                                            totalCreditos += movNuevo.credito;
                                            totalDebitos += movNuevo.debito;
                                            listaDescuadrados.Add(new DocumentoDescuadradoModel
                                            {
                                                NumeroCuenta =
                                                    "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
                                                DescripcionParametro = descripcionParametro,
                                                ValorDebito = movNuevo.debito,
                                                ValorCredito = movNuevo.credito
                                            });
                                        }
                                    }
                                }

                                #endregion

                                //Documentos a cruzar

                                #region Documentos a cruzar

                                string listaAnticipo = Request["listaAnticipo"];
                                List<int> ids = new List<int>();
                                List<int> idEncabAnticipos = new List<int>();
                                if (!string.IsNullOrEmpty(listaAnticipo))
                                {
                                    int la = Convert.ToInt32(listaAnticipo);
                                    for (int i = 1; i <= la; i++)
                                    {
                                        int encabAnti = Convert.ToInt32(Request["encabAnticipo" + i]);
                                        if (encabAnti != 0)
                                        {
                                            encab_documento encabezadoAnticipo =
                                                context.encab_documento.FirstOrDefault(x =>
                                                    x.idencabezado == encabAnti);

                                            documentosacruzar dac = new documentosacruzar
                                            {
                                                idencabrecibo = encabAnti,
                                                valorrecibo = encabezadoAnticipo.valor_total,
                                                idencabfactura = id_encabezado,
                                                valorfactura = eg.valor_total,
                                                saldo = encabezadoAnticipo.valor_total - eg.valor_total
                                            };

                                            context.documentosacruzar.Add(dac);
                                            int rasult = context.SaveChanges();
                                            ids.Add(dac.id);
                                            idEncabAnticipos.Add(encabAnti);
                                        }
                                    }
                                }

                                #endregion

                                #region cruce documentos

                                for (int q = 0; q < idEncabAnticipos.Count; q++)
                                {
                                    //id del anticipo en la tabla documentos a cruzar
                                    int idDocACruzar = ids[q];
                                    //id del anticipo
                                    int idEncabAnticipo = idEncabAnticipos[q];
                                    //Anticipo a cruzar
                                    encab_documento anticipo = context.encab_documento.Where(x => x.idencabezado == idEncabAnticipo)
                                        .FirstOrDefault();
                                    //Factura a cruzar
                                    encab_documento factura = context.encab_documento
                                        .Where(x => x.idencabezado == encabezado.idencabezado).FirstOrDefault();
                                    documentosacruzar docAcruzar = context.documentosacruzar.Where(x => x.id == idDocACruzar)
                                        .FirstOrDefault();
                                    decimal valorAplicar = factura.valor_total - factura.valor_aplicado -
                                                       (anticipo.valor_total - anticipo.valor_aplicado);
                                    if (valorAplicar < 0)
                                    {
                                        decimal RestanteAnticipo =
                                            anticipo.valor_total - anticipo.valor_aplicado -
                                            (factura.valor_total - factura.valor_aplicado);
                                        decimal valorAnticipo =
                                            anticipo.valor_total - anticipo.valor_aplicado - RestanteAnticipo;
                                        anticipo.valor_aplicado = anticipo.valor_aplicado + valorAnticipo;
                                        context.Entry(anticipo).State = EntityState.Modified;
                                        decimal nuevovalorF = factura.valor_aplicado + valorAnticipo;
                                        factura.valor_aplicado = nuevovalorF;
                                        context.Entry(factura).State = EntityState.Modified;
                                    }
                                    else
                                    {
                                        int valoraplicado = Convert.ToInt32(factura.valor_aplicado);
                                        decimal nuevovalor =
                                            Convert.ToDecimal(valoraplicado, Cultureinfo) +
                                            (anticipo.valor_total - anticipo.valor_aplicado);
                                        factura.valor_aplicado = nuevovalor;
                                        context.Entry(factura).State = EntityState.Modified;
                                        anticipo.valor_aplicado = anticipo.valor_total;
                                        context.Entry(anticipo).State = EntityState.Modified;
                                    }

                                    docAcruzar.cruzado = true;
                                    context.Entry(docAcruzar).State = EntityState.Modified;
                                    context.SaveChanges();
                                    cruce_documentos cd = new cruce_documentos
                                    {
                                        idtipo = anticipo.tipo,
                                        numero = anticipo.numero,
                                        id_encab_aplica = factura.idencabezado,
                                        id_encabezado = anticipo.idencabezado,
                                        //tipo de la factura cruzada
                                        idtipoaplica = factura.tipo,
                                        //numero de la factura cruzada
                                        numeroaplica = factura.numero,
                                        //valor aplicado a cada factura
                                        valor = anticipo.valor_total,
                                        fecha = DateTime.Now,
                                        fechacruce = DateTime.Now,
                                        userid_creacion = Convert.ToInt32(Session["user_usuarioid"])
                                    };
                                    context.cruce_documentos.Add(cd);
                                }

                                #endregion

                                //Lineas documento

                                #region lineasDocumento

                                List<mov_contable> listaMov = new List<mov_contable>();
                                int listaLineas = Convert.ToInt32(Request["lista_referencias"]);
                                for (int i = 0; i <= listaLineas; i++)
                                    if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                    {
                                        decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                            ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                            : 0;

                                        string codigo = Request["referencia" + i];
                                        decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                        decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                        decimal descontar = porDescuento / 100;
                                        decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                        decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                        decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                        decimal ivaReferencia =
                                            Math.Round(final * porIVAReferencia *
                                                       Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                        icb_referencia unidadCodigo =
                                            context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                        string und = unidadCodigo.unidad_medida;

                                        vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                            x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                            x.mes == DateTime.Now.Month);
                                        decimal? costoReferencia = vwPromedio.Promedio;
                                        decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                        if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                        {
                                            int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                            icb_referencia_movdetalle buscar_movimientoPedido =
                                                context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                    x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                            if (buscar_movimientoPedido != null)
                                            {
                                                if (buscar_movimientoPedido.refdet_saldo != null)
                                                {
                                                    buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                }
                                                else
                                                {
                                                    buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    buscar_movimientoPedido.facturado = true;

                                                }

                                                context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                            }
                                        }

                                        lineas_documento lineas = new lineas_documento
                                        {
                                            id_encabezado = id_encabezado,
                                            codigo = Request["referencia" + i],
                                            seq = i + 1,
                                            fec = DateTime.Now,
                                            nit = modelo.nit,
                                            und = Convert.ToString(und),
                                            cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)
                                        };
                                        decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                        lineas.porcentaje_iva = (float)ivaLista;
                                        lineas.valor_unitario = final;
                                        decimal descuento = porDescuento;
                                        lineas.porcentaje_descuento = (float)descuento;
                                        lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                        lineas.bodega = bodega;
                                        lineas.fec_creacion = DateTime.Now;
                                        lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                        lineas.estado = true;
                                        lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                        lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                        if (Request["tasa"] != "")
                                        {
                                            lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                        }

                                        if (Request["centro_costo_tf" + i] != "" &&
                                            Request["centro_costo_tf" + i] != null &&
                                            Request["centro_costo_tf" + i] != "undefined")
                                        {
                                            //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                            //lineas.centro_costo = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                        }

                                        lineas.vendedor = eg.vendedor;

                                        context.lineas_documento.Add(lineas);

                                        #endregion

                                        //Referencias Inven

                                        #region referencias inven

                                        int anio = DateTime.Now.Year;
                                        int mes = DateTime.Now.Month;

                                        referencias_inven refin = new referencias_inven();

                                        referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                            x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);

                                        var entrada = false;
                                        if (doc_interno.doc_interno_asociado != null)
                                        {//calculo el comportamiento del documento interno asociado

                                            var docinternoaso = context.tp_doc_registros.Where(d => d.tpdoc_id == doc_interno.doc_interno_asociado.Value).FirstOrDefault();
                                            if (docinternoaso.entrada_salida != null)
                                            {
                                                entrada = docinternoaso.entrada_salida.Value;
                                            }
                                        }

                                        if (existencia != null)
                                        {
                                            if (entrada == false)
                                            {
                                                existencia.codigo = codigo;
                                                existencia.can_sal += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_sal +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.can_vta += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_vta +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.val_vta += baseUnitario;
                                            }
                                            else
                                            {
                                                existencia.codigo = codigo;
                                                existencia.can_ent += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_ent +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.can_com += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_com +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.val_vta += 0;
                                                existencia.costo_prom = baseUnitario;
                                            }

                                            context.Entry(existencia).State = EntityState.Modified;
                                        }
                                        else
                                        {
                                            refin.bodega = bodega;
                                            refin.codigo = codigo;
                                            refin.ano = Convert.ToInt16(DateTime.Now.Year);
                                            refin.mes = Convert.ToInt16(DateTime.Now.Month);
                                            refin.modulo = "R";
                                            if (entrada == false)
                                            {
                                                refin.can_sal = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_sal =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.can_vta = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_vta =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.val_vta = baseUnitario;
                                            }
                                            else
                                            {
                                                refin.can_ent = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_ent =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.can_com = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_com =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.val_vta = 0;
                                                existencia.costo_prom = Convert.ToDecimal(
                                                        cr, Cultureinfo);

                                            }




                                            context.referencias_inven.Add(refin);
                                        }

                                        #endregion

                                        //Mov Contable (IVA, Inventario, Costo, Ingreso)

                                        #region Mov Contable (IVA, Inventario, Costo, Ingreso)

                                        foreach (var parametro in parametrosCuentasVerificar)
                                        {
                                            string descripcionParametro = context.paramcontablenombres
                                                .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                                .descripcion_parametro;
                                            cuenta_puc buscarCuenta =
                                                context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                            if (buscarCuenta != null)
                                            {
                                                if (parametro.id_nombre_parametro == 2 &&
                                                    Convert.ToDecimal(ivaEncabezado, Cultureinfo) != 0
                                                    || parametro.id_nombre_parametro == 9 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                    || parametro.id_nombre_parametro == 20 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                    || parametro.id_nombre_parametro == 11 &&
                                                    Convert.ToDecimal(costoEncabezado, Cultureinfo) != 0
                                                    || parametro.id_nombre_parametro == 12 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0) //costo promedio
                                                {
                                                    mov_contable movNuevo = new mov_contable
                                                    {
                                                        id_encab = encabezado.idencabezado,
                                                        seq = secuencia,
                                                        idparametronombre = parametro.id_nombre_parametro,
                                                        cuenta = parametro.cuenta,
                                                        centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                            ? parametro.id_nombre_parametro == 11
                                                                ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                : parametro.id_nombre_parametro == 12
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                            : parametro.centro
                                                    };
                                                    ;
                                                    movNuevo.fec = DateTime.Now;
                                                    movNuevo.fec_creacion = DateTime.Now;
                                                    movNuevo.tipo_tarifa =
                                                        Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                                    movNuevo.userid_creacion =
                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                    movNuevo.documento = Convert.ToString(modelo.pedido);

                                                    cuenta_puc info = context.cuenta_puc
                                                        .Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

                                                    if (info.tercero)
                                                    {
                                                        movNuevo.nit = modelo.nit;
                                                    }
                                                    else
                                                    {
                                                        icb_terceros tercero = context.icb_terceros
                                                            .Where(t => t.doc_tercero == "0").FirstOrDefault();
                                                        movNuevo.nit = tercero.tercero_id;
                                                    }

                                                    #region IVA

                                                    if (parametro.id_nombre_parametro == 2)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaIva = pcr.cuenta_dev_iva_compras;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region si tiene perfil y cuenta asignada a ese perfil

                                                            if (cuentaIva != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaIva);
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaIva)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                // context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region si tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarIVA = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarIVA != null)
                                                        {
                                                            buscarIVA.debito += movNuevo.debito;
                                                            buscarIVA.debitoniif += movNuevo.debitoniif;
                                                            buscarIVA.credito += movNuevo.credito;
                                                            buscarIVA.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarIVA).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro = parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Inventario

                                                    if (parametro.id_nombre_parametro == 9 ||
                                                        parametro.id_nombre_parametro == 20)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaInven = pcr.cta_inventario;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaInven != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaInven);
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaInven)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarInventario = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarInventario != null)
                                                        {
                                                            buscarInventario.basecontable += movNuevo.basecontable;
                                                            buscarInventario.debito += movNuevo.debito;
                                                            buscarInventario.debitoniif += movNuevo.debitoniif;
                                                            buscarInventario.credito += movNuevo.credito;
                                                            buscarInventario.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarInventario).State =
                                                                EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro = parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Ingreso

                                                    bool siva = Request["tipo_tarifa_hidden_" + i] == "2";

                                                    if (parametro.id_nombre_parametro == 11 && siva != true)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaVenta = pcr.cuenta_ventas;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaVenta != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                ;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaVenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                ;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                                ? parametro.id_nombre_parametro == 11
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                                : parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarVenta = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarVenta != null)
                                                        {
                                                            buscarVenta.basecontable += movNuevo.basecontable;
                                                            buscarVenta.debito += movNuevo.debito;
                                                            buscarVenta.debitoniif += movNuevo.debitoniif;
                                                            buscarVenta.credito += movNuevo.credito;
                                                            buscarVenta.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarVenta).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Costo

                                                    if (parametro.id_nombre_parametro == 12)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaCosto = pcr.cuenta_costo;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaCosto != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaCosto)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                ;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                                ? parametro.id_nombre_parametro == 12
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                                : parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarCosto = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarCosto != null)
                                                        {
                                                            buscarCosto.basecontable += movNuevo.basecontable;
                                                            buscarCosto.debito += movNuevo.debito;
                                                            buscarCosto.debitoniif += movNuevo.debitoniif;
                                                            buscarCosto.credito += movNuevo.credito;
                                                            buscarCosto.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarCosto).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    secuencia++;
                                                    //Cuentas valores

                                                    #region Cuentas valores

                                                    cuentas_valores buscar_cuentas_valores =
                                                        context.cuentas_valores.FirstOrDefault(x =>
                                                            x.centro == parametro.centro &&
                                                            x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit);
                                                    if (buscar_cuentas_valores != null)
                                                    {
                                                        buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
                                                        buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
                                                        buscar_cuentas_valores.debitoniff +=
                                                            Math.Round(movNuevo.debitoniif);
                                                        buscar_cuentas_valores.creditoniff +=
                                                            Math.Round(movNuevo.creditoniif);
                                                        context.Entry(buscar_cuentas_valores).State =
                                                            EntityState.Modified;
                                                        //context.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        DateTime fechaHoy = DateTime.Now;
                                                        cuentas_valores crearCuentaValor = new cuentas_valores
                                                        {
                                                            ano = fechaHoy.Year,
                                                            mes = fechaHoy.Month,
                                                            cuenta = movNuevo.cuenta,
                                                            centro =
                                                                Request["tipo_tarifa_hidden_" + i] == "2"
                                                                    ? parametro.id_nombre_parametro == 11
                                                                        ? Convert.ToInt32(
                                                                            Request["centro_costo_tf" + i])
                                                                        : parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : movNuevo.centro
                                                                    : movNuevo.centro
                                                        };
                                                        ;
                                                        crearCuentaValor.nit = movNuevo.nit;
                                                        crearCuentaValor.debito = Math.Round(movNuevo.debito);
                                                        crearCuentaValor.credito = Math.Round(movNuevo.credito);
                                                        crearCuentaValor.debitoniff = Math.Round(movNuevo.debitoniif);
                                                        crearCuentaValor.creditoniff = Math.Round(movNuevo.creditoniif);
                                                        context.cuentas_valores.Add(crearCuentaValor);
                                                        context.SaveChanges();
                                                    }

                                                    #endregion

                                                    totalCreditos += Math.Round(movNuevo.credito);
                                                    totalDebitos += Math.Round(movNuevo.debito);
                                                    listaDescuadrados.Add(new DocumentoDescuadradoModel
                                                    {
                                                        NumeroCuenta =
                                                            "(" + buscarCuenta.cntpuc_numero + ")" +
                                                            buscarCuenta.cntpuc_descp,
                                                        DescripcionParametro = descripcionParametro,
                                                        ValorDebito = movNuevo.debito,
                                                        ValorCredito = movNuevo.credito
                                                    });
                                                }
                                            }
                                        }

                                        #endregion
                                    }

                                #region validaciones para guardar

                                if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                {
                                    TempData["documento_descuadrado"] =
                                        "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                    ViewBag.documentoSeleccionado = encabezado.tipo;
                                    ViewBag.bodegaSeleccionado = encabezado.bodega;
                                    ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                    ViewBag.documentoDescuadrado = listaDescuadrados;
                                    ViewBag.calculoDebito = totalDebitos;
                                    ViewBag.calculoCredito = totalCreditos;

                                    dbTran.Rollback();
                                    listas2(modelo);
                                    BuscarFavoritos(menu);
                                    return View(modelo);
                                    //return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
                                }

                                funciono = 1;

                                #endregion

                                if (funciono > 0)
                                {
                                    context.SaveChanges();
                                    dbTran.Commit();
                                    TempData["mensaje"] = "Registro creado correctamente";
                                    DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                    doc.ActualizarConsecutivo(grupo.grupo, consecutivo);
                                    if (documentointerno != 0)
                                    {
                                        doc.ActualizarConsecutivo(grupo2.grupo, consecutivo2);

                                    }
                                    return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
                                }
                            }
                            else
                            {
                                TempData["mensaje_error"] = "no hay consecutivo";
                            }
                        }
                        //cierre
                        else
                        {
                            TempData["mensaje_error"] = "Lista vacia";
                        }
                    }
                    catch (DbEntityValidationException ex)
                    {
                        var mensaje = ex;
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible guardar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }

            listas();
            BuscarFavoritos(menu);
            return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
        }

        public JsonResult AgregarTarifadesdeped(int? id, int ccosto)
        {

            var icb_ref = context.icb_referencia_movdetalle.Where(x => x.refdet_id == id).FirstOrDefault();
            icb_ref.tipotarifa = 2;
            icb_ref.idcentro = ccosto;
            context.Entry(icb_ref).State = EntityState.Modified;
            context.SaveChanges();
            return Json(0, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Cambiartarificbdetmov(int id, int tarifa)
        {

            icb_referencia_movdetalle pedrepuesto = context.icb_referencia_movdetalle.Where(x => x.refdet_id == id).FirstOrDefault();

            pedrepuesto.tipotarifa = tarifa;
            pedrepuesto.respuestaInterna = null;
            pedrepuesto.observacionresinterva = null;
            context.Entry(pedrepuesto).State = EntityState.Modified;
            context.SaveChanges();
            return Json(0);
        }




        public JsonResult buscarCentroCostoModal()
        {


            int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
            var buscar = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
            {
                value = x.centcst_id,
                text = x.pre_centcst + " - " + x.Tipos_Cartera.descripcion
            }).ToList();
            return Json(buscar, JsonRequestBehavior.AllowGet);
        }


        public ActionResult FacturacionRepuestosBackOffice(int? menu, string backoffice, string en)
        {
            // se realiza una decodificación de la variable "en" para el id encabezado que será usado para usarlo en el metodo facturación PDF
            int idencabezado = 0;
            if (!string.IsNullOrWhiteSpace(en))
            {
                //descodifico la variable en

                //la busco en encab documento. Si existe

                //Viewbag.idEncabezado=

                try
                {
                    byte[] decoEn = Convert.FromBase64String(en);
                    string en2 = Encoding.UTF8.GetString(decoEn);
                    bool convertir = int.TryParse(en2, out idencabezado);
                }
                catch (Exception)
                {

                    throw;
                }

            }

            ViewBag.encabezado = idencabezado;

            if (backoffice != null)
            {
                if (string.IsNullOrWhiteSpace(backoffice))
                {
                    listas();
                }

                string[] array;
                int tpDoc = 0;
                int bodega = 0;
                int pedidos = 0;
                int cliente = 0;
                array = backoffice.Split(',');
                for (int i = 0; i < array.Count(); i++)
                {
                    tpDoc = Convert.ToInt32(array[0]);
                    bodega = Convert.ToInt32(array[1]);
                    pedidos = Convert.ToInt32(array[2]);
                    cliente = Convert.ToInt32(array[3]);
                }

                ViewBag.idDocumento = tpDoc;
                var desDoc = (from tpr in context.tp_doc_registros
                              where tpr.tpdoc_id == tpDoc
                              select new
                              {
                                  nombre = "(" + tpr.prefijo + ") " + tpr.tpdoc_nombre
                              }).FirstOrDefault();
                ViewBag.documentoSeleccionado = desDoc.nombre;

                var desBod = (from b in context.bodega_concesionario
                              where b.id == bodega
                              select new
                              {
                                  nombre = b.bodccs_nombre
                              }).FirstOrDefault();
                ViewBag.idBodega = bodega;
                ViewBag.bodegaSeleccionada = desBod.nombre;


                var desPedido = (from pedido in context.vpedido
                                 join tercero in context.icb_terceros
                                     on pedido.nit equals tercero.tercero_id
                                 where pedido.bodega == bodega &&
                                       pedido.planmayor != null /*&& pedido.facturado == false && pedido.numfactura == null*/ &&
                                       pedido.numero == pedidos
                                 select new
                                 {
                                     pedido.vendedor,
                                     nit = pedido.nit,
                                     docTercero = tercero.doc_tercero,
                                     cliente = "(" + pedido.numero + ") " + tercero.razon_social + tercero.prinom_tercero + " " +
                                               tercero.segnom_tercero + " " + tercero.apellido_tercero + " " +
                                               tercero.segapellido_tercero
                                 }).FirstOrDefault();


                ViewBag.idPedido = pedidos;
                ViewBag.pedidoSeleccionado = desPedido.cliente;
                ViewBag.documentoTercero = desPedido.docTercero;

                int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
                var buscarCentro = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
                {
                    value = x.centcst_id,
                    text = x.pre_centcst + " - " + x.Tipos_Cartera.descripcion
                }).ToList();

                ViewBag.centro = new SelectList(buscarCentro, "value", "text");

                ViewBag.fpago_id = new SelectList(context.fpago_tercero.OrderBy(x => x.fpago_nombre), "fpago_id",
                    "fpago_nombre");


                //List<SelectListItem> listaAsesores = new List<SelectListItem>();
                //foreach (var asesor in asesores)
                //{
                //    listaAsesores.Add(new SelectListItem() { Value = asesor.user_id.ToString(), Text = asesor.user_nombre + " " + asesor.user_apellido, Selected = asesor.user_id == desPedido.vendedor ? true : false });
                //}
                //ViewBag.vendedor = listaAsesores;

                var provedores = from pro in context.tercero_cliente
                                 join ter in context.icb_terceros
                                     on pro.tercero_id equals ter.tercero_id
                                 where pro.tercero_id == cliente
                                 select new
                                 {
                                     value = ter.tercero_id,
                                     text = "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                                            ter.apellido_tercero + " " + ter.segapellido_tercero,
                                     razonSocial = ter.razon_social
                                 };

                ViewBag.nit = new SelectList(provedores, "value", "text", desPedido.nit);

                NotasContablesModel modelo = new NotasContablesModel
                {
                    vendedor = desPedido.vendedor,
                    nit = desPedido.nit != null ? desPedido.nit.Value : 0,
                };
                listas2(modelo);
                BuscarFavoritos(menu);
                return View(modelo);
            }
            else
            {
                ViewBag.bodegaSeleccionada = 0;
                ViewBag.pedidoSeleccionado = 0;
                NotasContablesModel modelo = new NotasContablesModel();
                var proveedores = context.tercero_cliente.Take(0)
                    .Select(d => new { value = d.icb_terceros.tercero_id, text = "" }).ToList();
                ViewBag.cliente = new SelectList(proveedores, "value", "text");
                ViewBag.nit = new SelectList(proveedores, "value", "text");

                listas2(modelo);
                BuscarFavoritos(menu);
                return View();
            }
        }
        public JsonResult tarifasfacturacion()
        {
            var result = context.rtipocliente.OrderBy(x => x.id).Select(x => new { x.id, x.descripcion }).ToList();



            return Json(result, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult FacturacionRepuestosBackOffice(NotasContablesModel modelo, int? menu)
        {
            int documentointerno = 0;
            grupoconsecutivos grupo2 = new grupoconsecutivos();
            long consecutivo2 = 0;
            string mensaje = "0";

            int idtercero = Convert.ToInt32(Request["selectProveedor"]);
            if (idtercero == 0)
            {
                idtercero = modelo.nit;
            }

            int id_encabezado = 0;

            var provedores = from pro in context.tercero_cliente
                             join ter in context.icb_terceros
                                 on pro.tercero_id equals ter.tercero_id
                             where pro.tercero_id == idtercero
                             select new
                             {
                                 value = ter.tercero_id,
                                 text = "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                        ter.apellido_tercero + " " + ter.segapellido_tercero,
                                 razonSocial = ter.razon_social
                             };
            ViewBag.nit = new SelectList(provedores, "value", "text", modelo.nit);

            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;

                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == modelo.perfilcontable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();
                        int secuencia = 1;
                        //decimal totalDebitos = 0;
                        //decimal totalCreditos = 0;
                        long? pedidoactual = modelo.pedido;
                        int idpedido = context.vpedido.Where(x => x.numero == pedidoactual).Select(z => z.id)
                            .FirstOrDefault();
                        //   int accesorios = Convert.ToInt32(Request["lista_referencias"]);


                        //    tarifa interna

                        int listasnum = Convert.ToInt32(context.vpedrepuestos.Where(x => x.tipotarifa == 2 && x.pedido_id == idpedido && x.estado == true && x.facturado == false).Count());
                        int listasnum2 = Convert.ToInt32(context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.estado == true && x.facturado == false && (x.tipotarifa == 1 || x.tipotarifa == 3)).Count());
                        var confirmar = 0;
                        if (listasnum2 > 0)
                        {
                            var Listareferenciasadd = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.tipotarifa == 1 || x.tipotarifa == 3 && x.estado == true && x.facturado == false).ToList();
                            List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                            centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                            int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;

                            List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();

                            int costoLineas = Convert.ToInt32(Request["lista_referencias"]);
                            for (int i = 0; i < Listareferenciasadd.Count; i++)
                            {
                                if (Listareferenciasadd.Count > 0)
                                {
                                    int anio = DateTime.Now.Year;
                                    int mes = DateTime.Now.Month;


                                    string referencia = Listareferenciasadd[i].referencia;
                                    vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                    decimal? costoReferencia = vwPromedio.Promedio;
                                    costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                          Convert.ToDecimal(Listareferenciasadd[i].cantidad, Cultureinfo);
                                }
                            }


                            tercero_cliente tcliente = context.tercero_cliente.Where(x => x.tercero_id == idtercero).FirstOrDefault();

                            int bodega = Convert.ToInt32(Request["bodega"]);
                            decimal descli = 0;
                            if (Listareferenciasadd.Count > 0)

                            {

                                //el costo total ser esta haciendodirectamente desde nla base de datos
                                decimal costoTotal = 0;
                                var valor = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.estado == true && (x.tipotarifa == 1 || x.tipotarifa == 3)).Select(v => new { v.vrtotal, v.iva, v.descuento, v.cantidad, v.vrunitario }).ToList();
                                foreach (var item in valor)
                                {
                                    var descuento = item.descuento != null ? item.descuento : 0;
                                    var ivaref = item.iva != null ? item.iva : 0;
                                    decimal? desc = (item.vrtotal * Convert.ToDecimal(descuento, Cultureinfo)) / 100;
                                    decimal? tsindesc = item.vrtotal - desc;

                                    if (tcliente != null)
                                    {
                                        descli = (Convert.ToDecimal(tsindesc, Cultureinfo) * Convert.ToDecimal(tcliente.dscto_rep, Cultureinfo)) / 100;
                                        tsindesc = tsindesc - descli;
                                    }


                                    decimal? iva = tsindesc * Convert.ToDecimal(ivaref, Cultureinfo) / 100;
                                    decimal? tconiva = tsindesc + iva;

                                    costoTotal = costoTotal + Convert.ToDecimal(tconiva, Cultureinfo); ;

                                }
                                int datos = Convert.ToInt32(Listareferenciasadd.Count);

                                decimal ivaEncabezado = 0; //valor total del iva

                                var ivaEncabezadolist = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.iva > 0 && x.estado == true).Select(x => new { x.vrtotal, x.iva }).ToList();

                                foreach (var item in ivaEncabezadolist)
                                {
                                    decimal? ivas = Convert.ToDecimal(item.iva, Cultureinfo);
                                    decimal ivasolo = (Convert.ToDecimal(item.vrtotal, Cultureinfo) * Convert.ToDecimal(ivas, Cultureinfo)) / 100;
                                    ivaEncabezado = ivaEncabezado + ivasolo;

                                }
                                var descuentolist = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.descuento > 0 && x.estado == true).Select(x => new { x.vrtotal, x.descuento }).ToList();
                                decimal descuentoEncabezado = 0; //valor total del descuento



                                foreach (var item in descuentolist)
                                {
                                    decimal? descuentos = Convert.ToDecimal(item.descuento, Cultureinfo);
                                    decimal descuentosolo = (Convert.ToDecimal(item.vrtotal, Cultureinfo) * Convert.ToDecimal(descuentos, Cultureinfo)) / 100;
                                    descuentoEncabezado = ivaEncabezado + descuentosolo;

                                }


                                // decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos
                                var listacostoencabezado = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.tipotarifa == 1 || x.tipotarifa == 3 && x.estado == true).Select(x => x.vrtotal).Sum();
                                decimal costoEncabezado = Convert.ToDecimal(listacostoencabezado, Cultureinfo);


                                decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                                //consecutivo
                                grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                    x.documento_id == modelo.tipo && x.bodega_id == bodega);
                                if (grupo != null)
                                {
                                    DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
                                    long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                    //Encabezado documento

                                    #region encabezado

                                    encab_documento encabezado = new encab_documento
                                    {
                                        tipo = modelo.tipo,
                                        numero = consecutivo,
                                        nit = idtercero,
                                        fecha = DateTime.Now,
                                        id_pedido_vehiculo = idpedido,
                                        estado_factura = 1,
                                    };
                                    int? condicion = modelo.fpago_id;
                                    encabezado.fpago_id = condicion;
                                    if (modelo.centro == null)
                                    {
                                        encabezado.centro_doc = 1;
                                    }
                                    else
                                    {
                                        encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                    }

                                    int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                    DateTime vencimiento = DateTime.Now.AddDays(dias);
                                    encabezado.vencimiento = vencimiento;
                                    encabezado.valor_total = costoTotal;
                                    encabezado.iva = ivaEncabezado;
                                    // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                    #region calculo de retenciones

                                    tp_doc_registros buscarTipoDocRegistro =
                                        context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
                                    tercero_proveedor buscarProveedor =
                                        context.tercero_proveedor.FirstOrDefault(x => x.tercero_id == modelo.nit);
                                    int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id : 0;
                                    perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                        x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                        x.tipo_regimenid == regimen_proveedor);

                                    decimal retenciones = 0;

                                    if (buscarPerfilTributario != null)
                                    {
                                        if (buscarPerfilTributario.retfuente == "A" &&
                                            valor_totalenca >= buscarTipoDocRegistro.baseretencion)
                                        {
                                            encabezado.porcen_retencion = buscarTipoDocRegistro.retencion;
                                            encabezado.retencion =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(buscarTipoDocRegistro.retencion / 100, Cultureinfo));
                                            retenciones += encabezado.retencion;
                                        }

                                        if (buscarPerfilTributario.retiva == "A" &&
                                            ivaEncabezado >= buscarTipoDocRegistro.baseiva)
                                        {
                                            encabezado.porcen_reteiva = buscarTipoDocRegistro.retiva;
                                            encabezado.retencion_iva =
                                                Math.Round(encabezado.iva *
                                                           Convert.ToDecimal(buscarTipoDocRegistro.retiva / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_iva;
                                        }

                                        if (buscarPerfilTributario.autorretencion == "A")
                                        {
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                            encabezado.porcen_autorretencion = (float)tercero_acteco;
                                            encabezado.retencion_causada =
                                                Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_causada;
                                        }

                                        if (buscarPerfilTributario.retica == "A" &&
                                            valor_totalenca >= buscarTipoDocRegistro.baseica)
                                        {
                                            terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                                x.idcodica == buscarProveedor.acteco_id && x.bodega == bodega);
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.tarifa;
                                            if (bodega_acteco != null)
                                            {
                                                encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }

                                            if (tercero_acteco != 0)
                                            {
                                                encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(
                                                                   buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                            else
                                            {
                                                encabezado.porcen_retica = buscarTipoDocRegistro.retica;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                        }
                                    }

                                    #endregion

                                    if (modelo.fletes != null)
                                    {
                                        encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                        encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                    }

                                    encabezado.costo = costoPromedioTotal;
                                    encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                    encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
                                    string pedido = Request["pedido"];
                                    //la columna pedido es para PEDIDOS DE REPUESTOS DEL CLIENTE (tabla icb_referencia_mov) NO aplica en este caso
                                    /*if (!string.IsNullOrEmpty(pedido))
                                    {
                                        encabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                    }*/

                                    encabezado.bodega = bodega;
                                    encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                    if (Request["tasa"] != "")
                                    {
                                        encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                    }

                                    encabezado.valor_mercancia = valor_totalenca;
                                    encabezado.fec_creacion = DateTime.Now;
                                    encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    encabezado.estado = true;
                                    encabezado.concepto = modelo.concepto;
                                    encabezado.concepto2 = modelo.concepto2;

                                    context.encab_documento.Add(encabezado);
                                    context.SaveChanges();

                                    #endregion

                                    id_encabezado = encabezado.idencabezado;
                                    //veo si el documento externo tiene documento interno asociado
                                    tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == modelo.tipo).FirstOrDefault();
                                    //guardado de documento interno
                                    if (doc_interno.doc_interno_asociado != null)
                                    {
                                        //se consulta consecutivo de documento interno
                                        grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == modelo.bodega);
                                        if (grupo2 != null)
                                        {
                                            consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                            //calculo y guardo el encabezado del movimiento interno
                                            encab_documento encabezado2 = new encab_documento
                                            {
                                                tipo = doc_interno.doc_interno_asociado.Value,
                                                numero = consecutivo2,
                                                nit = encabezado.nit,
                                                fecha = DateTime.Now,
                                                fpago_id = encabezado.fpago_id,
                                                vencimiento = encabezado.vencimiento,
                                                valor_total = encabezado.valor_total,
                                                iva = encabezado.iva,
                                                porcen_retencion = encabezado.porcen_retencion,
                                                retencion = encabezado.retencion,
                                                porcen_reteiva = encabezado.porcen_reteiva,
                                                retencion_iva = encabezado.retencion_iva,
                                                porcen_retica = encabezado.porcen_retica,
                                                retencion_ica = encabezado.retencion_ica,
                                                fletes = encabezado.fletes,
                                                iva_fletes = encabezado.iva_fletes,
                                                costo = encabezado.costo,
                                                vendedor = encabezado.vendedor,
                                                documento = encabezado.documento,
                                                remision = encabezado.remision,
                                                bodega = encabezado.bodega,
                                                concepto = encabezado.concepto,
                                                moneda = encabezado.moneda,
                                                perfilcontable = encabezado.perfilcontable,
                                                valor_mercancia = encabezado.valor_mercancia,
                                                fec_creacion = encabezado.fec_creacion,
                                                userid_creacion = encabezado.userid_creacion,
                                                estado = true,
                                                concepto2 = encabezado.concepto2,
                                                id_movimiento_interno = encabezado.idencabezado,
                                            };
                                            context.encab_documento.Add(encabezado2);
                                            context.SaveChanges();
                                            documentointerno = encabezado2.idencabezado;
                                        }
                                    }

                                    encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);

                                    //Mov Contable

                                    #region movimientos contables


                                    //buscamos en perfil cuenta documento, por medio del perfil seleccionado

                                    foreach (var parametro in parametrosCuentasVerificar)
                                    {
                                        string descripcionParametro = context.paramcontablenombres
                                            .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                            .descripcion_parametro;
                                        cuenta_puc buscarCuenta =
                                            context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                        if (buscarCuenta != null)
                                        {
                                            if (parametro.id_nombre_parametro == 10 &&
                                                Convert.ToDecimal(valor_totalenca, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 3 &&
                                                Convert.ToDecimal(eg.retencion, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 4 &&
                                                Convert.ToDecimal(eg.retencion_iva, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 5 &&
                                                Convert.ToDecimal(eg.retencion_ica, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 6 && Convert.ToDecimal(eg.fletes, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 14 &&
                                                Convert.ToDecimal(eg.iva_fletes, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 17 &&
                                                Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0
                                                || parametro.id_nombre_parametro == 18 &&
                                                Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0)
                                            {
                                                mov_contable movNuevo = new mov_contable
                                                {
                                                    id_encab = eg.idencabezado,
                                                    seq = secuencia,
                                                    idparametronombre = parametro.id_nombre_parametro,
                                                    cuenta = parametro.cuenta,
                                                    centro = parametro.centro,
                                                    fec = DateTime.Now,
                                                    fec_creacion = DateTime.Now,
                                                    userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                    documento = Convert.ToString(modelo.pedido),
                                                    detalle = "Facturacion de repuestos con consecutivo " + eg.numero,
                                                    estado = true
                                                };

                                                cuenta_puc info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta)
                                                    .FirstOrDefault();

                                                if (info.tercero)
                                                {
                                                    movNuevo.nit = idtercero;
                                                }
                                                else
                                                {
                                                    icb_terceros tercero = context.icb_terceros.Where(t => t.doc_tercero == "0")
                                                        .FirstOrDefault();
                                                    movNuevo.nit = tercero.tercero_id;
                                                }

                                                // las siguientes validaciones se hacen dependiendo de la cuenta que esta moviendo la compra manual, para guardar la informacion acorde

                                                #region Cuentas X Cobrar

                                                if (parametro.id_nombre_parametro == 10)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = Convert.ToString(modelo.pedido);
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);

                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                    }
                                                }

                                                #endregion

                                                #region Retencion

                                                if (parametro.id_nombre_parametro == 3)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion;

                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion;
                                                    }
                                                }

                                                #endregion

                                                #region ReteIVA

                                                if (parametro.id_nombre_parametro == 4)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(ivaEncabezado, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_iva;

                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_iva;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_iva;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_iva;
                                                    }
                                                }

                                                #endregion

                                                #region ReteICA

                                                if (parametro.id_nombre_parametro == 5)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_ica;

                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_ica;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_ica;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_ica;
                                                    }
                                                }

                                                #endregion

                                                #region Fletes

                                                if (parametro.id_nombre_parametro == 6)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = eg.fletes;
                                                        movNuevo.debito = 0;

                                                        movNuevo.creditoniif = eg.fletes;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = eg.fletes;
                                                        ;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = eg.fletes;
                                                        movNuevo.debito = 0;
                                                    }
                                                }

                                                #endregion

                                                #region IVA fletes

                                                if (parametro.id_nombre_parametro == 14)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = eg.iva_fletes;
                                                        movNuevo.debito = 0;

                                                        movNuevo.creditoniif = eg.iva_fletes;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = eg.iva_fletes;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = eg.iva_fletes;
                                                        movNuevo.debito = 0;
                                                    }
                                                }

                                                #endregion

                                                #region AutoRetencion Debito

                                                if (parametro.id_nombre_parametro == 17)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_causada;

                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_causada;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = 0;
                                                        movNuevo.debitoniif = eg.retencion_causada;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = 0;
                                                        movNuevo.debito = eg.retencion_causada;
                                                    }
                                                }

                                                #endregion

                                                #region AutoRetencion Credito

                                                if (parametro.id_nombre_parametro == 18)
                                                {
                                                    /*if (info.aplicaniff==true)
                                                    {

                                                    }*/

                                                    if (info.manejabase)
                                                    {
                                                        movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                    }
                                                    else
                                                    {
                                                        movNuevo.basecontable = 0;
                                                    }

                                                    if (info.documeto)
                                                    {
                                                        movNuevo.documento = modelo.documento;
                                                    }

                                                    if (buscarCuenta.concepniff == 1)
                                                    {
                                                        movNuevo.credito = eg.retencion_causada;
                                                        movNuevo.debito = 0;

                                                        movNuevo.creditoniif = eg.retencion_causada;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 4)
                                                    {
                                                        movNuevo.creditoniif = eg.retencion_causada;
                                                        movNuevo.debitoniif = 0;
                                                    }

                                                    if (buscarCuenta.concepniff == 5)
                                                    {
                                                        movNuevo.credito = eg.retencion_causada;
                                                        movNuevo.debito = 0;
                                                    }
                                                }

                                                #endregion

                                                context.mov_contable.Add(movNuevo);
                                                //context.SaveChanges();

                                                secuencia++;
                                                //Cuentas valores

                                                #region Cuentas valores
                                                DateTime fechaHoy = DateTime.Now;
                                                cuentas_valores buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x =>
                                                    x.centro == parametro.centro && x.cuenta == parametro.cuenta &&
                                                    x.nit == movNuevo.nit && x.ano == fechaHoy.Year && x.mes == fechaHoy.Month);
                                                if (buscar_cuentas_valores != null)
                                                {
                                                    buscar_cuentas_valores.debito += movNuevo.debito;
                                                    buscar_cuentas_valores.credito += movNuevo.credito;
                                                    buscar_cuentas_valores.debitoniff += movNuevo.debitoniif;
                                                    buscar_cuentas_valores.creditoniff += movNuevo.creditoniif;
                                                    context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
                                                }
                                                else
                                                {
                                                    cuentas_valores crearCuentaValor = new cuentas_valores
                                                    {
                                                        ano = fechaHoy.Year,
                                                        mes = fechaHoy.Month,
                                                        cuenta = movNuevo.cuenta,
                                                        centro = movNuevo.centro,
                                                        nit = idtercero,
                                                        debito = movNuevo.debito,
                                                        credito = movNuevo.credito,
                                                        debitoniff = movNuevo.debitoniif,
                                                        creditoniff = movNuevo.creditoniif
                                                    };
                                                    context.cuentas_valores.Add(crearCuentaValor);
                                                    //context.SaveChanges();
                                                }

                                                #endregion

                                                totalCreditos += movNuevo.credito;
                                                totalDebitos += movNuevo.debito;
                                                listaDescuadrados.Add(new DocumentoDescuadradoModel
                                                {
                                                    NumeroCuenta =
                                                        "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
                                                    DescripcionParametro = descripcionParametro,
                                                    ValorDebito = movNuevo.debito,
                                                    ValorCredito = movNuevo.credito
                                                });
                                            }
                                        }
                                    }

                                    #endregion

                                    //Lineas documento

                                    #region lineasDocumento

                                    List<mov_contable> listaMov = new List<mov_contable>();
                                    int listaLineas = Convert.ToInt32(Request["lista_referencias"]);

                                    for (int j = 0; j < Listareferenciasadd.Count; j++)
                                    {


                                        if (Listareferenciasadd[j].referencia != null)
                                        {



                                            //    decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                            //      ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                            //      : 0;
                                            decimal porDescuento = Listareferenciasadd[j].descuento != null ?
                                            Convert.ToDecimal(Listareferenciasadd[j].descuento, Cultureinfo) : 0;



                                            //string codigo = Request["referencia" + i];
                                            string codigo = Listareferenciasadd[j].referencia;

                                            //    decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal cantidadFacturada = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);



                                            // decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Listareferenciasadd[j].vrunitario, Cultureinfo);

                                            decimal descontar = porDescuento / 100;
                                            //    decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Listareferenciasadd[j].iva, Cultureinfo) / 100;

                                            decimal descliente = Convert.ToDecimal(tcliente.dscto_rep, Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);

                                            final = Math.Round(final - final * descliente);




                                            decimal baseUnitario = final * Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);

                                            int numPedido = Convert.ToInt32(Request["pedido"]);
                                            int idPedido = context.vpedido.FirstOrDefault(x => x.numero == numPedido).id;
                                            //actualizo en vpedrepuesto la(s) referencia(s) que facture

                                            IQueryable<vpedrepuestos> accesoriosPedido = context.vpedrepuestos.Where(x =>
                                                x.pedido_id == idPedido && x.referencia == codigo);
                                            if (accesoriosPedido != null)
                                            {
                                                foreach (vpedrepuestos item in accesoriosPedido)
                                                {
                                                    item.facturado = true;
                                                    item.numfactura = Convert.ToInt32(eg.numero);
                                                    item.idtipo = modelo.tipo;
                                                    context.Entry(item).State = EntityState.Modified;
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + j]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + j]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            int tipo_tarifa = Convert.ToInt32(Request[""]);
                                            lineas_documento lineas = new lineas_documento
                                            {
                                                id_encabezado = id_encabezado,
                                                codigo = Listareferenciasadd[j].referencia,
                                                seq = j + 1,
                                                fec = DateTime.Now,
                                                nit = idtercero,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo)
                                            };
                                            decimal ivaLista = Convert.ToDecimal(Listareferenciasadd[j].iva, Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Listareferenciasadd[j].tipotarifa);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            lineas.vendedor = eg.vendedor;

                                            context.lineas_documento.Add(lineas);
                                            context.SaveChanges();
                                            if (doc_interno.doc_interno_asociado != null && documentointerno != 0)
                                            {
                                                lineas_documento lineas2 = new lineas_documento
                                                {
                                                    id_encabezado = documentointerno,
                                                    codigo = lineas.codigo,
                                                    seq = lineas.seq,
                                                    fec = DateTime.Now,
                                                    nit = idtercero,
                                                    cantidad = lineas.cantidad,
                                                    porcentaje_iva = lineas.porcentaje_iva,
                                                    valor_unitario = lineas.valor_unitario,
                                                    porcentaje_descuento = lineas.porcentaje_descuento,
                                                    costo_unitario = lineas.costo_unitario,
                                                    bodega = lineas.bodega,
                                                    fec_creacion = lineas.fec_creacion,
                                                    userid_creacion = lineas.userid_creacion,
                                                    tasa = lineas.tasa,
                                                };

                                                context.lineas_documento.Add(lineas2);
                                            }
                                            #endregion

                                            //Referencias Inven

                                            #region referencias inven

                                            int anio = DateTime.Now.Year;
                                            int mes = DateTime.Now.Month;

                                            referencias_inven refin = new referencias_inven();

                                            referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                                x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);


                                            var entrada = false;
                                            if (doc_interno.doc_interno_asociado != null)
                                            {//calculo el comportamiento del documento interno asociado

                                                var docinternoaso = context.tp_doc_registros.Where(d => d.tpdoc_id == doc_interno.doc_interno_asociado.Value).FirstOrDefault();
                                                if (docinternoaso.entrada_salida != null)
                                                {
                                                    entrada = docinternoaso.entrada_salida.Value;
                                                }
                                            }


                                            if (existencia != null)
                                            {
                                                if (entrada == false)
                                                {
                                                    existencia.codigo = codigo;
                                                    existencia.can_sal += Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    existencia.cos_sal +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.can_vta += Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    existencia.cos_vta +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.val_vta += baseUnitario;
                                                }
                                                else
                                                {
                                                    existencia.can_ent =
                                        existencia.can_ent + Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    existencia.cos_ent =
                                                        existencia.cos_ent +
                                                        valorReferencia * Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    existencia.can_tra =
                                                        existencia.can_tra + Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    existencia.cos_tra =
                                                        existencia.cos_tra +
                                                        valorReferencia * Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                }
                                                context.Entry(existencia).State = EntityState.Modified;
                                            }
                                            else
                                            {
                                                refin.bodega = bodega;
                                                refin.codigo = codigo;

                                                refin.ano = Convert.ToInt16(DateTime.Now.Year);
                                                refin.mes = Convert.ToInt16(DateTime.Now.Month);
                                                if (entrada == false)
                                                {
                                                    refin.can_sal = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    refin.cos_sal =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.can_vta = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    refin.cos_vta =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.val_vta = baseUnitario;
                                                }
                                                else
                                                {
                                                    refin.can_ent = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    refin.cos_ent =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.can_com = Convert.ToDecimal(Listareferenciasadd[j].cantidad, Cultureinfo);
                                                    refin.cos_com =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.val_vta = baseUnitario;
                                                }

                                                refin.modulo = "R";
                                                context.referencias_inven.Add(refin);

                                            }

                                            #endregion

                                            //Mov Contable (IVA, Inventario, Costo, Ingreso)

                                            #region Mov Contable (IVA, Inventario, Costo, Ingreso)

                                            foreach (var parametro in parametrosCuentasVerificar)
                                            {
                                                string descripcionParametro = context.paramcontablenombres
                                                    .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                                    .descripcion_parametro;
                                                cuenta_puc buscarCuenta =
                                                    context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                                if (buscarCuenta != null)
                                                {
                                                    if (parametro.id_nombre_parametro == 2 &&
                                                        Convert.ToDecimal(ivaEncabezado, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 9 &&
                                                        Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                        || parametro.id_nombre_parametro == 20 &&
                                                        Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                        || parametro.id_nombre_parametro == 11 &&
                                                        Convert.ToDecimal(costoEncabezado, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 12 &&
                                                        Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0) //costo promedio
                                                    {
                                                        mov_contable movNuevo = new mov_contable
                                                        {
                                                            id_encab = encabezado.idencabezado,
                                                            seq = secuencia,
                                                            idparametronombre = parametro.id_nombre_parametro,
                                                            cuenta = parametro.cuenta,
                                                            centro = Listareferenciasadd[j].tipotarifa == 2
                                                                ? parametro.id_nombre_parametro == 11
                                                                    ? Convert.ToInt32(Listareferenciasadd[j].idcentro)
                                                                    : parametro.id_nombre_parametro == 12
                                                                        ? Convert.ToInt32(Listareferenciasadd[j].idcentro)
                                                                        : parametro.centro
                                                                : parametro.centro,
                                                            fec = DateTime.Now,
                                                            fec_creacion = DateTime.Now,
                                                            tipo_tarifa =
                                                                Convert.ToInt32(Listareferenciasadd[j].tipotarifa),
                                                            userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]),
                                                            documento = Convert.ToString(modelo.pedido)
                                                        };

                                                        cuenta_puc info = context.cuenta_puc
                                                            .Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

                                                        if (info.tercero)
                                                        {
                                                            movNuevo.nit = idtercero;
                                                        }
                                                        else
                                                        {
                                                            icb_terceros tercero = context.icb_terceros
                                                                .Where(t => t.doc_tercero == "0").FirstOrDefault();
                                                            movNuevo.nit = tercero.tercero_id;
                                                        }

                                                        #region IVA

                                                        if (parametro.id_nombre_parametro == 2)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaIva = pcr.cuenta_dev_iva_compras;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region si tiene perfil y cuenta asignada a ese perfil

                                                                if (cuentaIva != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaIva);
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaIva)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    // context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region si tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                                                                {

                                                                }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarIVA = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == id_encabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarIVA != null)
                                                            {
                                                                buscarIVA.debito += movNuevo.debito;
                                                                buscarIVA.debitoniif += movNuevo.debitoniif;
                                                                buscarIVA.credito += movNuevo.credito;
                                                                buscarIVA.creditoniif += movNuevo.creditoniif;
                                                                buscarIVA.basecontable += movNuevo.basecontable;
                                                                context.Entry(buscarIVA).State = EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro = parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        #region Inventario

                                                        if (parametro.id_nombre_parametro == 9 ||
                                                            parametro.id_nombre_parametro == 20)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaInven = pcr.cta_inventario;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaInven != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaInven);
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaInven)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(0, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                                                                {

                                                                }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion


                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro = parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();

                                                        }

                                                        #endregion

                                                        #region Ingreso

                                                        bool siva = Listareferenciasadd[j].tipotarifa == 2;

                                                        if (parametro.id_nombre_parametro == 11 && siva != true)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaVenta = pcr.cuenta_ventas;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaVenta != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
                                                                    movNuevo.centro =
                                                                        Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                 Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaVenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro =
                                                                       Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                  Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = Listareferenciasadd[j].tipotarifa == 2
                                                                    ? parametro.id_nombre_parametro == 11
                                                                        ? Convert.ToInt32(Listareferenciasadd[j].idcentro)
                                                                        : parametro.centro
                                                                    : parametro.centro;
                                                                ;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                                                                {

                                                                }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarVenta = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == id_encabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarVenta != null)
                                                            {
                                                                buscarVenta.basecontable += movNuevo.basecontable;
                                                                buscarVenta.debito += movNuevo.debito;
                                                                buscarVenta.debitoniif += movNuevo.debitoniif;
                                                                buscarVenta.credito += movNuevo.credito;
                                                                buscarVenta.creditoniif += movNuevo.creditoniif;
                                                                context.Entry(buscarVenta).State = EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro =
                                                                        Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                   Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        #region Costo

                                                        if (parametro.id_nombre_parametro == 12)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaCosto = pcr.cuenta_costo;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaCosto != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
                                                                    movNuevo.centro =
                                                                        Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                   Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaCosto)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro =
                                                                       Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = Listareferenciasadd[j].tipotarifa == 2
                                                                    ? parametro.id_nombre_parametro == 12
                                                                        ? Convert.ToInt32(Listareferenciasadd[j].idcentro)
                                                                        : parametro.centro
                                                                    : parametro.centro;
                                                                ;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                                                                {

                                                                }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarCosto = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == id_encabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarCosto != null)
                                                            {
                                                                buscarCosto.basecontable += movNuevo.basecontable;
                                                                buscarCosto.debito += movNuevo.debito;
                                                                buscarCosto.debitoniif += movNuevo.debitoniif;
                                                                buscarCosto.credito += movNuevo.credito;
                                                                buscarCosto.creditoniif += movNuevo.creditoniif;
                                                                context.Entry(buscarCosto).State = EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro =
                                                                        Listareferenciasadd[j].tipotarifa == 2
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                   Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                            : parametro.centro
                                                                };
                                                                ;
                                                                crearMovContable.nit = encabezado.nit;
                                                                crearMovContable.fec = DateTime.Now;
                                                                crearMovContable.debito = movNuevo.debito;
                                                                crearMovContable.debitoniif = movNuevo.debitoniif;
                                                                crearMovContable.basecontable = movNuevo.basecontable;
                                                                crearMovContable.credito = movNuevo.credito;
                                                                crearMovContable.creditoniif = movNuevo.creditoniif;
                                                                crearMovContable.fec_creacion = DateTime.Now;
                                                                crearMovContable.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                crearMovContable.detalle =
                                                                    "Facturacion de repuestos con consecutivo " + eg.numero;
                                                                crearMovContable.estado = true;
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        secuencia++;
                                                        //Cuentas valores
                                                        var centrocosto = Listareferenciasadd[j].tipotarifa == 2
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                               Listareferenciasadd[j].idcentro)
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                        #region Cuentas valores
                                                        DateTime fechaHoy = DateTime.Now;
                                                        cuentas_valores buscar_cuentas_valores =
                                                        context.cuentas_valores.FirstOrDefault(x =>
                                                            x.centro == centrocosto &&
                                                            x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit && x.ano == fechaHoy.Year && x.mes == fechaHoy.Month);
                                                        if (buscar_cuentas_valores != null)
                                                        {
                                                            buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
                                                            buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
                                                            buscar_cuentas_valores.debitoniff +=
                                                                Math.Round(movNuevo.debitoniif);
                                                            buscar_cuentas_valores.creditoniff +=
                                                                Math.Round(movNuevo.creditoniif);
                                                            context.Entry(buscar_cuentas_valores).State =
                                                                EntityState.Modified;
                                                            //context.SaveChanges();
                                                        }
                                                        else
                                                        {

                                                            cuentas_valores crearCuentaValor = new cuentas_valores
                                                            {
                                                                ano = fechaHoy.Year,
                                                                mes = fechaHoy.Month,
                                                                cuenta = movNuevo.cuenta,
                                                                centro =
                                                                   Listareferenciasadd[j].tipotarifa == 2
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                               Listareferenciasadd[j].idcentro)
                                                                            : parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                             Listareferenciasadd[j].idcentro)
                                                                                : parametro.centro
                                                                        : parametro.centro,
                                                                nit = movNuevo.nit,
                                                                debito = Math.Round(movNuevo.debito),
                                                                credito = Math.Round(movNuevo.credito),
                                                                debitoniff = Math.Round(movNuevo.debitoniif),
                                                                creditoniff = Math.Round(movNuevo.creditoniif)
                                                            };
                                                            context.cuentas_valores.Add(crearCuentaValor);
                                                            context.SaveChanges();
                                                        }

                                                        #endregion

                                                        totalCreditos += Math.Round(movNuevo.credito);
                                                        totalDebitos += Math.Round(movNuevo.debito);
                                                        listaDescuadrados.Add(new DocumentoDescuadradoModel
                                                        {
                                                            NumeroCuenta =
                                                                "(" + buscarCuenta.cntpuc_numero + ")" +
                                                                buscarCuenta.cntpuc_descp,
                                                            DescripcionParametro = descripcionParametro,
                                                            ValorDebito = movNuevo.debito,
                                                            ValorCredito = movNuevo.credito
                                                        });
                                                    }
                                                }
                                            }




                                            #endregion
                                        } //fin de si no es nulo o en blanco


                                    }


                                    #region validaciones para guardar

                                    if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                    {
                                        TempData["documento_descuadrado"] =
                                            "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                        ViewBag.documentoSeleccionado = encabezado.tipo;
                                        ViewBag.bodegaSeleccionado = encabezado.bodega;
                                        ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                        ViewBag.documentoDescuadrado = listaDescuadrados;
                                        ViewBag.calculoDebito = totalDebitos;
                                        ViewBag.calculoCredito = totalCreditos;
                                        int bodegaLog2_ = Convert.ToInt32(Session["user_bodega"]);
                                        var buscarCentro2_ = context.centro_costo.Where(x => x.bodega == bodegaLog2_).Select(
                                            x => new
                                            {
                                                value = x.centcst_id,
                                                text = x.pre_centcst + " - " + x.centcst_nombre
                                            }).ToList();

                                        ViewBag.centro = new SelectList(buscarCentro2_, "value", "text");

                                        dbTran.Rollback();
                                        listas2(modelo);
                                        BuscarFavoritos(menu);
                                        return View(modelo);
                                        //return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
                                    }
                                    else
                                    {
                                        //por aqui todo bien para que haga el commit más abajo
                                        confirmar = 1;
                                    }

                                    funciono = 1;

                                    #endregion

                                    #region Eventos del vehiculo

                                    icb_sysparameter buscarParametroEventoFact =
                                        context.icb_sysparameter.FirstOrDefault(x => x.syspar_cod == "P136");
                                    string eventoFacturacionParametro = buscarParametroEventoFact != null
                                        ? buscarParametroEventoFact.syspar_value
                                        : "1062";
                                    int idEventoFacturacion = Convert.ToInt32(eventoFacturacionParametro);
                                    int idEvento = context.icb_tpeventos.Where(x => x.codigoevento == idEventoFacturacion)
                                        .FirstOrDefault().tpevento_id;
                                    vpedido pedidoVH = context.vpedido.Where(x => x.id == idpedido).FirstOrDefault();
                                    // Se agrega la trazabilidad del vehiculo nuevo, en este caso lo primero es facturacion
                                    context.icb_vehiculo_eventos.Add(new icb_vehiculo_eventos
                                    {
                                        evento_estado = true,
                                        eventofec_creacion = DateTime.Now,
                                        fechaevento = DateTime.Now,
                                        eventouserid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                        evento_nombre = "Facturacion Accesorios",
                                        id_tpevento = idEvento,
                                        bodega_id = modelo.bodega,
                                        //vin = vehiculo.vin,
                                        planmayor = pedidoVH.planmayor
                                    });
                                    int guardarVehEventos = context.SaveChanges();

                                    #endregion

                                    if (funciono > 0)
                                    {
                                        context.SaveChanges();
                                        if (id_encabezado > 0)
                                        {
                                            //creo el registro en tabla para imprimir el documento
                                            log_impresion_documentos noti = new log_impresion_documentos
                                            {
                                                idencabezado = id_encabezado,
                                                impreso = false,
                                                fecha_impresion = DateTime.Now
                                            };
                                            context.log_impresion_documentos.Add(noti);
                                            context.SaveChanges();
                                        }


                                        mensaje = mensaje + "1";

                                        DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                        doc.ActualizarConsecutivo(grupo.grupo, consecutivo);

                                        if (documentointerno != 0)
                                        {
                                            doc.ActualizarConsecutivo(grupo2.grupo, consecutivo2);

                                        }

                                    }
                                }
                                else
                                {
                                    TempData["mensaje_error"] = "no hay consecutivo";
                                }
                            } //cierre
                            else
                            {
                                TempData["mensaje_error"] = "Lista vacia";
                            }



                        }
                        if (listasnum > 0)
                        {
                            int tipotarifa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P147").Select(z => z.syspar_value).FirstOrDefault());
                            var repuestosped = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.tipotarifa == tipotarifa && x.estado == true).ToList();

                            int empresa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P33").Select(z => z.syspar_value).FirstOrDefault());
                            try
                            {
                                if (repuestosped.Count > 0)
                                {
                                    int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());
                                    int documento = context.tp_doc_registros.Where(x => x.tp_doc_sw.sw == swclasifica).Select(e => e.tpdoc_id).FirstOrDefault();
                                    grupoconsecutivos grupointerrep = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == documento && x.bodega_id == modelo.bodega);
                                    DocumentoPorBodegaController docinterrep = new DocumentoPorBodegaController();
                                    long consecutivointerrep = docinterrep.BuscarConsecutivo(grupointerrep.grupo);

                                    encab_documento docencabezado = new encab_documento();

                                    docencabezado.tipo = documento;
                                    docencabezado.numero = consecutivointerrep;
                                    docencabezado.fecha = DateTime.Now;
                                    docencabezado.nit = empresa;
                                    docencabezado.bodega = Convert.ToInt32(modelo.bodega);
                                    docencabezado.fec_creacion = DateTime.Now;
                                    docencabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    docencabezado.valor_total = Convert.ToDecimal(Request["valorFinal"],Cultureinfo);
                                    docencabezado.impoconsumo = 0;
                                    docencabezado.anulado = false;
                                    docencabezado.id_pedido_vehiculo = idpedido;
                                    docencabezado.estado = true;

                                    context.encab_documento.Add(docencabezado);
                                    context.SaveChanges();
                                    id_encabezado = docencabezado.idencabezado;
                                    foreach (var item in repuestosped)
                                    {

                                        lineas_documento linea_doc_rep = new lineas_documento
                                        {
                                            id_encabezado = docencabezado.idencabezado,
                                            codigo = item.referencia,

                                            fec = DateTime.Now,
                                            nit = Convert.ToInt32(item.vpedido.nit),
                                            cantidad = Convert.ToInt32(item.cantidad),
                                            porcentaje_iva = 0,
                                            valor_unitario = Convert.ToDecimal(item.vrunitario, Cultureinfo),
                                            porcentaje_descuento = float.Parse("0"),
                                            costo_unitario = item.icb_referencia.costo_unitario,
                                            bodega = item.vpedido.bodega,
                                            cantidad_und = 0,
                                            cantidad_pedida = 0,
                                            costo_unitario_sin = 0,
                                            cantidad_devuelta = 0,
                                            fec_creacion = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                            estado = true,
                                            costo_niff = 0,
                                            id_tarifa_cliente = tipotarifa
                                        };
                                        context.lineas_documento.Add(linea_doc_rep);
                                        context.SaveChanges();
                                    }
                                    vpedido pedi = context.vpedido.Where(x => x.id == idpedido).FirstOrDefault();
                                    pedi.tienedocumento = true;
                                    context.Entry(pedi).State = EntityState.Modified;
                                    var guardarx=context.SaveChanges();

                                    if (guardarx > 0)
                                    {
                                        docinterrep.ActualizarConsecutivo(grupointerrep.grupo, consecutivointerrep);
                                    }
                                    mensaje = mensaje + "2";

                                    CsMovientoCont MovConttOperaciones = new CsMovientoCont();
                                    int user_id = Convert.ToInt32(Session["user_usuarioid"]);
                                    int numped = Convert.ToInt32(modelo.pedido);
                                    int bodega = Convert.ToInt32(modelo.bodega);

                                    var perfilcont = context.perfil_contable_bodega.Where(x => x.perfil_contable_documento.tp_doc_registros.tp_doc_sw.sw == swclasifica && x.idbodega == bodega).FirstOrDefault();
                                    int perfilcontable = perfilcont != null ? Convert.ToInt32(perfilcont.idperfil) : 0;
                                    var respuesta2 = MovConttOperaciones.MovContableRepuestoIntFactBach(perfilcontable, docencabezado.idencabezado, docencabezado.numero, docencabezado.nit, numped, user_id);
                                    if (respuesta2.valido == true)
                                    {
                                        //guardo cada uno de los movimientos contables en un foreach
                                        foreach (var item in respuesta2.movimientos)
                                        {
                                            var movimiento = new mov_contable();
                                            movimiento.id_encab = item.id_encab;
                                            movimiento.seq = item.seq;
                                            movimiento.idparametronombre = item.idparametronombre;
                                            movimiento.cuenta = item.cuenta;
                                            movimiento.tipo_tarifa = item.tipo_tarifa;
                                            movimiento.centro = item.centro;
                                            movimiento.basecontable = item.basecontable;
                                            movimiento.fec = item.fec;
                                            movimiento.fec_creacion = item.fec_creacion;
                                            movimiento.tipo_tarifa = item.tipo_tarifa;
                                            movimiento.userid_creacion = item.userid_creacion;
                                            movimiento.documento = item.documento;
                                            movimiento.nit = item.nit;
                                            movimiento.basecontable = item.basecontable;
                                            movimiento.credito = item.credito;
                                            movimiento.creditoniif = item.creditoniif;
                                            movimiento.debito = item.debito;
                                            movimiento.debitoniif = item.debitoniif;
                                            movimiento.estado = item.estado;
                                            context.mov_contable.Add(movimiento);
                                            context.SaveChanges();


                                            #region Cuentas valores
                                            DateTime fechaHoy = DateTime.Now;
                                            var centrocosto = Convert.ToInt32(item.centro);
                                            cuentas_valores buscar_cuentas_valores =
                                                context.cuentas_valores.FirstOrDefault(x =>
                                                    x.centro == item.centro &&
                                                    x.cuenta == item.cuenta && x.nit == item.nit && x.ano == fechaHoy.Year && x.mes == fechaHoy.Month);
                                            if (buscar_cuentas_valores != null)
                                            {
                                                buscar_cuentas_valores.debito += Math.Round(item.debito);
                                                buscar_cuentas_valores.credito += Math.Round(item.credito);
                                                buscar_cuentas_valores.debitoniff +=
                                                    Math.Round(item.debitoniif);
                                                buscar_cuentas_valores.creditoniff +=
                                                    Math.Round(item.creditoniif);
                                                context.Entry(buscar_cuentas_valores).State =
                                                    EntityState.Modified;
                                            }
                                            else
                                            {
                                                cuentas_valores crearCuentaValor = new cuentas_valores
                                                {
                                                    ano = fechaHoy.Year,
                                                    mes = fechaHoy.Month,
                                                    cuenta = item.cuenta,
                                                    centro = item.centro,
                                                    nit = item.nit,
                                                    debito = Math.Round(item.debito),
                                                    credito = Math.Round(item.credito),
                                                    debitoniff = Math.Round(item.debitoniif),
                                                    creditoniff = Math.Round(item.creditoniif)
                                                };


                                                context.cuentas_valores.Add(crearCuentaValor);
                                                context.SaveChanges();
                                            }


                                           


                                            #endregion


                                        }
                                        //  verifico cuentas valores y los guardo

                                        //guardo los movimientos contables y commit
                                        confirmar = 1;
                                    }



                                  
                                    }




                                }
                            catch (Exception ex)
                            {
                                confirmar = 0;
                                TempData["mensaje_error"]=ex.Message;
                            }


                        }
                        if (id_encabezado > 0)
                        {
                            //creo el registro en tabla para imprimir el documento
                            log_impresion_documentos noti = new log_impresion_documentos
                            {
                                idencabezado = id_encabezado,
                                impreso = false
                            };
                            context.log_impresion_documentos.Add(noti);
                            context.SaveChanges();
                        }

                        if (confirmar == 1)
                        {
                            dbTran.Commit();
                        }

                        int bodegaLog2 = Convert.ToInt32(Session["user_bodega"]);
                        var buscarCentro2 = context.centro_costo.Where(x => x.bodega == bodegaLog2).Select(
                            x => new
                            {
                                value = x.centcst_id,
                                text = x.pre_centcst + " - " + x.centcst_nombre
                            }).ToList();

                        ViewBag.centro = new SelectList(buscarCentro2, "value", "text");
                        listas2(modelo);
                        if (mensaje == "01")
                        {
                            TempData["mensaje"] = "se ha creado con exito  la factura";
                        }
                        else if (mensaje == "02")
                        {
                            TempData["mensaje"] = "el documento interno se ha creado con exito";

                        }
                        else if (mensaje == "012")
                        {

                            TempData["mensaje"] = "se ha creado con exito la factura junto con un documento interno ";

                        }


                        //codifica el idencabezado en base64 con algo, no se.
                        string stringencabezado = id_encabezado.ToString();
                        byte[] en2 = Encoding.UTF8.GetBytes(stringencabezado);
                        string en = Convert.ToBase64String(en2);
                        return RedirectToAction("FacturacionRepuestosBackOffice", "FacturacionRepuestos",
                            new { menu, en });



                    }
                    catch (DbEntityValidationException)
                    {
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible guardar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }

            listas2(modelo);
            BuscarFavoritos(menu);
            int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
            var buscarCentro = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
            {
                value = x.centcst_id,
                text = x.pre_centcst + " - " + x.centcst_nombre
            }).ToList();
            var tarifafa = context.rtipocliente.OrderBy(x => x.id).ToList();
            ViewBag.tarifa_referencia_und2 = new SelectList(tarifafa, "id", "descripcion");
            ViewBag.centro = new SelectList(buscarCentro, "value", "text");

            return RedirectToAction("FacturacionRepuestosBackOffice", "FacturacionRepuestos", new { menu });
        }



        public ActionResult FacturacionRepuestosBackOfficeviejo3(NotasContablesModel modelo, int? menu)
        {
            int documentointerno = 0;
            grupoconsecutivos grupo2 = new grupoconsecutivos();
            long consecutivo2 = 0;
            var provedores = from pro in context.tercero_cliente
                             join ter in context.icb_terceros
                                 on pro.tercero_id equals ter.tercero_id
                             where pro.tercero_id == modelo.nit
                             select new
                             {
                                 value = ter.tercero_id,
                                 text = "(" + ter.doc_tercero + ") -" + ter.prinom_tercero + " " + ter.segnom_tercero + " " +
                                        ter.apellido_tercero + " " + ter.segapellido_tercero,
                                 razonSocial = ter.razon_social
                             };
            int id_encabezado = 0;
            ViewBag.cliente = new SelectList(provedores, "value", "text");
            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;

                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == modelo.perfilcontable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();
                        int secuencia = 1;
                        //decimal totalDebitos = 0;
                        //decimal totalCreditos = 0;
                        long? pedidoactual = modelo.pedido;
                        int idpedido = context.vpedido.Where(x => x.numero == pedidoactual).Select(z => z.id)
                            .FirstOrDefault();
                        int accesorios = Convert.ToInt32(Request["lista_referencias"]);


                        //    tarifa interna



                        for (int j = 0; j < accesorios; j++)
                        {
                            string referencia = Request["referencia" + j];
                            int cantidad = Convert.ToInt32(Request["cantidadReferencia" + j]);
                            vpedrepuestos existeref = context.vpedrepuestos.Where(x =>
                                x.pedido_id == idpedido && x.referencia == referencia && x.cantidad == cantidad &&
                                x.facturado == false && x.instalado == false).FirstOrDefault();
                            if (existeref != null)
                            {
                                context.vpedrepuestos.Remove(existeref);
                                context.SaveChanges();
                            }
                        }

                        for (int i = 0; i < accesorios; i++)
                        {
                            string referencia = Request["referencia" + i];
                            string cantidad = Request["cantidadReferencia" + i];
                            string valoru = Request["valorUnitarioReferencia" + i];
                            string valort = Request["valorTotalReferencia" + i];
                            if (accesorios != 0)
                            {
                                vpedrepuestos vrepuesto = new vpedrepuestos
                                {
                                    pedido_id = idpedido,
                                    referencia = referencia,
                                    vrunitario = Convert.ToDecimal(valoru, Cultureinfo),
                                    vrtotal = Convert.ToDecimal(valort, Cultureinfo),
                                    //vrepuesto.obsequio = Convert.ToBoolean(accesorio_item[3]);
                                    cantidad = Convert.ToInt32(cantidad)
                                };
                                //vrepuesto.obsequio = Convert.ToBoolean(Request["obsequio" + j]);
                                //vrepuesto.obsequio = Convert.ToBoolean(vrepuesto.obsequio == true ? "Si" : "No");
                                context.vpedrepuestos.Add(vrepuesto);
                            }
                        }

                        List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                        centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                        int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;

                        List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();

                        int costoLineas = Convert.ToInt32(Request["lista_referencias"]);
                        for (int i = 0; i <= costoLineas; i++)
                        {
                            if (!string.IsNullOrEmpty(Request["referencia" + i]))
                            {
                                int anio = DateTime.Now.Year;
                                int mes = DateTime.Now.Month;

                                string referencia = Request["referencia" + i];
                                vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                decimal? costoReferencia = vwPromedio.Promedio;

                                costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                      Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                            }
                        }

                        int bodega = Convert.ToInt32(Request["bodega"]);
                        string lista = Request["lista_referencias"];
                        if (!string.IsNullOrEmpty(lista))
                        {
                            int datos = Convert.ToInt32(lista);
                            decimal costoTotal =
                                Convert.ToDecimal(Request["valor_proveedor"], Cultureinfo); //costo con retenciones y fletes



                            decimal ivaEncabezado = Convert.ToDecimal(Request["valorIVA"], Cultureinfo); //valor total del iva
                            decimal descuentoEncabezado =
                                Convert.ToDecimal(Request["valorDes"], Cultureinfo); //valor total del descuento
                            decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos

                            decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                            //consecutivo
                            grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                x.documento_id == modelo.tipo && x.bodega_id == bodega);
                            if (grupo != null)
                            {
                                DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
                                long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                //Encabezado documento

                                #region encabezado

                                encab_documento encabezado = new encab_documento
                                {
                                    tipo = modelo.tipo,
                                    numero = consecutivo,
                                    nit = modelo.nit,
                                    fecha = DateTime.Now,
                                    id_pedido_vehiculo = idpedido
                                };
                                int? condicion = modelo.fpago_id;
                                encabezado.fpago_id = condicion;
                                if (modelo.centro == null)
                                {
                                    encabezado.centro_doc = 1;
                                }
                                else
                                {
                                    encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                }

                                int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                DateTime vencimiento = DateTime.Now.AddDays(dias);
                                encabezado.vencimiento = vencimiento;
                                encabezado.valor_total = costoTotal;
                                encabezado.iva = ivaEncabezado;
                                // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                #region calculo de retenciones

                                tp_doc_registros buscarTipoDocRegistro =
                                    context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == modelo.tipo);
                                tercero_proveedor buscarProveedor =
                                    context.tercero_proveedor.FirstOrDefault(x => x.tercero_id == modelo.nit);
                                int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id : 0;
                                perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                    x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                    x.tipo_regimenid == regimen_proveedor);

                                decimal retenciones = 0;

                                if (buscarPerfilTributario != null)
                                {
                                    if (buscarPerfilTributario.retfuente == "A" &&
                                        valor_totalenca >= buscarTipoDocRegistro.baseretencion)
                                    {
                                        encabezado.porcen_retencion = buscarTipoDocRegistro.retencion;
                                        encabezado.retencion =
                                            Math.Round(valor_totalenca *
                                                       Convert.ToDecimal(buscarTipoDocRegistro.retencion / 100, Cultureinfo));
                                        retenciones += encabezado.retencion;
                                    }

                                    if (buscarPerfilTributario.retiva == "A" &&
                                        ivaEncabezado >= buscarTipoDocRegistro.baseiva)
                                    {
                                        encabezado.porcen_reteiva = buscarTipoDocRegistro.retiva;
                                        encabezado.retencion_iva =
                                            Math.Round(encabezado.iva *
                                                       Convert.ToDecimal(buscarTipoDocRegistro.retiva / 100, Cultureinfo));
                                        retenciones += encabezado.retencion_iva;
                                    }

                                    if (buscarPerfilTributario.autorretencion == "A")
                                    {
                                        decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                        encabezado.porcen_autorretencion = (float)tercero_acteco;
                                        encabezado.retencion_causada =
                                            Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                        retenciones += encabezado.retencion_causada;
                                    }

                                    if (buscarPerfilTributario.retica == "A" &&
                                        valor_totalenca >= buscarTipoDocRegistro.baseica)
                                    {
                                        terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                            x.idcodica == buscarProveedor.acteco_id && x.bodega == bodega);
                                        decimal tercero_acteco = buscarProveedor.acteco_tercero.tarifa;
                                        if (bodega_acteco != null)
                                        {
                                            encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }

                                        if (tercero_acteco != 0)
                                        {
                                            encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(
                                                               buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }
                                        else
                                        {
                                            encabezado.porcen_retica = buscarTipoDocRegistro.retica;
                                            encabezado.retencion_ica =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                            retenciones += encabezado.retencion_ica;
                                        }
                                    }
                                }

                                #endregion

                                if (modelo.fletes != null)
                                {
                                    encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                    encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                }

                                encabezado.costo = costoPromedioTotal;
                                encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                encabezado.perfilcontable = Convert.ToInt32(Request["perfilcontable"]);
                                string pedido = Request["pedido"];
                                if (!string.IsNullOrEmpty(pedido))
                                {
                                    encabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                }

                                encabezado.bodega = bodega;
                                encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                if (Request["tasa"] != "")
                                {
                                    encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                }

                                encabezado.valor_mercancia = valor_totalenca;
                                encabezado.fec_creacion = DateTime.Now;
                                encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                encabezado.estado = true;
                                encabezado.concepto = modelo.concepto;
                                encabezado.concepto2 = modelo.concepto2;

                                context.encab_documento.Add(encabezado);
                                context.SaveChanges();

                                #endregion

                                id_encabezado = encabezado.idencabezado;
                                //veo si el documento externo tiene documento interno asociado
                                tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == modelo.tipo).FirstOrDefault();
                                //guardado de documento interno
                                if (doc_interno.doc_interno_asociado != null)
                                {
                                    //se consulta consecutivo de documento interno
                                    grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == modelo.bodega);
                                    if (grupo2 != null)
                                    {
                                        consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                        //calculo y guardo el encabezado del movimiento interno
                                        encab_documento encabezado2 = new encab_documento
                                        {
                                            tipo = doc_interno.doc_interno_asociado.Value,
                                            numero = consecutivo2,
                                            nit = encabezado.nit,
                                            fecha = DateTime.Now,
                                            fpago_id = encabezado.fpago_id,
                                            vencimiento = encabezado.vencimiento,
                                            valor_total = encabezado.valor_total,
                                            iva = encabezado.iva,
                                            porcen_retencion = encabezado.porcen_retencion,
                                            retencion = encabezado.retencion,
                                            porcen_reteiva = encabezado.porcen_reteiva,
                                            retencion_iva = encabezado.retencion_iva,
                                            porcen_retica = encabezado.porcen_retica,
                                            retencion_ica = encabezado.retencion_ica,
                                            fletes = encabezado.fletes,
                                            iva_fletes = encabezado.iva_fletes,
                                            costo = encabezado.costo,
                                            vendedor = encabezado.vendedor,
                                            documento = encabezado.documento,
                                            remision = encabezado.remision,
                                            bodega = encabezado.bodega,
                                            concepto = encabezado.concepto,
                                            moneda = encabezado.moneda,
                                            perfilcontable = encabezado.perfilcontable,
                                            valor_mercancia = encabezado.valor_mercancia,
                                            fec_creacion = encabezado.fec_creacion,
                                            userid_creacion = encabezado.userid_creacion,
                                            estado = true,
                                            concepto2 = encabezado.concepto2,
                                            id_movimiento_interno = encabezado.idencabezado,
                                        };
                                        context.encab_documento.Add(encabezado2);
                                        context.SaveChanges();
                                        documentointerno = encabezado2.idencabezado;
                                    }
                                }

                                encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == id_encabezado);

                                //Mov Contable

                                #region movimientos contables

                                //buscamos en perfil cuenta documento, por medio del perfil seleccionado

                                foreach (var parametro in parametrosCuentasVerificar)
                                {
                                    string descripcionParametro = context.paramcontablenombres
                                        .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                        .descripcion_parametro;
                                    cuenta_puc buscarCuenta =
                                        context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                    if (buscarCuenta != null)
                                    {
                                        if (parametro.id_nombre_parametro == 10 &&
                                            Convert.ToDecimal(valor_totalenca, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 3 &&
                                            Convert.ToDecimal(eg.retencion, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 4 &&
                                            Convert.ToDecimal(eg.retencion_iva, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 5 &&
                                            Convert.ToDecimal(eg.retencion_ica, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 6 && Convert.ToDecimal(eg.fletes, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 14 &&
                                            Convert.ToDecimal(eg.iva_fletes, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 17 &&
                                            Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0
                                            || parametro.id_nombre_parametro == 18 &&
                                            Convert.ToDecimal(eg.retencion_causada, Cultureinfo) != 0)
                                        {
                                            mov_contable movNuevo = new mov_contable
                                            {
                                                id_encab = eg.idencabezado,
                                                seq = secuencia,
                                                idparametronombre = parametro.id_nombre_parametro,
                                                cuenta = parametro.cuenta,
                                                centro = parametro.centro,
                                                fec = DateTime.Now,
                                                fec_creacion = DateTime.Now,
                                                userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                documento = Convert.ToString(modelo.pedido),
                                                detalle = "Facturacion de repuestos con consecutivo " + eg.numero,
                                                estado = true
                                            };

                                            cuenta_puc info = context.cuenta_puc.Where(a => a.cntpuc_id == parametro.cuenta)
                                                .FirstOrDefault();

                                            if (info.tercero)
                                            {
                                                movNuevo.nit = modelo.nit;
                                            }
                                            else
                                            {
                                                icb_terceros tercero = context.icb_terceros.Where(t => t.doc_tercero == "0")
                                                    .FirstOrDefault();
                                                movNuevo.nit = tercero.tercero_id;
                                            }

                                            // las siguientes validaciones se hacen dependiendo de la cuenta que esta moviendo la compra manual, para guardar la informacion acorde

                                            #region Cuentas X Cobrar

                                            if (parametro.id_nombre_parametro == 10)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = Convert.ToString(modelo.pedido);
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                }
                                            }

                                            #endregion

                                            #region Retencion

                                            if (parametro.id_nombre_parametro == 3)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion;
                                                }
                                            }

                                            #endregion

                                            #region ReteIVA

                                            if (parametro.id_nombre_parametro == 4)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(ivaEncabezado, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_iva;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_iva;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_iva;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_iva;
                                                }
                                            }

                                            #endregion

                                            #region ReteICA

                                            if (parametro.id_nombre_parametro == 5)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_ica;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_ica;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_ica;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_ica;
                                                }
                                            }

                                            #endregion

                                            #region Fletes

                                            if (parametro.id_nombre_parametro == 6)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.fletes;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.fletes;
                                                    ;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.fletes;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            #region IVA fletes

                                            if (parametro.id_nombre_parametro == 14)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.iva_fletes;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.iva_fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.iva_fletes;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.iva_fletes;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            #region AutoRetencion Debito

                                            if (parametro.id_nombre_parametro == 17)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_causada;

                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_causada;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = 0;
                                                    movNuevo.debitoniif = eg.retencion_causada;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = 0;
                                                    movNuevo.debito = eg.retencion_causada;
                                                }
                                            }

                                            #endregion

                                            #region AutoRetencion Credito

                                            if (parametro.id_nombre_parametro == 18)
                                            {
                                                /*if (info.aplicaniff==true)
												{

												}*/

                                                if (info.manejabase)
                                                {
                                                    movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                }
                                                else
                                                {
                                                    movNuevo.basecontable = 0;
                                                }

                                                if (info.documeto)
                                                {
                                                    movNuevo.documento = modelo.documento;
                                                }

                                                if (buscarCuenta.concepniff == 1)
                                                {
                                                    movNuevo.credito = eg.retencion_causada;
                                                    movNuevo.debito = 0;

                                                    movNuevo.creditoniif = eg.retencion_causada;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 4)
                                                {
                                                    movNuevo.creditoniif = eg.retencion_causada;
                                                    movNuevo.debitoniif = 0;
                                                }

                                                if (buscarCuenta.concepniff == 5)
                                                {
                                                    movNuevo.credito = eg.retencion_causada;
                                                    movNuevo.debito = 0;
                                                }
                                            }

                                            #endregion

                                            context.mov_contable.Add(movNuevo);
                                            //context.SaveChanges();

                                            secuencia++;
                                            //Cuentas valores

                                            #region Cuentas valores

                                            cuentas_valores buscar_cuentas_valores = context.cuentas_valores.FirstOrDefault(x =>
                                                x.centro == parametro.centro && x.cuenta == parametro.cuenta &&
                                                x.nit == movNuevo.nit);
                                            if (buscar_cuentas_valores != null)
                                            {
                                                buscar_cuentas_valores.debito += movNuevo.debito;
                                                buscar_cuentas_valores.credito += movNuevo.credito;
                                                buscar_cuentas_valores.debitoniff += movNuevo.debitoniif;
                                                buscar_cuentas_valores.creditoniff += movNuevo.creditoniif;
                                                context.Entry(buscar_cuentas_valores).State = EntityState.Modified;
                                            }
                                            else
                                            {
                                                DateTime fechaHoy = DateTime.Now;
                                                cuentas_valores crearCuentaValor = new cuentas_valores
                                                {
                                                    ano = fechaHoy.Year,
                                                    mes = fechaHoy.Month,
                                                    cuenta = movNuevo.cuenta,
                                                    centro = movNuevo.centro,
                                                    nit = movNuevo.nit,
                                                    debito = movNuevo.debito,
                                                    credito = movNuevo.credito,
                                                    debitoniff = movNuevo.debitoniif,
                                                    creditoniff = movNuevo.creditoniif
                                                };
                                                context.cuentas_valores.Add(crearCuentaValor);
                                                //context.SaveChanges();
                                            }

                                            #endregion

                                            totalCreditos += movNuevo.credito;
                                            totalDebitos += movNuevo.debito;
                                            listaDescuadrados.Add(new DocumentoDescuadradoModel
                                            {
                                                NumeroCuenta =
                                                    "(" + buscarCuenta.cntpuc_numero + ")" + buscarCuenta.cntpuc_descp,
                                                DescripcionParametro = descripcionParametro,
                                                ValorDebito = movNuevo.debito,
                                                ValorCredito = movNuevo.credito
                                            });
                                        }
                                    }
                                }

                                #endregion

                                //Lineas documento

                                #region lineasDocumento

                                List<mov_contable> listaMov = new List<mov_contable>();
                                int listaLineas = Convert.ToInt32(Request["lista_referencias"]);
                                for (int i = 0; i <= listaLineas; i++)
                                    if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                    {
                                        decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                            ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                            : 0;

                                        string codigo = Request["referencia" + i];
                                        decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                        decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                        decimal descontar = porDescuento / 100;
                                        decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                        decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                        decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                        decimal ivaReferencia =
                                            Math.Round(final * porIVAReferencia *
                                                       Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                        icb_referencia unidadCodigo =
                                            context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                        string und = unidadCodigo.unidad_medida;

                                        vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                            x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                            x.mes == DateTime.Now.Month);
                                        decimal? costoReferencia = vwPromedio.Promedio;
                                        decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                        int numPedido = Convert.ToInt32(Request["pedido"]);
                                        int idPedido = context.vpedido.FirstOrDefault(x => x.numero == numPedido).id;
                                        //actualizo en vpedrepuesto la(s) referencia(s) que facture

                                        IQueryable<vpedrepuestos> accesoriosPedido = context.vpedrepuestos.Where(x =>
                                            x.pedido_id == idPedido && x.referencia == codigo);
                                        if (accesoriosPedido != null)
                                        {
                                            foreach (vpedrepuestos item in accesoriosPedido)
                                            {
                                                item.facturado = true;
                                                item.numfactura = Convert.ToInt32(eg.numero);
                                                item.idtipo = modelo.tipo;
                                                context.Entry(item).State = EntityState.Modified;
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                        {
                                            int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                            icb_referencia_movdetalle buscar_movimientoPedido =
                                                context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                    x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                            if (buscar_movimientoPedido != null)
                                            {
                                                if (buscar_movimientoPedido.refdet_saldo != null)
                                                {
                                                    buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                }
                                                else
                                                {
                                                    buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                }

                                                context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                            }
                                        }

                                        int tipo_tarifa = Convert.ToInt32(Request[""]);
                                        lineas_documento lineas = new lineas_documento
                                        {
                                            id_encabezado = id_encabezado,
                                            codigo = Request["referencia" + i],
                                            seq = i + 1,
                                            fec = DateTime.Now,
                                            nit = modelo.nit,
                                            und = Convert.ToString(und),
                                            cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)
                                        };
                                        decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                        lineas.porcentaje_iva = (float)ivaLista;
                                        lineas.valor_unitario = final;
                                        decimal descuento = porDescuento;
                                        lineas.porcentaje_descuento = (float)descuento;
                                        lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                        lineas.bodega = bodega;
                                        lineas.fec_creacion = DateTime.Now;
                                        lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                        lineas.estado = true;
                                        lineas.id_tarifa_cliente = Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]);
                                        lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                        if (Request["tasa"] != "")
                                        {
                                            lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                        }

                                        lineas.vendedor = eg.vendedor;

                                        context.lineas_documento.Add(lineas);
                                        context.SaveChanges();
                                        if (doc_interno.doc_interno_asociado != null && documentointerno != 0)
                                        {
                                            lineas_documento lineas2 = new lineas_documento
                                            {
                                                id_encabezado = documentointerno,
                                                codigo = lineas.codigo,
                                                seq = lineas.seq,
                                                fec = DateTime.Now,
                                                nit = lineas.nit,
                                                cantidad = lineas.cantidad,
                                                porcentaje_iva = lineas.porcentaje_iva,
                                                valor_unitario = lineas.valor_unitario,
                                                porcentaje_descuento = lineas.porcentaje_descuento,
                                                costo_unitario = lineas.costo_unitario,
                                                bodega = lineas.bodega,
                                                fec_creacion = lineas.fec_creacion,
                                                userid_creacion = lineas.userid_creacion,
                                                tasa = lineas.tasa,
                                            };

                                            context.lineas_documento.Add(lineas2);
                                        }
                                        #endregion

                                        //Referencias Inven

                                        #region referencias inven

                                        int anio = DateTime.Now.Year;
                                        int mes = DateTime.Now.Month;

                                        referencias_inven refin = new referencias_inven();

                                        referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                            x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);


                                        var entrada = false;
                                        if (doc_interno.doc_interno_asociado != null)
                                        {//calculo el comportamiento del documento interno asociado

                                            var docinternoaso = context.tp_doc_registros.Where(d => d.tpdoc_id == doc_interno.doc_interno_asociado.Value).FirstOrDefault();
                                            if (docinternoaso.entrada_salida != null)
                                            {
                                                entrada = docinternoaso.entrada_salida.Value;
                                            }
                                        }


                                        if (existencia != null)
                                        {
                                            if (entrada == false)
                                            {
                                                existencia.codigo = codigo;
                                                existencia.can_sal += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_sal +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.can_vta += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_vta +=
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                existencia.val_vta += baseUnitario;
                                            }
                                            else
                                            {
                                                existencia.can_ent =
                                    existencia.can_ent + Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_ent =
                                                    existencia.cos_ent +
                                                    valorReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.can_tra =
                                                    existencia.can_tra + Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                existencia.cos_tra =
                                                    existencia.cos_tra +
                                                    valorReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            }
                                            context.Entry(existencia).State = EntityState.Modified;
                                        }
                                        else
                                        {
                                            refin.bodega = bodega;
                                            refin.codigo = codigo;

                                            refin.ano = Convert.ToInt16(DateTime.Now.Year);
                                            refin.mes = Convert.ToInt16(DateTime.Now.Month);
                                            if (entrada == false)
                                            {
                                                refin.can_sal = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_sal =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.can_vta = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_vta =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.val_vta = baseUnitario;
                                            }
                                            else
                                            {
                                                refin.can_ent = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_ent =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.can_com = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                refin.cos_com =
                                                    Convert.ToDecimal(
                                                        cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                refin.val_vta = baseUnitario;
                                            }

                                            refin.modulo = "R";
                                            context.referencias_inven.Add(refin);

                                        }

                                        #endregion

                                        //Mov Contable (IVA, Inventario, Costo, Ingreso)

                                        #region Mov Contable (IVA, Inventario, Costo, Ingreso)

                                        foreach (var parametro in parametrosCuentasVerificar)
                                        {
                                            string descripcionParametro = context.paramcontablenombres
                                                .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                                .descripcion_parametro;
                                            cuenta_puc buscarCuenta =
                                                context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                            if (buscarCuenta != null)
                                            {
                                                if (parametro.id_nombre_parametro == 2 &&
                                                    Convert.ToDecimal(ivaEncabezado, Cultureinfo) != 0
                                                    || parametro.id_nombre_parametro == 9 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                    || parametro.id_nombre_parametro == 20 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0 //costo promedio
                                                    || parametro.id_nombre_parametro == 11 &&
                                                    Convert.ToDecimal(costoEncabezado, Cultureinfo) != 0
                                                    || parametro.id_nombre_parametro == 12 &&
                                                    Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0) //costo promedio
                                                {
                                                    mov_contable movNuevo = new mov_contable
                                                    {
                                                        id_encab = encabezado.idencabezado,
                                                        seq = secuencia,
                                                        idparametronombre = parametro.id_nombre_parametro,
                                                        cuenta = parametro.cuenta,
                                                        centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                            ? parametro.id_nombre_parametro == 11
                                                                ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                : parametro.id_nombre_parametro == 12
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                            : parametro.centro,
                                                        fec = DateTime.Now,
                                                        fec_creacion = DateTime.Now,
                                                        tipo_tarifa =
                                                            Convert.ToInt32(Request["tipo_tarifa_hidden_" + i]),
                                                        userid_creacion =
                                                            Convert.ToInt32(Session["user_usuarioid"]),
                                                        documento = Convert.ToString(modelo.pedido)
                                                    };

                                                    cuenta_puc info = context.cuenta_puc
                                                        .Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

                                                    if (info.tercero)
                                                    {
                                                        movNuevo.nit = modelo.nit;
                                                    }
                                                    else
                                                    {
                                                        icb_terceros tercero = context.icb_terceros
                                                            .Where(t => t.doc_tercero == "0").FirstOrDefault();
                                                        movNuevo.nit = tercero.tercero_id;
                                                    }

                                                    #region IVA

                                                    if (parametro.id_nombre_parametro == 2)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaIva = pcr.cuenta_dev_iva_compras;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region si tiene perfil y cuenta asignada a ese perfil

                                                            if (cuentaIva != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaIva);
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaIva)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                // context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region si tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarIVA = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarIVA != null)
                                                        {
                                                            buscarIVA.debito += movNuevo.debito;
                                                            buscarIVA.debitoniif += movNuevo.debitoniif;
                                                            buscarIVA.credito += movNuevo.credito;
                                                            buscarIVA.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarIVA).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro = parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Inventario

                                                    if (parametro.id_nombre_parametro == 9 ||
                                                        parametro.id_nombre_parametro == 20)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaInven = pcr.cta_inventario;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaInven != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaInven);
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaInven)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = parametro.centro;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarInventario = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarInventario != null)
                                                        {
                                                            buscarInventario.basecontable += movNuevo.basecontable;
                                                            buscarInventario.debito += movNuevo.debito;
                                                            buscarInventario.debitoniif += movNuevo.debitoniif;
                                                            buscarInventario.credito += movNuevo.credito;
                                                            buscarInventario.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarInventario).State =
                                                                EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro = parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Ingreso

                                                    bool siva = Request["tipo_tarifa_hidden_" + i] == "2";

                                                    if (parametro.id_nombre_parametro == 11 && siva != true)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaVenta = pcr.cuenta_ventas;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaVenta != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaVenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif =
                                                                        Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                                ? parametro.id_nombre_parametro == 11
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                                : parametro.centro;
                                                            ;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debito = 0;

                                                                movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debitoniif = 0;
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                movNuevo.debito = 0;
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarVenta = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarVenta != null)
                                                        {
                                                            buscarVenta.basecontable += movNuevo.basecontable;
                                                            buscarVenta.debito += movNuevo.debito;
                                                            buscarVenta.debitoniif += movNuevo.debitoniif;
                                                            buscarVenta.credito += movNuevo.credito;
                                                            buscarVenta.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarVenta).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro,
                                                                nit = encabezado.nit,
                                                                fec = DateTime.Now,
                                                                debito = movNuevo.debito,
                                                                debitoniif = movNuevo.debitoniif,
                                                                basecontable = movNuevo.basecontable,
                                                                credito = movNuevo.credito,
                                                                creditoniif = movNuevo.creditoniif,
                                                                fec_creacion = DateTime.Now,
                                                                userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]),
                                                                detalle =
                                                                    "Facturacion de repuestos con consecutivo " +
                                                                    eg.numero,
                                                                estado = true
                                                            };
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    #region Costo

                                                    if (parametro.id_nombre_parametro == 12)
                                                    {
                                                        icb_referencia perfilReferencia =
                                                            context.icb_referencia.FirstOrDefault(x =>
                                                                x.ref_codigo == lineas.codigo);
                                                        int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                        perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                            r.id == perfilBuscar);

                                                        #region Tiene perfil la referencia

                                                        if (pcr != null)
                                                        {
                                                            int? cuentaCosto = pcr.cuenta_costo;

                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                            #region tiene perfil y cuenta asignada al perfil

                                                            if (cuentaCosto != null)
                                                            {
                                                                movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == cuentaCosto)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            #region tiene perfil pero no tiene cuenta asignada

                                                            else
                                                            {
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                movNuevo.documento = Convert.ToString(eg.numero);

                                                                cuenta_puc infoReferencia = context.cuenta_puc
                                                                    .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                    .FirstOrDefault();
                                                                if (infoReferencia.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (infoReferencia.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (infoReferencia.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (infoReferencia.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion
                                                        }

                                                        #endregion

                                                        #region La referencia no tiene perfil

                                                        else
                                                        {
                                                            movNuevo.id_encab = encabezado.idencabezado;
                                                            movNuevo.seq = secuencia;
                                                            movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                            movNuevo.cuenta = parametro.cuenta;
                                                            movNuevo.centro = Request["tipo_tarifa_hidden_" + i] == "2"
                                                                ? parametro.id_nombre_parametro == 12
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.centro
                                                                : parametro.centro;
                                                            ;
                                                            movNuevo.fec = DateTime.Now;
                                                            movNuevo.fec_creacion = DateTime.Now;
                                                            movNuevo.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            /*if (info.aplicaniff==true)
															{

															}*/

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable =
                                                                    Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(eg.numero);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                            }

                                                            //context.mov_contable.Add(movNuevo);
                                                        }

                                                        #endregion

                                                        mov_contable buscarCosto = context.mov_contable.FirstOrDefault(x =>
                                                            x.id_encab == id_encabezado &&
                                                            x.cuenta == movNuevo.cuenta &&
                                                            x.idparametronombre == parametro.id_nombre_parametro);
                                                        if (buscarCosto != null)
                                                        {
                                                            buscarCosto.basecontable += movNuevo.basecontable;
                                                            buscarCosto.debito += movNuevo.debito;
                                                            buscarCosto.debitoniif += movNuevo.debitoniif;
                                                            buscarCosto.credito += movNuevo.credito;
                                                            buscarCosto.creditoniif += movNuevo.creditoniif;
                                                            context.Entry(buscarCosto).State = EntityState.Modified;
                                                        }
                                                        else
                                                        {
                                                            mov_contable crearMovContable = new mov_contable
                                                            {
                                                                id_encab = encabezado.idencabezado,
                                                                seq = secuencia,
                                                                idparametronombre =
                                                                    parametro.id_nombre_parametro,
                                                                cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                centro =
                                                                    Request["tipo_tarifa_hidden_" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                        : parametro.centro
                                                            };
                                                            ;
                                                            crearMovContable.nit = encabezado.nit;
                                                            crearMovContable.fec = DateTime.Now;
                                                            crearMovContable.debito = movNuevo.debito;
                                                            crearMovContable.debitoniif = movNuevo.debitoniif;
                                                            crearMovContable.basecontable = movNuevo.basecontable;
                                                            crearMovContable.credito = movNuevo.credito;
                                                            crearMovContable.creditoniif = movNuevo.creditoniif;
                                                            crearMovContable.fec_creacion = DateTime.Now;
                                                            crearMovContable.userid_creacion =
                                                                Convert.ToInt32(Session["user_usuarioid"]);
                                                            crearMovContable.detalle =
                                                                "Facturacion de repuestos con consecutivo " + eg.numero;
                                                            crearMovContable.estado = true;
                                                            context.mov_contable.Add(crearMovContable);
                                                            context.SaveChanges();
                                                        }
                                                    }

                                                    #endregion

                                                    secuencia++;
                                                    //Cuentas valores

                                                    #region Cuentas valores

                                                    cuentas_valores buscar_cuentas_valores =
                                                        context.cuentas_valores.FirstOrDefault(x =>
                                                            x.centro == parametro.centro &&
                                                            x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit);
                                                    if (buscar_cuentas_valores != null)
                                                    {
                                                        buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
                                                        buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
                                                        buscar_cuentas_valores.debitoniff +=
                                                            Math.Round(movNuevo.debitoniif);
                                                        buscar_cuentas_valores.creditoniff +=
                                                            Math.Round(movNuevo.creditoniif);
                                                        context.Entry(buscar_cuentas_valores).State =
                                                            EntityState.Modified;
                                                        //context.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        DateTime fechaHoy = DateTime.Now;
                                                        cuentas_valores crearCuentaValor = new cuentas_valores
                                                        {
                                                            ano = fechaHoy.Year,
                                                            mes = fechaHoy.Month,
                                                            cuenta = movNuevo.cuenta,
                                                            centro =
                                                                Request["tipo_tarifa_hidden_" + i] == "2"
                                                                    ? parametro.id_nombre_parametro == 11
                                                                        ? Convert.ToInt32(
                                                                            Request["centro_costo_tf" + i])
                                                                        : parametro.id_nombre_parametro == 12
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.centro
                                                                    : parametro.centro,
                                                            nit = movNuevo.nit,
                                                            debito = Math.Round(movNuevo.debito),
                                                            credito = Math.Round(movNuevo.credito),
                                                            debitoniff = Math.Round(movNuevo.debitoniif),
                                                            creditoniff = Math.Round(movNuevo.creditoniif)
                                                        };
                                                        context.cuentas_valores.Add(crearCuentaValor);
                                                        context.SaveChanges();
                                                    }

                                                    #endregion

                                                    totalCreditos += Math.Round(movNuevo.credito);
                                                    totalDebitos += Math.Round(movNuevo.debito);
                                                    listaDescuadrados.Add(new DocumentoDescuadradoModel
                                                    {
                                                        NumeroCuenta =
                                                            "(" + buscarCuenta.cntpuc_numero + ")" +
                                                            buscarCuenta.cntpuc_descp,
                                                        DescripcionParametro = descripcionParametro,
                                                        ValorDebito = movNuevo.debito,
                                                        ValorCredito = movNuevo.credito
                                                    });
                                                }
                                            }
                                        }

                                        #endregion
                                    }

                                #region validaciones para guardar

                                if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                {
                                    TempData["documento_descuadrado"] =
                                        "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                    ViewBag.documentoSeleccionado = encabezado.tipo;
                                    ViewBag.bodegaSeleccionado = encabezado.bodega;
                                    ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                    ViewBag.documentoDescuadrado = listaDescuadrados;
                                    ViewBag.calculoDebito = totalDebitos;
                                    ViewBag.calculoCredito = totalCreditos;
                                    int bodegaLog2 = Convert.ToInt32(Session["user_bodega"]);
                                    var buscarCentro2 = context.centro_costo.Where(x => x.bodega == bodegaLog2).Select(
                                        x => new
                                        {
                                            value = x.centcst_id,
                                            text = x.pre_centcst + " - " + x.centcst_nombre
                                        }).ToList();

                                    ViewBag.centro = new SelectList(buscarCentro2, "value", "text");

                                    dbTran.Rollback();
                                    listas2(modelo);
                                    BuscarFavoritos(menu);
                                    return View(modelo);
                                    //return RedirectToAction("Facturar", "FacturacionRepuestos", new { menu });
                                }

                                funciono = 1;

                                #endregion

                                #region Eventos del vehiculo

                                icb_sysparameter buscarParametroEventoFact =
                                    context.icb_sysparameter.FirstOrDefault(x => x.syspar_cod == "P136");
                                string eventoFacturacionParametro = buscarParametroEventoFact != null
                                    ? buscarParametroEventoFact.syspar_value
                                    : "1062";
                                int idEventoFacturacion = Convert.ToInt32(eventoFacturacionParametro);
                                int idEvento = context.icb_tpeventos.Where(x => x.codigoevento == idEventoFacturacion)
                                    .FirstOrDefault().tpevento_id;
                                vpedido pedidoVH = context.vpedido.Where(x => x.id == idpedido).FirstOrDefault();
                                // Se agrega la trazabilidad del vehiculo nuevo, en este caso lo primero es facturacion
                                context.icb_vehiculo_eventos.Add(new icb_vehiculo_eventos
                                {
                                    evento_estado = true,
                                    eventofec_creacion = DateTime.Now,
                                    fechaevento = DateTime.Now,
                                    eventouserid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                    evento_nombre = "Facturacion Accesorios",
                                    id_tpevento = idEvento,
                                    bodega_id = modelo.bodega,
                                    //vin = vehiculo.vin,
                                    planmayor = pedidoVH.planmayor
                                });
                                int guardarVehEventos = context.SaveChanges();

                                #endregion

                                if (funciono > 0)
                                {
                                    context.SaveChanges();
                                    if (id_encabezado > 0)
                                    {
                                        //creo el registro en tabla para imprimir el documento
                                        log_impresion_documentos noti = new log_impresion_documentos
                                        {
                                            idencabezado = id_encabezado,
                                            impreso = false
                                        };
                                        context.log_impresion_documentos.Add(noti);
                                        context.SaveChanges();
                                    }

                                    dbTran.Commit();

                                    TempData["mensaje"] = "Registro creado correctamente";
                                    DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                    doc.ActualizarConsecutivo(grupo.grupo, consecutivo);

                                    if (documentointerno != 0)
                                    {
                                        doc.ActualizarConsecutivo(grupo2.grupo, consecutivo2);

                                    }
                                    int bodegaLog2 = Convert.ToInt32(Session["user_bodega"]);
                                    var buscarCentro2 = context.centro_costo.Where(x => x.bodega == bodegaLog2).Select(
                                        x => new
                                        {
                                            value = x.centcst_id,
                                            text = x.pre_centcst + " - " + x.centcst_nombre
                                        }).ToList();

                                    ViewBag.centro = new SelectList(buscarCentro2, "value", "text");
                                    listas2(modelo);
                                    //codifica el idencabezado en base64 con algo, no se.
                                    string stringencabezado = id_encabezado.ToString();
                                    byte[] en2 = Encoding.UTF8.GetBytes(stringencabezado);
                                    string en = Convert.ToBase64String(en2);
                                    return RedirectToAction("FacturacionRepuestosBackOffice", "FacturacionRepuestos",
                                        new { menu, en });
                                }
                            }
                            else
                            {
                                TempData["mensaje_error"] = "no hay consecutivo";
                            }
                        }
                        //cierre
                        else
                        {
                            TempData["mensaje_error"] = "Lista vacia";
                        }
                    }
                    catch (DbEntityValidationException)
                    {
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible guardar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }

            listas2(modelo);
            BuscarFavoritos(menu);
            int bodegaLog = Convert.ToInt32(Session["user_bodega"]);
            var buscarCentro = context.centro_costo.Where(x => x.bodega == bodegaLog).Select(x => new
            {
                value = x.centcst_id,
                text = x.pre_centcst + " - " + x.centcst_nombre
            }).ToList();

            ViewBag.centro = new SelectList(buscarCentro, "value", "text");

            return RedirectToAction("FacturacionRepuestosBackOffice", "FacturacionRepuestos", new { menu });
        }


        public JsonResult CambiarEstadoobsequio(int id, int ccosto)
        {
            var vpedrepto = context.vpedrepuestos.Where(x => x.id == id).FirstOrDefault();

            vpedrepto.obsequio = true;
            vpedrepto.idcentro = ccosto;
            vpedrepto.tipotarifa = 2;
            vpedrepto.estado = true;
            context.Entry(vpedrepto).State = EntityState.Modified;
            context.SaveChanges();

            return Json(0);
        }


        public JsonResult Cambiartarifaped(int id, int tarifa)
        {

            vpedrepuestos pedrepuesto = context.vpedrepuestos.Where(x => x.id == id).FirstOrDefault();

            pedrepuesto.tipotarifa = tarifa;
            pedrepuesto.respuestaInterna = null;
            pedrepuesto.observacionresinterva = null;
            pedrepuesto.obsequio = false;
            context.Entry(pedrepuesto).State = EntityState.Modified;
            context.SaveChanges();
            return Json(0);
        }

        [HttpGet]
        public ActionResult motivoAnulacion(int? menu)
        {

            ViewBag.doccons_idtpdoc = context.tp_doc_registros.OrderBy(x => x.tpdoc_nombre).ToList();

            //ViewBag.doccons_idtpdoc = context.tp_doc_registros.Where(x => x.prefijo == "CR" || x.prefijo == "PR").OrderBy(x => x.tpdoc_nombre).ToList();
            //
            //busco el usuario
            int usuario = Convert.ToInt32(Session["user_usuarioid"]);
            //busco el rol del usuario
            int rol = Convert.ToInt32(Session["user_rolid"]);
            //busco la bodega del usuario
            int bodegaactual = Convert.ToInt32(Session["user_bodega"]);


            return View();
        }

        [HttpPost]
        public ActionResult motivoAnulacion()
        {

            string motivo = Request["motivo"];
            string fecha = Request["fecha"];
            string documentosSeleccionadas = Request["doccons_idtpdoc"];
            int idmotivo = 0;
            int resultado = 0;

            if (string.IsNullOrWhiteSpace(motivo))
            {
                TempData["mensaje_error"] = "Debe asignar un motivo!";
            }

            if (string.IsNullOrWhiteSpace(documentosSeleccionadas))
            {
                TempData["mensaje_error"] = "Debe asignar minimo un documento!";
            }

            if (!string.IsNullOrWhiteSpace(motivo) && !string.IsNullOrWhiteSpace(documentosSeleccionadas))
            {

                string[] documentosId = documentosSeleccionadas.Split(',');

                motivo_anulacion c = new motivo_anulacion();

                c.motivo = motivo;
                c.fecha = Convert.ToDateTime(fecha);

                context.motivo_anulacion.Add(c);
                context.SaveChanges();
                idmotivo = c.id;


                foreach (string substring in documentosId)
                {

                    detalle_anulacion t = new detalle_anulacion();

                    t.motivo = idmotivo;
                    t.documento = Convert.ToInt32(substring);

                    context.detalle_anulacion.Add(t);
                    context.SaveChanges();

                }//doc

                resultado = +1;

                if (resultado > 0)
                {
                    TempData["mensaje"] = "El registro fue exitoso!";
                }
                else
                {
                    TempData["mensaje_error"] = "El registro fue exitoso!";
                }

            }

            return RedirectToAction("motivoAnulacion", "FacturacionRepuestos");
        }

        [HttpGet]
        public ActionResult EditarMotivoAnulacion(int? id)
        {

            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            var detalle = (from d in context.detalle_anulacion
                           join m in context.motivo_anulacion on d.motivo equals m.id
                           where d.id == id
                           select new
                           {
                               iddetalle = d.id,
                               idmotivo = m.id,
                               m.motivo,
                               m.fecha,
                           }).FirstOrDefault();

            if (detalle == null)
            {
                return HttpNotFound();
            }

            //ViewBag.doccons_idtpdoc = context.tp_doc_registros.OrderBy(x => x.tpdoc_nombre).ToList();
            var detalleanulacion = (from d in context.detalle_anulacion
                           join m in context.motivo_anulacion on d.motivo equals m.id
                           where d.motivo == id
                                    select new
                               {
                               d.documento
                             
                               }).ToList();
            string docselect = "";
            bool primera = true;
            foreach (var  item in detalleanulacion)
                {
                if (primera)
                    {
                    docselect += item.documento;
                    primera = !primera;
                    }
                else
                    {
                    docselect += "," + item.documento;
                    }
                }

            var documento = context.tp_doc_registros.Select(x=> new { x.tpdoc_id, x.tpdoc_nombre }).OrderBy(x => x.tpdoc_nombre).ToList();
            ViewBag.doccons_idtpdoc = new SelectList(documento, "tpdoc_id", "tpdoc_nombre");
            ViewBag.documentosSelect = docselect;

            ViewBag.iddetalle = detalle.iddetalle;
            ViewBag.idmotivo = detalle.idmotivo;
            ViewBag.motivo = detalle.motivo;
            ViewBag.fecha = detalle.fecha.Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"));

            //busco el usuario
            int usuario = Convert.ToInt32(Session["user_usuarioid"]);
            //busco el rol del usuario
            int rol = Convert.ToInt32(Session["user_rolid"]);
            //busco la bodega del usuario
            int bodegaactual = Convert.ToInt32(Session["user_bodega"]);


            return View();
        }
        [HttpPost]
        public ActionResult EditarMotivoAnulacion()
        {

            string id_detalle = Request["iddetalle"];
            string id_motivo = Request["idmotivo"];

            int idmotivo = Convert.ToInt32(id_motivo);
            int? iddetalle = Convert.ToInt32(id_detalle);

            string motivo = Request["motivo"];
            string fecha = Request["fecha"];
            string documentosSeleccionadas = Request["doccons_idtpdoc"];
            //int idmotivo = 0;
            int resultado = 0;

            if (string.IsNullOrWhiteSpace(motivo))
            {
                TempData["mensaje_error"] = "Debe asignar un motivo!";
            }

            if (string.IsNullOrWhiteSpace(documentosSeleccionadas))
            {
                TempData["mensaje_error"] = "Debe asignar minimo un documento!";
            }

            if (!string.IsNullOrWhiteSpace(motivo) && !string.IsNullOrWhiteSpace(documentosSeleccionadas))
            {

                string[] documentosId = documentosSeleccionadas.Split(',');

                var c = context.motivo_anulacion.Find(idmotivo);

                c.motivo = motivo;
                c.fecha = Convert.ToDateTime(fecha);

                context.Entry(c).State = EntityState.Modified;
                context.SaveChanges();

                var temp = context.detalle_anulacion.Where(x => x.motivo == iddetalle).ToList();

                if (temp!=null)
                    {

                 
                foreach (var item in temp)
                    {
                    context.detalle_anulacion.Remove(item);
                    context.SaveChanges();
                    }
                    }
                foreach (string substring in documentosId)
                {


                    detalle_anulacion t = new detalle_anulacion();

                    t.motivo = iddetalle;
                    t.documento = Convert.ToInt32(substring);

                    context.detalle_anulacion.Add(t);
                    context.SaveChanges();
                    }//doc

                resultado = +1;

                if (resultado > 0)
                {
                    TempData["mensaje"] = "El registro fue exitoso!";
                }
                else
                {
                    TempData["mensaje_error"] = "El registro fue exitoso!";
                }

            }

            return RedirectToAction("motivoAnulacion", "FacturacionRepuestos");
        }

        public JsonResult busquedaMotivos(int? menu)
        {
            string draw = Request.Form.GetValues("draw").FirstOrDefault();
            string start = Request.Form.GetValues("start").FirstOrDefault();
            string length = Request.Form.GetValues("length").FirstOrDefault();
            string search = Request.Form.GetValues("search[value]").FirstOrDefault();
            //esto me sirve para reiniciar la consulta cuando ordeno las columnas de menor a mayor y que no me vuelva a recalcular todo
            //ES IMPORTANTE QUE LA COLUMNA EN EL DATATABLE TENGA EL NOMBRE DE LA TABLA O VISTA A CONSULTAR, porque vamos a usarla para ordenar.
            string sortColumn = Request.Form
                .GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]")
                .FirstOrDefault();
            string sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            search = search.Replace(" ", "");
            int pagina = Convert.ToInt32(start);
            int pageSize = Convert.ToInt32(length);

            int skip = 0;
            if (pagina == 0)
            {
                skip = 0;
            }
            else
            {
                skip = pagina;
            }

            int registrostotales = context.vw_motivosAnulacion.Count();

            if (pageSize == -1)
            {
                pageSize = registrostotales;
            }

            List<vw_motivosAnulacion> lista2 = new List<vw_motivosAnulacion>();


            if (sortColumnDir == "asc")
            {
                lista2 = context.vw_motivosAnulacion.ToList();
                //.OrderBy(GetColumnName3(sortColumn).Compile()).Skip(skip).Take(pageSize)
            }
            else
            {
                lista2 = context.vw_motivosAnulacion.ToList();
                //.OrderByDescending(GetColumnName3(sortColumn).Compile()).Skip(skip).Take(pageSize)
            }

            var lista = lista2.Select(x => new
            {

                x.id,
                motivo = x.motivo,
                fecha = x.fecha2,
                listadocumentos = x.listadocumentos,


            }).ToList();

            return Json(
                        new { draw, recordsFiltered = registrostotales, recordsTotal = registrostotales, data = lista },
                        JsonRequestBehavior.AllowGet);

        }

        public JsonResult buscarFacturasBackOffice()
        {
            if (Session["user_usuarioid"] != null)
            {
                int usuario = Convert.ToInt32(Session["user_usuarioid"]);
                //busco si hay una factura sin imprimir reciente
                log_impresion_documentos fact = context.log_impresion_documentos.OrderByDescending(d => d.encab_documento.fecha)
                    .Where(d => d.impreso == false && d.encab_documento.userid_creacion == usuario).FirstOrDefault();
                int encabezado = fact.idencabezado;
                if (fact != null)
                {
                    return Json(fact.idencabezado);
                }

                return Json(0);
            }

            return Json(0);
        }

        public JsonResult traerCupoCredito(int idEncabezado)
        {
            var facturaR = (from e in context.encab_documento
                            where e.idencabezado == idEncabezado
                            select new
                            {
                                e.idencabezado,
                                e.nit
                            }).FirstOrDefault();

            var tercero = (from t in context.tercero_cliente
                           where t.tercero_id == facturaR.nit
                           select new
                           {
                               t.cltercero_id,
                               cupocredito = t.cupocredito != null ? t.cupocredito : 0,
                           }).ToList();

            var data = tercero.Select(x => new
            {
                x.cltercero_id,
                x.cupocredito
            });
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult asignarCupo(int idEncabezado, int valor_cupon)
        {
            var result = 0;
            //revisar validacion
            var facturaR = (from f in context.encab_documento
                            where f.idencabezado == idEncabezado
                            select new
                            {
                                f.idencabezado,
                                f.nit
                            }).FirstOrDefault();


            encab_documento e = new encab_documento();

            var state = context.encab_documento.Find(facturaR.idencabezado);

            state.valor_cupon = valor_cupon;

            context.Entry(state).State = EntityState.Modified;
            int resultado = context.SaveChanges();

            if (resultado > 0)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return Json(result, JsonRequestBehavior.AllowGet);

        }
        public JsonResult datosFactura(int idEncabezado)
        {

            var facturaR = (from f in context.encab_documento
                            join t in context.icb_terceros
                            on f.nit equals t.tercero_id
                            where f.idencabezado == idEncabezado
                            select new
                            {
                                f.idencabezado,
                                t.doc_tercero,
                                f.valor_total
                            }).FirstOrDefault();

            return Json(facturaR, JsonRequestBehavior.AllowGet);
        }
        public JsonResult asignarForma(int idEncabezado, int formaPago, decimal valor, string vaucher, int Cheque)
        {
            var result = 0;

            detalle_formas_pago_factura e = new detalle_formas_pago_factura();

            e.idencabezado = idEncabezado;
            e.idformas_pago = formaPago;
            // e.valor = valor;
            e.valor = Convert.ToDecimal(valor);
            e.vaucher = vaucher;
            e.cheque = Cheque;

            context.detalle_formas_pago_factura.Add(e);
            int resultado = context.SaveChanges();

            if (resultado > 0)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return Json(result, JsonRequestBehavior.AllowGet);

        }

        public ActionResult VentasPerdidas(int? menu)
        {
            BuscarFavoritos(menu);
            return View();
        }

        public JsonResult validarFormaPago(int forma)
        {
            int resultado = 0;

            var fpago = context.formas_pago.Where(d => d.id == forma).FirstOrDefault();

            if (fpago.formapago.Contains("Cheque"))
            {
                resultado = 1;
            }
            else if (fpago.formapago.Contains("Efectivo"))
            {
                resultado = 2;
            }


            return Json(resultado, JsonRequestBehavior.AllowGet);
        }

        public JsonResult agregarBolsa(int idEncabezado, int bolsa, string valor)
        {

            var result = 0;
            var b = context.encab_documento.Find(idEncabezado);

            b.id_bolsa = bolsa;
            b.valor_bolsa = Convert.ToDecimal(valor);

            context.Entry(b).State = EntityState.Modified;
            int resultado = context.SaveChanges();

            if (resultado > 0)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult traerPrecio(int id)
        {
            var b = context.icb_bolsa.Where(d => d.id == id).FirstOrDefault();

            var data = b.valor;

            return Json(data, JsonRequestBehavior.AllowGet);

        }

        public JsonResult anularFactura(int idEncabezado, int motivo, string motivoAnulacion)
        {

            var result = 0;
            var b = context.encab_documento.Find(idEncabezado);

            b.estado_factura = 3;
            //b.devolucion = false;
            b.anulacion = motivo;
            b.motivo_anulada = motivoAnulacion;

            context.Entry(b).State = EntityState.Modified;
            int resultado = context.SaveChanges();

            if (resultado > 0)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return Json(result, JsonRequestBehavior.AllowGet);

        }

        public JsonResult asignarMedio(int? idEncabezado, int? medioPago, string valor, string total, string vaucher, string Cheque)
        {

            if (ModelState.IsValid)
            {
                int result = 0;
                var valorConvertido = valor.Replace(".", "");
                var totalConvertido = total.Replace(".", "");

                try
                {

                    if (Convert.ToInt32(valorConvertido) <= Convert.ToInt32(totalConvertido))
                    {
                        detalle_formas_pago_orden medios = new detalle_formas_pago_orden
                        {

                            idencabezado = idEncabezado,
                            idformas_pago = medioPago,
                            valor = Convert.ToDecimal(totalConvertido),
                            valorRecibido = Convert.ToDecimal(valorConvertido),
                        };

                        if (!string.IsNullOrWhiteSpace(vaucher))
                        {
                            medios.vaucher = vaucher;
                        }
                        if (!string.IsNullOrWhiteSpace(Cheque))
                        {
                            medios.cheque = Convert.ToInt64(Cheque);
                        }

                        context.detalle_formas_pago_orden.Add(medios);
                        bool resultado = context.SaveChanges() > 0;

                        var buscar = context.detalle_formas_pago_orden.Where(d => d.idencabezado == idEncabezado).OrderByDescending(d => d.id_detalle).FirstOrDefault();
                        var buscar2 = context.detalle_formas_pago_orden.Where(d => d.idencabezado == idEncabezado).Select(d => d.valorRecibido).ToList();
                        var cantPendiente = buscar.pendiente != null ? buscar.pendiente : 0;
                        var cantidadRecibida = buscar2.Sum();


                        if (resultado)
                        {
                            result = 1;
                            var datos = new { result, cantPendiente, cantidadRecibida };
                            return Json(datos, JsonRequestBehavior.AllowGet);

                        }
                        else
                        {
                            return Json(0, JsonRequestBehavior.AllowGet);
                        }

                    }

                    return Json(0, JsonRequestBehavior.AllowGet);

                }
                catch (Exception)
                {

                    throw;
                }
            }

            return Json(0, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult DetalleFactura(int id, int? menu)
        {


            var permisos = (from en in context.encab_documento
                            where en.idencabezado == id
                            select new { en.estado_factura, en.devolucion }).ToList();

            var resultado1 = permisos.Where(x => x.devolucion == true).Count() > 0 ? "Si" : "No";

            ViewBag.Permiso = resultado1;

            var encab = context.encab_documento.Where(d => d.idencabezado == id).OrderByDescending(d => d.numero).FirstOrDefault();

            var buscar = context.detalle_formas_pago_orden.Where(d => d.idencabezado == id).OrderByDescending(d => d.id_detalle).FirstOrDefault();
            var buscar2 = context.detalle_formas_pago_orden.Where(d => d.idencabezado == id).Select(d => d.valorRecibido).ToList();
            //veo si tiene cupo asociado osea forma de pago distinta a Contado

            if (encab.usa_cupo == true && encab.fpago_id>1)
            {
                ViewBag.usa_cupo = 1;
                ViewBag.cupo_disponible = buscarCapacidadCupo(encab.nit);
            }
            else
            {
                ViewBag.usa_cupo = 0;
                ViewBag.cupo_disponible = 0;
            }
            if (buscar == null)
            {
                ViewBag.Pendiente = Math.Round(encab.valor_total);
                ViewBag.Recibido = 0;
            }
            else
            {
                ViewBag.Pendiente = Math.Round(Convert.ToDecimal(buscar.pendiente));
                ViewBag.Recibido = Math.Round(Convert.ToDecimal(buscar2.Sum()));

            }

            string parametro = context.icb_sysparameter.Where(x => x.syspar_cod == "P26").Select(x => x.syspar_value).FirstOrDefault();
            int param = Convert.ToInt32(parametro);

            var listaFP = (from f in context.formas_pago
                           join b in context.bancos
                           on f.idbanco equals b.id into formabando
                           from fb in formabando.DefaultIfEmpty()
                           orderby fb.Descripcion
                           select new
                           {
                               f.id,
                               nombre = fb.Descripcion + " " + f.formapago + " (" + fb.numero_cuenta + ")"
                           }).ToList();
            if (encab.fpago_id== 1)
            {
                listaFP = listaFP.Where(d => d.id != 7).ToList();
            }
            List<SelectListItem> list = new List<SelectListItem>();
            foreach (var item in listaFP)
            {
                list.Add(new SelectListItem
                {
                    Text = item.nombre,
                    Value = item.id.ToString()
                });
            }
            ViewBag.FormaPago = list;

            var listaB = (from b in context.icb_bolsa
                          where b.estado == true
                          select new
                          {
                              b.id,
                              b.bolsa
                          }).ToList();

            List<SelectListItem> lista = new List<SelectListItem>();
            foreach (var item in listaB)
            {
                lista.Add(new SelectListItem
                {
                    Text = item.bolsa,
                    Value = item.id.ToString()
                });
            }
            ViewBag.Bolsa = lista;

            var listaAnulacion = (from b in context.motivo_anulacion
                                      //where b.
                                  select new
                                  {
                                      b.id,
                                      b.motivo,
                                      b.fecha
                                  }).ToList();

            List<SelectListItem> lista2 = new List<SelectListItem>();
            foreach (var item in listaAnulacion)
            {
                lista2.Add(new SelectListItem
                {
                    Text = item.motivo,
                    Value = item.id.ToString()
                });
            }
            ViewBag.Motivo = lista2;

            listas();
            lineas_documento lineas = context.lineas_documento.FirstOrDefault(x => x.id_encabezado == id);
            ViewBag.numero = lineas.encab_documento.numero;
            ViewBag.valor_total = lineas.encab_documento.valor_total;
            ViewBag.fecha = lineas.encab_documento.fecha;
            ViewBag.facid = lineas.encab_documento.idencabezado;
            ViewBag.idEncabezado = id;
            ViewBag.factura = context.encab_documento.Where(x => x.idencabezado == id).Select(x => x.numero)
                .FirstOrDefault();
            ViewBag.fecha = context.encab_documento.Where(x => x.idencabezado == id).Select(x => x.fec_creacion)
                .FirstOrDefault();
            ViewBag.fechaVencimiento = context.encab_documento.Where(x => x.idencabezado == id)
                .Select(x => x.vencimiento).FirstOrDefault();

            ViewBag.tipoDocumento = (from a in context.encab_documento
                                     join b in context.tp_doc_registros
                                         on a.tipo equals b.tpdoc_id
                                     where a.idencabezado == id
                                     select b.tpdoc_nombre).FirstOrDefault();

            ViewBag.tipo_Documento = (from a in context.encab_documento
                                     join b in context.tp_doc_registros
                                         on a.tipo equals b.tpdoc_id
                                     where a.idencabezado == id
                                     select b.tpdoc_id).FirstOrDefault();

            ViewBag.nombrebodega = (from a in context.encab_documento
                              join b in context.bodega_concesionario
                                  on a.bodega equals b.id
                              where a.idencabezado == id
                              select b.bodccs_nombre).FirstOrDefault();

            ViewBag.bodega = (from a in context.encab_documento
                                    join b in context.bodega_concesionario
                                        on a.bodega equals b.id
                                    where a.idencabezado == id
                                    select b.id).FirstOrDefault();

            var cliente = (from a in context.encab_documento
                           join b in context.icb_terceros
                               on a.nit equals b.tercero_id
                           where a.idencabezado == id
                           select new
                           {
                               b.tercero_id,
                               b.prinom_tercero,
                               b.segnom_tercero,
                               b.apellido_tercero,
                               b.segapellido_tercero
                           }).FirstOrDefault();

            ViewBag.cliente = cliente.prinom_tercero + " " + cliente.segnom_tercero + " " + cliente.apellido_tercero +
                              " " + cliente.segapellido_tercero;

            ViewBag.doc_cliente = cliente.tercero_id;


            ViewBag.tipoPago = (from c in context.encab_documento
                                join f in context.fpago_tercero
                                    on c.fpago_id equals f.fpago_id
                                where c.idencabezado == id
                                select f.fpago_nombre).FirstOrDefault();

            ViewBag.condicion = (from c in context.encab_documento
                                join f in context.fpago_tercero
                                    on c.fpago_id equals f.fpago_id
                                where c.idencabezado == id
                                select f.fpago_id).FirstOrDefault();

            ViewBag.moneda = (from c in context.encab_documento
                              join f in context.monedas
                                  on c.moneda equals f.moneda
                              where c.idencabezado == id
                              select f.descripcion).FirstOrDefault();

            ViewBag.tipo_moneda = (from c in context.encab_documento
                              join f in context.monedas
                                  on c.moneda equals f.moneda
                              where c.idencabezado == id
                              select f.moneda).FirstOrDefault();

            ViewBag.perfil = (from a in context.encab_documento
                              join b in context.perfil_contable_documento
                                  on a.perfilcontable equals b.id
                              where a.idencabezado == id
                              select b.descripcion).FirstOrDefault();

            ViewBag.perfil_contable = (from a in context.encab_documento
                              join b in context.perfil_contable_documento
                                  on a.perfilcontable equals b.id
                              where a.idencabezado == id
                              select a.perfilcontable).FirstOrDefault();

            ViewBag.fletes = (from a in context.encab_documento
                              where a.idencabezado == id
                              select a.fletes).FirstOrDefault();

            ViewBag.ivafletes = (from a in context.encab_documento
                                 where a.idencabezado == id
                                 select a.iva_fletes).FirstOrDefault();

            ViewBag.ic_bolsa = (from a in context.encab_documento
                                where a.idencabezado == id
                                select a.valor_bolsa).FirstOrDefault();

            var asesor = (from a in context.encab_documento
                          join b in context.users
                              on a.vendedor equals b.user_id
                          where a.idencabezado == id
                          select new
                          {
                              a.vendedor,
                              b.user_nombre,
                              b.user_apellido
                          }).FirstOrDefault();

            ViewBag.asesor = asesor.user_nombre + " " + asesor.user_apellido;

            ViewBag.vendedor = asesor.vendedor;

            ViewBag.concepto1 = (from a in context.encab_documento
                                 join b in context.tpdocconceptos
                                     on a.concepto equals b.id
                                 where a.idencabezado == id
                                 select b.Descripcion).FirstOrDefault();

            ViewBag.concepto2 = (from a in context.encab_documento
                                 join b in context.tpdocconceptos2
                                     on a.concepto equals b.id
                                 where a.idencabezado == id
                                 select b.Descripcion).FirstOrDefault();

            ViewBag.observaciones = (from a in context.encab_documento
                                     where a.idencabezado == id
                                     select a.notas != null ? a.notas : "").FirstOrDefault();

            ViewBag.pedido = (from a in context.encab_documento
                              join b in context.icb_referencia_mov
                                  on a.pedido equals b.refmov_id
                              where a.idencabezado == id
                              select b.refmov_numero).FirstOrDefault();

            //var pedidos = context.icb_referencia_mov.Where(d =>
            //    d.tpdocid == param && d.cliente == modelo.nit && d.bodega_id == modelo.bodega && d.idanulacion == null && d.estado).Select(d => new
            //    {
            //        id = d.refmov_id,
            //        descripcion = d.refmov_numero + " - " + d.refmov_fecela,
            //        asesor = d.vendedor
            //    }).ToList();


            BuscarFavoritos(menu);
            return View();
        }

        [HttpPost]
        public ActionResult DetalleFactura(NotasContablesModel modelo, int? menu)
        {
            if (ModelState.IsValid)
            {
                using (DbContextTransaction dbTran = context.Database.BeginTransaction())
                {
                    try
                    {
                        int funciono = 0;
                        int idencanbinter = 0;
                        int idencanbinternum = 0;
                        decimal totalCreditos = 0;
                        decimal totalDebitos = 0;
                        decimal costoPromedioTotal = 0;

                        var perfil_contable= Convert.ToInt32(Request["id_perfil_contable"]);

                        int documentointerno = 0;
                        grupoconsecutivos grupo2 = new grupoconsecutivos();
                        long consecutivo2 = 0;
                        var parametrosCuentasVerificar = (from perfil in context.perfil_cuentas_documento
                                                          join nombreParametro in context.paramcontablenombres
                                                              on perfil.id_nombre_parametro equals nombreParametro.id
                                                          join cuenta in context.cuenta_puc
                                                              on perfil.cuenta equals cuenta.cntpuc_id
                                                          where perfil.id_perfil == perfil_contable
                                                          select new
                                                          {
                                                              perfil.id,
                                                              perfil.id_nombre_parametro,
                                                              perfil.cuenta,
                                                              perfil.centro,
                                                              perfil.id_perfil,
                                                              nombreParametro.descripcion_parametro,
                                                              cuenta.cntpuc_numero
                                                          }).ToList();

                        var idEncabezado = Convert.ToInt32(Request["idEncabezado"]);

                        var buscar = context.encab_documento.Where(x => x.idencabezado == idEncabezado).OrderByDescending(x => x.idencabezado).FirstOrDefault();

                        int secuencia = 1;
                        //traigo el código de tipo documento salida por venta
                        icb_sysparameter parped = context.icb_sysparameter.Where(d => d.syspar_cod == "P161").FirstOrDefault();
                        int pedidorep = parped != null ? Convert.ToInt32(parped.syspar_value) : 3092;
                        //busco el id del tipo de documento documento salida por venta
                        tp_doc_registros consec = context.tp_doc_registros.Where(d => d.tpdoc_id == pedidorep).FirstOrDefault();

                        List<ElementosFacturacion> listaelementos = new List<ElementosFacturacion>();
                        List<cuentas_valores> ids_cuentas_valores = new List<cuentas_valores>();
                        centro_costo centroValorCero = context.centro_costo.FirstOrDefault(x => x.pre_centcst == "0");
                        int idCentroCero = centroValorCero != null ? Convert.ToInt32(centroValorCero.centcst_id) : 0;
                        decimal ivatotal = Convert.ToDecimal(Request["valorIVA"], Cultureinfo);
                        int bodega = Convert.ToInt32(Request["bodega"]);
                        List<DocumentoDescuadradoModel> listaDescuadrados = new List<DocumentoDescuadradoModel>();
                        decimal valorTotal = Convert.ToDecimal(Request["valorFinal"], Cultureinfo);
                        int costoLineas = Convert.ToInt32(Request["lista_referencias"]) -1;
                        decimal totalmargen = 0, margen = 0;


                        //foreach (var i in costoLineas)
                        //{

                        //}

                        for (int i = 0; i <= costoLineas; i++)
                        {

                            string codigo = Request["referencia" + i];

                            if (!string.IsNullOrEmpty(codigo))
                            {
                                int anio = DateTime.Now.Year;
                                int mes = DateTime.Now.Month;

                                string referencia = Request["referencia" + i];
                                vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                    x.codigo == referencia && x.ano == anio && x.mes == mes);
                                decimal? costoReferencia = vwPromedio.Promedio;

                                costoPromedioTotal += Convert.ToDecimal(costoReferencia, Cultureinfo) *
                                                      Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                //Calular el margen de utilidad
                                int cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]);
                                decimal valiva = Convert.ToDecimal(Request["ivaTotalReferencia" + i], Cultureinfo);
                                decimal valorT = Convert.ToDecimal(Request["valorTotalReferencia" + i], Cultureinfo);
                                CsCalcularMargenUtilidad calcularmargen = new CsCalcularMargenUtilidad();
                                margen = calcularmargen.MargenUtilidad(bodega, referencia, cantidad, valorT, valiva);
                                totalmargen = totalmargen + margen;


                                listaelementos.Add(new ElementosFacturacion
                                {
                                    tipo = "R",
                                    cantidad = Convert.ToInt32(Request["cantidadReferencia" + i]),
                                    centro_costo = Request["centro_costo_tf" + i] != null ? Convert.ToInt32(Request["centro_costo_tf" + i]) : 0,
                                    codigo = Request["referencia" + i],
                                    porcentaje_descuento = Request["descuentoReferencia" + i] != null ? Convert.ToDecimal(Request["descuentoReferencia" + i]) : 0,
                                    porcentaje_iva = Request["ivaReferencia" + i] != null ? Convert.ToDecimal(Request["ivaReferencia" + i]) : 0,
                                    tipo_tarifa = Request["idtipotarifa" + i] != null ? Convert.ToInt32(Request["idtipotarifa" + i]) : 0,
                                    valor_descuento = Request["totalDescuentoReferencia" + i] != null ? Convert.ToDecimal(Request["totalDescuentoReferencia" + i]) : 0,
                                    valor_iva = Request["ivaTotalReferencia" + i] != null ? Convert.ToDecimal(Request["ivaTotalReferencia" + i]) : 0,
                                    valor_unitario = Request["valorUnitarioReferencia" + i] != null ? Convert.ToDecimal(Request["valorUnitarioReferencia" + i]) : 0,
                                });

                            }
                        }

                        string lista = Request["lista_referencias"];
                        if (!string.IsNullOrEmpty(lista))
                        {
                            int datos = Convert.ToInt32(lista);
                            decimal costoTotal =
                                Convert.ToDecimal(Request["valor_proveedor"], Cultureinfo); //costo con retenciones y fletes
                            decimal ivaEncabezado = Convert.ToDecimal(Request["valorIVA"], Cultureinfo); //valor total del iva
                            decimal descuentoEncabezado =
                                Convert.ToDecimal(Request["valorDes"], Cultureinfo); //valor total del descuento
                            decimal costoEncabezado = Convert.ToDecimal(Request["valorSub"], Cultureinfo); //valor antes de impuestos

                            decimal valor_totalenca = costoEncabezado - descuentoEncabezado;

                            int tipo_Documento = Convert.ToInt32(Request["tipo_Documento"]);

                            //consecutivo
                            grupoconsecutivos grupo = context.grupoconsecutivos.FirstOrDefault(x =>
                                x.documento_id == tipo_Documento && x.bodega_id == bodega);

                            if (grupo != null)
                            {
                                DocumentoPorBodegaController doc = new DocumentoPorBodegaController();
                                long consecutivo = doc.BuscarConsecutivo(grupo.grupo);

                                //Encabezado documento
                                int tipotarifa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P147").Select(z => z.syspar_value).FirstOrDefault());


                                int numinterna = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).Count();
                                int numnormal = listaelementos.Where(x => x.tipo_tarifa != tipotarifa).Count();


                                if (numnormal > 0)
                                {

                                    #region encabezado

                                    var encabezado = context.encab_documento.Find(modelo.idencabezado);
                                    encabezado.tipo = tipo_Documento;
                                    encabezado.numero = consecutivo;
                                    encabezado.nit = buscar.nit;
                                    encabezado.fecha = DateTime.Now;
                                    encabezado.estado_factura = 1;

                                    int? condicion = Convert.ToInt32(Request["condicion"]);
                                    encabezado.fpago_id = condicion;
                                    //encabezado.centro_doc = Convert.ToInt32(modelo.centro);
                                    int dias = context.fpago_tercero.Find(condicion).dvencimiento ?? 0;
                                    DateTime vencimiento = DateTime.Now.AddDays(dias);
                                    encabezado.vencimiento = vencimiento;
                                    encabezado.valor_total = costoTotal;
                                    encabezado.prefactura = false;
                                    encabezado.iva = ivaEncabezado;
                                    encabezado.margen_utilidad = totalmargen;
                                    // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado

                                    #region calculo de retenciones

                                    tp_doc_registros buscarTipoDocRegistro =
                                       context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == tipo_Documento);
                                    icb_terceros buscarProveedor =
                                        context.icb_terceros.FirstOrDefault(x => x.tercero_id == buscar.nit);
                                    int regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id ?? 0 : 0;
                                    perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                                        x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw &&
                                        x.tipo_regimenid == regimen_proveedor);

                                    decimal retenciones = 0;

                                    if (buscarPerfilTributario != null)
                                    {
                                        if (buscarPerfilTributario.retfuente == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretfuente ?? 0))
                                        {
                                            encabezado.porcen_retencion = buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0;
                                            encabezado.retencion =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion;
                                        }

                                        if (buscarPerfilTributario.retiva == "A" &&
                                            ivaEncabezado >= (buscarPerfilTributario.baseretiva ?? 0))
                                        {
                                            encabezado.porcen_reteiva = buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0;
                                            encabezado.retencion_iva =
                                                Math.Round(encabezado.iva *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0) / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_iva;
                                        }

                                        if (buscarPerfilTributario.autorretencion == "A")
                                        {
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                            encabezado.porcen_autorretencion = (float)tercero_acteco;
                                            encabezado.retencion_causada =
                                                Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                            retenciones += encabezado.retencion_causada;
                                        }

                                        if (buscarPerfilTributario.retica == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretica ?? 0))
                                        {
                                            terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                                x.idcodica == buscarProveedor.id_acteco && x.bodega == bodega);
                                            decimal tercero_acteco = buscarProveedor.id_acteco != null ? buscarProveedor.acteco_tercero.tarifa : 0;
                                            if (bodega_acteco != null)
                                            {
                                                encabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }

                                            if (tercero_acteco != 0)
                                            {
                                                encabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(
                                                                   buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                            else
                                            {
                                                encabezado.porcen_retica = (float)(buscarPerfilTributario.pretica ?? 0);
                                                encabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                                retenciones += encabezado.retencion_ica;
                                            }
                                        }
                                    }

                                    #endregion

                                    if (modelo.fletes != null)
                                    {
                                        encabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                        encabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                    }

                                    encabezado.costo = costoPromedioTotal;
                                    encabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                    encabezado.perfilcontable = Convert.ToInt32(Request["id_perfil_contable"]);
                                    string pedido = Request["pedido"];
                                    if (!string.IsNullOrEmpty(pedido))
                                    {
                                        encabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                    }

                                    encabezado.bodega = bodega;
                                    encabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                    if (Request["tasa"] != "")
                                    {
                                        encabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                    }

                                    encabezado.valor_mercancia = valor_totalenca;
                                    encabezado.fec_creacion = DateTime.Now;
                                    encabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    encabezado.estado = true;
                                    encabezado.concepto = modelo.concepto;
                                    encabezado.concepto2 = modelo.concepto2;

                                    context.Entry(encabezado).State = EntityState.Modified;
                                    context.SaveChanges();

                                    int listaLineas2 = Convert.ToInt32(Request["lista_referencias"]);

                                    //busco el consecutivo documento orden de despacho de repuesto
                                    grupoconsecutivos grupo1 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == consec.tpdoc_id && x.bodega_id == bodega);
                                    long consecutivo_ = doc.BuscarConsecutivo(grupo1.grupo);

                                    encab_documento crearEncabezado = new encab_documento
                                    {

                                        tipo = consec.tpdoc_id,
                                        numero = consecutivo_,
                                        nit = buscar.nit,
                                        fecha = DateTime.Now,
                                        estado_factura = 1,
                                        fpago_id = condicion,
                                        vencimiento = vencimiento,
                                        valor_total = costoTotal,
                                        prefactura = false,
                                        iva = ivaEncabezado,
                                        margen_utilidad = totalmargen,

                                    };


                                    if (buscarPerfilTributario != null)
                                    {
                                        if (buscarPerfilTributario.retfuente == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretfuente ?? 0))
                                        {
                                            crearEncabezado.porcen_retencion = buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0;
                                            crearEncabezado.retencion =
                                                Math.Round(valor_totalenca *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretfuente != null ? (float)buscarPerfilTributario.pretfuente.Value : 0) / 100, Cultureinfo));
                                            retenciones += crearEncabezado.retencion;
                                        }

                                        if (buscarPerfilTributario.retiva == "A" &&
                                            ivaEncabezado >= (buscarPerfilTributario.baseretiva ?? 0))
                                        {
                                            crearEncabezado.porcen_reteiva = buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0;
                                            crearEncabezado.retencion_iva =
                                                Math.Round(crearEncabezado.iva *
                                                           Convert.ToDecimal((buscarPerfilTributario.pretiva != null ? (float)buscarPerfilTributario.pretiva.Value : 0) / 100, Cultureinfo));
                                            retenciones += crearEncabezado.retencion_iva;
                                        }

                                        if (buscarPerfilTributario.autorretencion == "A")
                                        {
                                            decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                                            crearEncabezado.porcen_autorretencion = (float)tercero_acteco;
                                            crearEncabezado.retencion_causada =
                                                Math.Round(valor_totalenca * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                                            retenciones += crearEncabezado.retencion_causada;
                                        }

                                        if (buscarPerfilTributario.retica == "A" &&
                                            valor_totalenca >= (buscarPerfilTributario.baseretica ?? 0))
                                        {
                                            terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                                                x.idcodica == buscarProveedor.id_acteco && x.bodega == bodega);
                                            decimal tercero_acteco = buscarProveedor.id_acteco != null ? buscarProveedor.acteco_tercero.tarifa : 0;
                                            if (bodega_acteco != null)
                                            {
                                                crearEncabezado.porcen_retica = (float)bodega_acteco.porcentaje;
                                                crearEncabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                                                retenciones += crearEncabezado.retencion_ica;
                                            }

                                            if (tercero_acteco != 0)
                                            {
                                                crearEncabezado.porcen_retica = (float)buscarProveedor.acteco_tercero.tarifa;
                                                crearEncabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(
                                                                   buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                                                retenciones += crearEncabezado.retencion_ica;
                                            }
                                            else
                                            {
                                                crearEncabezado.porcen_retica = (float)(buscarPerfilTributario.pretica ?? 0);
                                                crearEncabezado.retencion_ica =
                                                    Math.Round(valor_totalenca *
                                                               Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                                                retenciones += crearEncabezado.retencion_ica;
                                            }
                                        }
                                    }

                                    if (modelo.fletes != null)
                                    {
                                        crearEncabezado.fletes = Convert.ToDecimal(modelo.fletes, Cultureinfo);
                                        crearEncabezado.iva_fletes = Convert.ToDecimal(modelo.iva_fletes, Cultureinfo);
                                    }

                                    crearEncabezado.costo = costoPromedioTotal;
                                    crearEncabezado.vendedor = Convert.ToInt32(Request["vendedor"]);
                                    crearEncabezado.perfilcontable = Convert.ToInt32(Request["id_perfil_contable"]);

                                    if (!string.IsNullOrEmpty(pedido))
                                    {
                                        crearEncabezado.pedido = Convert.ToInt32(Request["pedido"]);
                                    }

                                    crearEncabezado.bodega = bodega;
                                    crearEncabezado.moneda = Convert.ToInt32(Request["moneda"]);
                                    if (Request["tasa"] != "")
                                    {
                                        crearEncabezado.tasa = Convert.ToInt32(Request["tasa"]);
                                    }

                                    crearEncabezado.valor_mercancia = valor_totalenca;
                                    crearEncabezado.fec_creacion = DateTime.Now;
                                    crearEncabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    crearEncabezado.estado = true;
                                    crearEncabezado.concepto = modelo.concepto;
                                    crearEncabezado.concepto2 = modelo.concepto2;

                                    context.encab_documento.Add(crearEncabezado);
                                    int result = context.SaveChanges();
                                    int idsalidaVenta = crearEncabezado.idencabezado;


                                    for (int i = 0; i <= listaLineas2; i++)

                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                }
                                            }

                                            var idlineas = context.lineas_documento.Where(d => d.id_encabezado == modelo.idencabezado).Select(d => d.id).FirstOrDefault();

                                            var lineas = context.lineas_documento.Find(idlineas);

                                            //lineas.id_encabezado = id;
                                            lineas.codigo = Request["referencia" + i];
                                            lineas.seq = i + 1;
                                            lineas.fec = DateTime.Now;
                                            lineas.nit = buscar.nit;
                                            lineas.und = Convert.ToString(und);
                                            lineas.cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["idtipotarifa" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["idtipotarifa" + i]);
                                            }

                                            lineas.vendedor = encabezado.vendedor;

                                            context.Entry(lineas).State = EntityState.Modified;
                                            context.SaveChanges();

                                            lineas_documento lineasSalidaVenta = new lineas_documento
                                            {
                                                id_encabezado = idsalidaVenta,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = buscar.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo),
                                                porcentaje_iva = (float)ivaLista,
                                                valor_unitario = final,
                                                porcentaje_descuento = (float)descuento,
                                                costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo),
                                                bodega = bodega,
                                                fec_creacion = DateTime.Now,
                                                userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                                estado = true,
                                                id_tarifa_cliente = Convert.ToInt32(Request["idtipotarifa" + i]),
                                                moneda = Convert.ToInt32(Request["moneda"]),

                                            };

                                            if (Request["tasa"] != "")
                                            {
                                                lineasSalidaVenta.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            lineasSalidaVenta.vendedor = crearEncabezado.vendedor;

                                            context.lineas_documento.Add(lineasSalidaVenta);
                                            int result2 = context.SaveChanges();


                                            referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                            x.ano == DateTime.Now.Year && x.mes == DateTime.Now.Month && x.codigo == lineasSalidaVenta.codigo &&
                                            x.bodega == lineasSalidaVenta.bodega);

                                            if (existencia != null)
                                            {

                                                existencia.can_sal -= Convert.ToDecimal(lineasSalidaVenta.cantidad, new CultureInfo("is-IS"));

                                            }
                                            context.Entry(existencia).State = EntityState.Modified;
                                            int result3 = context.SaveChanges();

                                        }


                                    //veo si el documento externo tiene documento interno asociado
                                    tp_doc_registros doc_interno = context.tp_doc_registros.Where(d => d.tpdoc_id == tipo_Documento).FirstOrDefault();
                                    //guardado de documento interno
                                    if (doc_interno.doc_interno_asociado != null)
                                    {
                                        //se consulta consecutivo de documento interno
                                        grupo2 = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == doc_interno.doc_interno_asociado && x.bodega_id == bodega);
                                        if (grupo2 != null)
                                        {
                                            consecutivo2 = doc.BuscarConsecutivo(grupo2.grupo);
                                            //calculo y guardo el encabezado del movimiento interno

                                            encab_documento encabezado2 = new encab_documento
                                            {
                                                tipo = doc_interno.doc_interno_asociado.Value,
                                                numero = consecutivo2,
                                                nit = encabezado.nit,
                                                fecha = DateTime.Now,
                                                fpago_id = encabezado.fpago_id,
                                                vencimiento = encabezado.vencimiento,
                                                valor_total = encabezado.valor_total,
                                                iva = encabezado.iva,
                                                porcen_retencion = encabezado.porcen_retencion,
                                                retencion = encabezado.retencion,
                                                porcen_reteiva = encabezado.porcen_reteiva,
                                                retencion_iva = encabezado.retencion_iva,
                                                porcen_retica = encabezado.porcen_retica,
                                                retencion_ica = encabezado.retencion_ica,
                                                fletes = encabezado.fletes,
                                                iva_fletes = encabezado.iva_fletes,
                                                costo = encabezado.costo,
                                                vendedor = encabezado.vendedor,
                                                documento = encabezado.documento,
                                                remision = encabezado.remision,
                                                bodega = encabezado.bodega,
                                                concepto = encabezado.concepto,
                                                moneda = encabezado.moneda,
                                                perfilcontable = encabezado.perfilcontable,
                                                valor_mercancia = encabezado.valor_mercancia,
                                                fec_creacion = encabezado.fec_creacion,
                                                userid_creacion = encabezado.userid_creacion,
                                                estado = true,
                                                concepto2 = encabezado.concepto2,
                                                id_movimiento_interno = encabezado.idencabezado,
                                            };
                                            context.encab_documento.Add(encabezado2);
                                            context.SaveChanges();
                                            documentointerno = encabezado2.idencabezado;
                                        }
                                    }
                                    #endregion

                                    encab_documento eg = context.encab_documento.FirstOrDefault(x => x.idencabezado == encabezado.idencabezado);

                                    //Documentos a cruzar

                                    #region Documentos a cruzar

                                    string listaAnticipo = Request["listaAnticipo"];
                                    List<int> ids = new List<int>();
                                    List<int> idEncabAnticipos = new List<int>();
                                    if (!string.IsNullOrEmpty(listaAnticipo))
                                    {
                                        int la = Convert.ToInt32(listaAnticipo);
                                        for (int i = 1; i <= la; i++)
                                        {
                                            int encabAnti = Convert.ToInt32(Request["encabAnticipo" + i]);
                                            if (encabAnti != 0)
                                            {
                                                encab_documento encabezadoAnticipo =
                                                    context.encab_documento.FirstOrDefault(x =>
                                                        x.idencabezado == encabAnti);

                                                documentosacruzar dac = new documentosacruzar
                                                {
                                                    idencabrecibo = encabAnti,
                                                    valorrecibo = encabezadoAnticipo.valor_total,
                                                    idencabfactura = encabezado.idencabezado,
                                                    valorfactura = eg.valor_total,
                                                    saldo = encabezadoAnticipo.valor_total - eg.valor_total
                                                };

                                                context.documentosacruzar.Add(dac);
                                                int rasult = context.SaveChanges();
                                                ids.Add(dac.id);
                                                idEncabAnticipos.Add(encabAnti);
                                            }
                                        }
                                    }

                                    #endregion

                                    #region cruce documentos

                                    for (int q = 0; q < idEncabAnticipos.Count; q++)
                                    {
                                        //id del anticipo en la tabla documentos a cruzar
                                        int idDocACruzar = ids[q];
                                        //id del anticipo
                                        int idEncabAnticipo = idEncabAnticipos[q];
                                        //Anticipo a cruzar
                                        encab_documento anticipo = context.encab_documento.Where(x => x.idencabezado == idEncabAnticipo)
                                            .FirstOrDefault();
                                        //Factura a cruzar
                                        encab_documento factura = context.encab_documento
                                            .Where(x => x.idencabezado == encabezado.idencabezado).FirstOrDefault();
                                        documentosacruzar docAcruzar = context.documentosacruzar.Where(x => x.id == idDocACruzar)
                                            .FirstOrDefault();
                                        decimal valorAplicar = factura.valor_total - factura.valor_aplicado -
                                                           (anticipo.valor_total - anticipo.valor_aplicado);
                                        if (valorAplicar < 0)
                                        {
                                            decimal RestanteAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado -
                                                (factura.valor_total - factura.valor_aplicado);
                                            decimal valorAnticipo =
                                                anticipo.valor_total - anticipo.valor_aplicado - RestanteAnticipo;
                                            anticipo.valor_aplicado = anticipo.valor_aplicado + valorAnticipo;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                            decimal nuevovalorF = factura.valor_aplicado + valorAnticipo;
                                            factura.valor_aplicado = nuevovalorF;
                                            context.Entry(factura).State = EntityState.Modified;
                                        }
                                        else
                                        {
                                            int valoraplicado = Convert.ToInt32(factura.valor_aplicado);
                                            decimal nuevovalor =
                                                Convert.ToDecimal(valoraplicado, Cultureinfo) +
                                                (anticipo.valor_total - anticipo.valor_aplicado);
                                            factura.valor_aplicado = nuevovalor;
                                            context.Entry(factura).State = EntityState.Modified;
                                            anticipo.valor_aplicado = anticipo.valor_total;
                                            context.Entry(anticipo).State = EntityState.Modified;
                                        }

                                        docAcruzar.cruzado = true;
                                        context.Entry(docAcruzar).State = EntityState.Modified;
                                        context.SaveChanges();

                                        cruce_documentos cd = new cruce_documentos
                                        {
                                            idtipo = anticipo.tipo,
                                            numero = anticipo.numero,
                                            id_encab_aplica = factura.idencabezado,
                                            id_encabezado = anticipo.idencabezado,
                                            //tipo de la factura cruzada
                                            idtipoaplica = factura.tipo,
                                            //numero de la factura cruzada
                                            numeroaplica = factura.numero,
                                            //valor aplicado a cada factura
                                            valor = anticipo.valor_total,
                                            fecha = DateTime.Now,
                                            fechacruce = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"])
                                        };
                                        context.cruce_documentos.Add(cd);
                                        context.SaveChanges();
                                    }

                                    #endregion

                                    //Lineas documento

                                    #region lineasDocumento

                                    List<mov_contable> listaMov = new List<mov_contable>();
                                    int listaLineas = Convert.ToInt32(Request["lista_referencias"]);
                                    for (
                                        int i = 0; i <= listaLineas; i++)
                                        if (!string.IsNullOrEmpty(Request["referencia" + i]))
                                        {
                                            decimal porDescuento = !string.IsNullOrEmpty(Request["descuentoReferencia" + i])
                                                ? Convert.ToDecimal(Request["descuentoReferencia" + i], Cultureinfo)
                                                : 0;

                                            string codigo = Request["referencia" + i];
                                            decimal cantidadFacturada = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal valorReferencia = Convert.ToDecimal(Request["valorUnitarioReferencia" + i], Cultureinfo);
                                            decimal descontar = porDescuento / 100;
                                            decimal porIVAReferencia = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo) / 100;
                                            decimal final = Math.Round(valorReferencia - valorReferencia * descontar);
                                            decimal baseUnitario = final * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                            decimal ivaReferencia =
                                                Math.Round(final * porIVAReferencia *
                                                           Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo));
                                            icb_referencia unidadCodigo =
                                                context.icb_referencia.FirstOrDefault(x => x.ref_codigo == codigo);
                                            string und = unidadCodigo.unidad_medida;

                                            vw_promedio vwPromedio = context.vw_promedio.FirstOrDefault(x =>
                                                x.codigo == codigo && x.ano == DateTime.Now.Year &&
                                                x.mes == DateTime.Now.Month);
                                            decimal? costoReferencia = vwPromedio.Promedio;
                                            decimal? cr = costoReferencia * Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);

                                            if (!string.IsNullOrEmpty(Request["pedidoID" + i]))
                                            {
                                                int pedidoSeleccionado = Convert.ToInt32(Request["pedidoID" + i]);

                                                icb_referencia_movdetalle buscar_movimientoPedido =
                                                    context.icb_referencia_movdetalle.FirstOrDefault(x =>
                                                        x.refmov_id == pedidoSeleccionado && x.ref_codigo == codigo);
                                                if (buscar_movimientoPedido != null)
                                                {
                                                    if (buscar_movimientoPedido.refdet_saldo != null)
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo += cantidadFacturada;
                                                    }
                                                    else
                                                    {
                                                        buscar_movimientoPedido.refdet_saldo = cantidadFacturada;
                                                    }

                                                    context.Entry(buscar_movimientoPedido).State = EntityState.Modified;
                                                    context.SaveChanges();
                                                }
                                            }

                                            lineas_documento lineas = new lineas_documento
                                            {
                                                id_encabezado = encabezado.idencabezado,
                                                codigo = Request["referencia" + i],
                                                seq = i + 1,
                                                fec = DateTime.Now,
                                                nit = buscar.nit,
                                                und = Convert.ToString(und),
                                                cantidad = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo)


                                            };
                                            decimal ivaLista = Convert.ToDecimal(Request["ivaReferencia" + i], Cultureinfo);
                                            lineas.porcentaje_iva = (float)ivaLista;
                                            lineas.valor_unitario = final;
                                            decimal descuento = porDescuento;
                                            lineas.porcentaje_descuento = (float)descuento;
                                            lineas.costo_unitario = Convert.ToDecimal(costoReferencia, Cultureinfo);
                                            lineas.bodega = bodega;
                                            lineas.fec_creacion = DateTime.Now;
                                            lineas.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                            lineas.estado = true;
                                            lineas.id_tarifa_cliente = Convert.ToInt32(Request["idtipotarifa" + i]);
                                            lineas.moneda = Convert.ToInt32(Request["moneda"]);
                                            if (Request["tasa"] != "")
                                            {
                                                lineas.tasa = Convert.ToInt32(Request["tasa"]);
                                            }

                                            if (Request["centro_costo_tf" + i] != "" &&
                                                Request["centro_costo_tf" + i] != null &&
                                                Request["centro_costo_tf" + i] != "undefined")
                                            {
                                                //lineas.centro_costo = Convert.ToInt32(Request["centro_costo_tf" + i]);
                                                //lineas.centro_costo = Convert.ToInt32(Request["idtipotarifa" + i]);
                                            }

                                            lineas.vendedor = eg.vendedor;

                                            context.lineas_documento.Add(lineas);
                                            context.SaveChanges();
                                            #endregion

                                            //Mov Contable (IVA, Inventario, Costo, Ingreso)

                                            #region Mov Contable 

                                            foreach (var parametro in parametrosCuentasVerificar)
                                            {
                                                string descripcionParametro = context.paramcontablenombres
                                                    .FirstOrDefault(x => x.id == parametro.id_nombre_parametro)
                                                    .descripcion_parametro;
                                                cuenta_puc buscarCuenta =
                                                    context.cuenta_puc.FirstOrDefault(x => x.cntpuc_id == parametro.cuenta);

                                                if (buscarCuenta != null)
                                                {
                                                    if (parametro.id_nombre_parametro == 2 &&  //Iva --c
                                                        Convert.ToDecimal(ivaEncabezado, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 11 && //Ingreso  -- d-c
                                                        Convert.ToDecimal(costoEncabezado, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 20 &&//Inventario  --c
                                                        Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 12 &&// Costo --d
                                                        Convert.ToDecimal(costoPromedioTotal, Cultureinfo) != 0
                                                        || parametro.id_nombre_parametro == 10 &&// Cuentas por cobrar --d
                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo) != 0)


                                                    {
                                                        mov_contable movNuevo = new mov_contable
                                                        {
                                                            id_encab = encabezado.idencabezado,
                                                            seq = secuencia,
                                                            idparametronombre = parametro.id_nombre_parametro,
                                                            cuenta = parametro.cuenta,
                                                            centro = Request["idtipotarifa" + i] == "2"
                                                                ? parametro.id_nombre_parametro == 11
                                                                    ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                    : parametro.id_nombre_parametro == 12
                                                                        ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                        : parametro.centro
                                                                : parametro.centro
                                                        };
                                                        ;
                                                        movNuevo.fec = DateTime.Now;
                                                        movNuevo.fec_creacion = DateTime.Now;
                                                        movNuevo.tipo_tarifa =
                                                            Convert.ToInt32(Request["idtipotarifa" + i]);
                                                        movNuevo.userid_creacion =
                                                            Convert.ToInt32(Session["user_usuarioid"]);
                                                        movNuevo.documento = Convert.ToString(modelo.pedido);

                                                        cuenta_puc info = context.cuenta_puc
                                                            .Where(a => a.cntpuc_id == parametro.cuenta).FirstOrDefault();

                                                        if (info.tercero)
                                                        {
                                                            movNuevo.nit = buscar.nit;
                                                        }
                                                        else
                                                        {
                                                            icb_terceros tercero = context.icb_terceros
                                                                .Where(t => t.doc_tercero == "0").FirstOrDefault();
                                                            movNuevo.nit = tercero.tercero_id;
                                                        }

                                                        #region IVA

                                                        if (parametro.id_nombre_parametro == 2)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaIva = pcr.cuenta_dev_iva_compras;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region si tiene perfil y cuenta asignada a ese perfil

                                                                if (cuentaIva != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaIva);
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaIva)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    context.mov_contable.Add(movNuevo);
                                                                    context.SaveChanges();
                                                                }

                                                                #endregion

                                                                #region si tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    context.mov_contable.Add(movNuevo);
                                                                    context.SaveChanges();
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);


                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(ivaReferencia, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                context.mov_contable.Add(movNuevo);
                                                                context.SaveChanges();
                                                            }

                                                            #endregion

                                                            mov_contable buscarIVA = context.mov_contable.FirstOrDefault(x =>
                                                               x.id_encab == encabezado.idencabezado &&
                                                               x.cuenta == movNuevo.cuenta &&
                                                               x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarIVA != null)
                                                            {
                                                                buscarIVA.debito += movNuevo.debito;
                                                                buscarIVA.debitoniif += movNuevo.debitoniif;
                                                                buscarIVA.credito += movNuevo.credito;
                                                                buscarIVA.creditoniif += movNuevo.creditoniif;
                                                                buscarIVA.basecontable += movNuevo.basecontable;
                                                                context.Entry(buscarIVA).State = EntityState.Modified;
                                                                context.SaveChanges();
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro = parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }

                                                        }

                                                        #endregion  //credito

                                                        #region Ingreso

                                                        bool siva = Request["idtipotarifa" + i] == "2";

                                                        if (parametro.id_nombre_parametro == 11 && siva != true)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaVenta = pcr.cuenta_ventas;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaVenta != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaVenta);
                                                                    movNuevo.centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    ;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaVenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    ;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);

                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                        movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = Request["idtipotarifa" + i] == "2"
                                                                    ? parametro.id_nombre_parametro == 11
                                                                        ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                        : parametro.centro
                                                                    : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                   {

                   }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);

                                                                    movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debitoniif = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    movNuevo.debito = Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                }

                                                                //context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarVenta = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == encabezado.idencabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarVenta != null)
                                                            {
                                                                buscarVenta.basecontable += movNuevo.basecontable;
                                                                buscarVenta.debito += movNuevo.debito;
                                                                buscarVenta.debitoniif += movNuevo.debitoniif;
                                                                buscarVenta.credito += movNuevo.credito;
                                                                buscarVenta.creditoniif += movNuevo.creditoniif;
                                                                context.Entry(buscarVenta).State = EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 11
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        #region Inventario

                                                        if (parametro.id_nombre_parametro == 20)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaInven = pcr.cta_inventario;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaInven != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaInven);
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaInven)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(baseUnitario, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro = parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;

                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debitoniif = 0;
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                        movNuevo.debito = 0;
                                                                    }

                                                                    context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);
                                                                /*if (info.aplicaniff==true)
                   {

                   }*/

                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;

                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debitoniif = 0;
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    movNuevo.debito = 0;
                                                                }

                                                                context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarInventario = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == encabezado.idencabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarInventario != null)
                                                            {
                                                                buscarInventario.basecontable += movNuevo.basecontable;
                                                                buscarInventario.debito += movNuevo.debito;
                                                                buscarInventario.debitoniif += movNuevo.debitoniif;
                                                                buscarInventario.credito += movNuevo.credito;
                                                                buscarInventario.creditoniif += movNuevo.creditoniif;
                                                                context.Entry(buscarInventario).State =
                                                                    EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro = parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        #region Costo

                                                        if (parametro.id_nombre_parametro == 12)
                                                        {
                                                            icb_referencia perfilReferencia =
                                                                context.icb_referencia.FirstOrDefault(x =>
                                                                    x.ref_codigo == lineas.codigo);
                                                            int perfilBuscar = Convert.ToInt32(perfilReferencia.perfil);
                                                            perfilcontable_referencia pcr = context.perfilcontable_referencia.FirstOrDefault(r =>
                                                                r.id == perfilBuscar);

                                                            #region Tiene perfil la referencia

                                                            if (pcr != null)
                                                            {
                                                                int? cuentaCosto = pcr.cuenta_costo;

                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;

                                                                #region tiene perfil y cuenta asignada al perfil

                                                                if (cuentaCosto != null)
                                                                {
                                                                    movNuevo.cuenta = Convert.ToInt32(cuentaCosto);
                                                                    movNuevo.centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == cuentaCosto)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion

                                                                #region tiene perfil pero no tiene cuenta asignada

                                                                else
                                                                {
                                                                    movNuevo.cuenta = parametro.cuenta;
                                                                    movNuevo.centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro;
                                                                    ;
                                                                    movNuevo.fec = DateTime.Now;
                                                                    movNuevo.fec_creacion = DateTime.Now;
                                                                    movNuevo.userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]);
                                                                    movNuevo.documento = Convert.ToString(eg.numero);

                                                                    cuenta_puc infoReferencia = context.cuenta_puc
                                                                        .Where(a => a.cntpuc_id == parametro.cuenta)
                                                                        .FirstOrDefault();
                                                                    if (infoReferencia.manejabase)
                                                                    {
                                                                        movNuevo.basecontable =
                                                                            Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                    }
                                                                    else
                                                                    {
                                                                        movNuevo.basecontable = 0;
                                                                    }

                                                                    if (infoReferencia.documeto)
                                                                    {
                                                                        movNuevo.documento = Convert.ToString(eg.numero);
                                                                    }

                                                                    if (infoReferencia.concepniff == 1)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 4)
                                                                    {
                                                                        movNuevo.creditoniif = 0;
                                                                        movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    if (infoReferencia.concepniff == 5)
                                                                    {
                                                                        movNuevo.credito = 0;
                                                                        movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                    }

                                                                    //context.mov_contable.Add(movNuevo);
                                                                }

                                                                #endregion
                                                            }

                                                            #endregion

                                                            #region La referencia no tiene perfil

                                                            else
                                                            {
                                                                movNuevo.id_encab = encabezado.idencabezado;
                                                                movNuevo.seq = secuencia;
                                                                movNuevo.idparametronombre = parametro.id_nombre_parametro;
                                                                movNuevo.cuenta = parametro.cuenta;
                                                                movNuevo.centro = Request["idtipotarifa" + i] == "2"
                                                                    ? parametro.id_nombre_parametro == 12
                                                                        ? Convert.ToInt32(Request["centro_costo_tf" + i])
                                                                        : parametro.centro
                                                                    : parametro.centro;
                                                                movNuevo.fec = DateTime.Now;
                                                                movNuevo.fec_creacion = DateTime.Now;
                                                                movNuevo.userid_creacion =
                                                                    Convert.ToInt32(Session["user_usuarioid"]);


                                                                if (info.manejabase)
                                                                {
                                                                    movNuevo.basecontable =
                                                                        Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                                }
                                                                else
                                                                {
                                                                    movNuevo.basecontable = 0;
                                                                }

                                                                if (info.documeto)
                                                                {
                                                                    movNuevo.documento = Convert.ToString(eg.numero);
                                                                }

                                                                if (buscarCuenta.concepniff == 1)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);

                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 4)
                                                                {
                                                                    movNuevo.creditoniif = 0;
                                                                    movNuevo.debitoniif = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                if (buscarCuenta.concepniff == 5)
                                                                {
                                                                    movNuevo.credito = 0;
                                                                    movNuevo.debito = Convert.ToDecimal(cr, Cultureinfo);
                                                                }

                                                                context.mov_contable.Add(movNuevo);
                                                            }

                                                            #endregion

                                                            mov_contable buscarCosto = context.mov_contable.FirstOrDefault(x =>
                                                                x.id_encab == encabezado.idencabezado &&
                                                                x.cuenta == movNuevo.cuenta &&
                                                                x.idparametronombre == parametro.id_nombre_parametro);
                                                            if (buscarCosto != null)
                                                            {
                                                                buscarCosto.basecontable += movNuevo.basecontable;
                                                                buscarCosto.debito += movNuevo.debito;
                                                                buscarCosto.debitoniif += movNuevo.debitoniif;
                                                                buscarCosto.credito += movNuevo.credito;
                                                                buscarCosto.creditoniif += movNuevo.creditoniif;
                                                                context.Entry(buscarCosto).State = EntityState.Modified;
                                                            }
                                                            else
                                                            {
                                                                mov_contable crearMovContable = new mov_contable
                                                                {
                                                                    id_encab = encabezado.idencabezado,
                                                                    seq = secuencia,
                                                                    idparametronombre =
                                                                        parametro.id_nombre_parametro,
                                                                    cuenta = Convert.ToInt32(movNuevo.cuenta),
                                                                    centro =
                                                                        Request["idtipotarifa" + i] == "2"
                                                                            ? parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : parametro.centro
                                                                            : parametro.centro,
                                                                    nit = encabezado.nit,
                                                                    fec = DateTime.Now,
                                                                    debito = movNuevo.debito,
                                                                    debitoniif = movNuevo.debitoniif,
                                                                    basecontable = movNuevo.basecontable,
                                                                    credito = movNuevo.credito,
                                                                    creditoniif = movNuevo.creditoniif,
                                                                    fec_creacion = DateTime.Now,
                                                                    userid_creacion =
                                                                        Convert.ToInt32(Session["user_usuarioid"]),
                                                                    detalle =
                                                                        "Facturacion de repuestos con consecutivo " +
                                                                        eg.numero,
                                                                    estado = true
                                                                };
                                                                context.mov_contable.Add(crearMovContable);
                                                                context.SaveChanges();
                                                            }
                                                        }

                                                        #endregion

                                                        #region Cuentas X Cobrar

                                                        if (parametro.id_nombre_parametro == 10)
                                                        {

                                                            if (info.manejabase)
                                                            {
                                                                movNuevo.basecontable = Convert.ToDecimal(valor_totalenca, Cultureinfo);
                                                            }
                                                            else
                                                            {
                                                                movNuevo.basecontable = 0;
                                                            }

                                                            if (info.documeto)
                                                            {
                                                                movNuevo.documento = Convert.ToString(modelo.pedido);
                                                            }

                                                            if (buscarCuenta.concepniff == 1)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);

                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 4)
                                                            {
                                                                movNuevo.creditoniif = 0;
                                                                movNuevo.debitoniif = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                            }

                                                            if (buscarCuenta.concepniff == 5)
                                                            {
                                                                movNuevo.credito = 0;
                                                                movNuevo.debito = Convert.ToDecimal(costoTotal, Cultureinfo);
                                                            }
                                                        }

                                                        #endregion

                                                        secuencia++;
                                                        //Cuentas valores

                                                        #region Cuentas valores

                                                        cuentas_valores buscar_cuentas_valores =
                                                            context.cuentas_valores.FirstOrDefault(x =>
                                                                x.centro == parametro.centro &&
                                                                x.cuenta == movNuevo.cuenta && x.nit == movNuevo.nit);
                                                        if (buscar_cuentas_valores != null)
                                                        {
                                                            buscar_cuentas_valores.debito += Math.Round(movNuevo.debito);
                                                            buscar_cuentas_valores.credito += Math.Round(movNuevo.credito);
                                                            buscar_cuentas_valores.debitoniff +=
                                                                Math.Round(movNuevo.debitoniif);
                                                            buscar_cuentas_valores.creditoniff +=
                                                                Math.Round(movNuevo.creditoniif);
                                                            context.Entry(buscar_cuentas_valores).State = EntityState.Modified;

                                                        }
                                                        else
                                                        {
                                                            DateTime fechaHoy = DateTime.Now;
                                                            cuentas_valores crearCuentaValor = new cuentas_valores
                                                            {
                                                                ano = fechaHoy.Year,
                                                                mes = fechaHoy.Month,
                                                                cuenta = movNuevo.cuenta,
                                                                centro = Request["idtipotarifa" + i] == "2"
                                                                        ? parametro.id_nombre_parametro == 11
                                                                            ? Convert.ToInt32(
                                                                                Request["centro_costo_tf" + i])
                                                                            : parametro.id_nombre_parametro == 12
                                                                                ? Convert.ToInt32(
                                                                                    Request["centro_costo_tf" + i])
                                                                                : movNuevo.centro
                                                                        : movNuevo.centro
                                                            };
                                                            crearCuentaValor.nit = movNuevo.nit;
                                                            crearCuentaValor.debito = Math.Round(movNuevo.debito);
                                                            crearCuentaValor.credito = Math.Round(movNuevo.credito);
                                                            crearCuentaValor.debitoniff = Math.Round(movNuevo.debitoniif);
                                                            crearCuentaValor.creditoniff = Math.Round(movNuevo.creditoniif);
                                                            context.cuentas_valores.Add(crearCuentaValor);

                                                        }

                                                        #endregion

                                                        totalCreditos += Math.Round(movNuevo.credito);
                                                        totalDebitos += Math.Round(movNuevo.debito);
                                                        listaDescuadrados.Add(new DocumentoDescuadradoModel
                                                        {
                                                            NumeroCuenta =
                                                                "(" + buscarCuenta.cntpuc_numero + ")" +
                                                                buscarCuenta.cntpuc_descp,
                                                            DescripcionParametro = descripcionParametro,
                                                            ValorDebito = movNuevo.debito,
                                                            ValorCredito = movNuevo.credito
                                                        });
                                                    }
                                                }
                                            }

                                            #endregion

                                            //Referencias Inven
                                            #region referencias inven

                                            int anio = DateTime.Now.Year;
                                            int mes = DateTime.Now.Month;

                                            referencias_inven refin = new referencias_inven();

                                            referencias_inven existencia = context.referencias_inven.FirstOrDefault(x =>
                                                x.ano == anio && x.mes == mes && x.codigo == codigo && x.bodega == bodega);

                                            var entrada = false;
                                            if (doc_interno.doc_interno_asociado != null)
                                            {//calculo el comportamiento del documento interno asociado

                                                var docinternoaso = context.tp_doc_registros.Where(d => d.tpdoc_id == doc_interno.doc_interno_asociado.Value).FirstOrDefault();
                                                if (docinternoaso.entrada_salida != null)
                                                {
                                                    entrada = docinternoaso.entrada_salida.Value;
                                                }
                                            }

                                            if (existencia != null)
                                            {
                                                if (entrada == false)
                                                {
                                                    existencia.codigo = codigo;
                                                    existencia.can_sal += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    existencia.cos_sal +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.can_vta += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    existencia.cos_vta +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.val_vta += baseUnitario;
                                                }
                                                else
                                                {
                                                    existencia.codigo = codigo;
                                                    existencia.can_ent += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    existencia.cos_ent +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.can_com += Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    existencia.cos_com +=
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //(final * Convert.ToDecimal(Request["cantidadReferencia" + i])); cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    existencia.val_vta += 0;
                                                    existencia.costo_prom = baseUnitario;
                                                }

                                                context.Entry(existencia).State = EntityState.Modified;
                                                context.SaveChanges();
                                            }
                                            else
                                            {
                                                refin.bodega = bodega;
                                                refin.codigo = codigo;
                                                refin.ano = Convert.ToInt16(DateTime.Now.Year);
                                                refin.mes = Convert.ToInt16(DateTime.Now.Month);
                                                refin.modulo = "R";
                                                if (entrada == false)
                                                {
                                                    refin.can_sal = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    refin.cos_sal =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.can_vta = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    refin.cos_vta =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.val_vta = baseUnitario;
                                                }
                                                else
                                                {
                                                    refin.can_ent = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    refin.cos_ent =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.can_com = Convert.ToDecimal(Request["cantidadReferencia" + i], Cultureinfo);
                                                    refin.cos_com =
                                                        Convert.ToDecimal(
                                                            cr, Cultureinfo); //final; cambio solicitado por la ingeniera liliana el dia 10/09/18
                                                    refin.val_vta = 0;
                                                    existencia.costo_prom = Convert.ToDecimal(
                                                            cr, Cultureinfo);

                                                }




                                                context.referencias_inven.Add(refin);
                                                context.SaveChanges();
                                            }

                                            #endregion


                                        }

                                    #region validaciones para guardar

                                    if (Math.Round(totalDebitos) != Math.Round(totalCreditos))
                                    {
                                        TempData["documento_descuadrado"] =
                                            "El documento no tiene los movimientos calculados correctamente, verifique el perfil del documento";

                                        ViewBag.documentoSeleccionado = encabezado.tipo;
                                        ViewBag.bodegaSeleccionado = encabezado.bodega;
                                        ViewBag.perfilSeleccionado = encabezado.perfilcontable;

                                        ViewBag.documentoDescuadrado = listaDescuadrados;
                                        ViewBag.calculoDebito = totalDebitos;
                                        ViewBag.calculoCredito = totalCreditos;

                                        dbTran.Rollback();
                                        listas2(modelo);
                                        BuscarFavoritos(menu);
                                        return RedirectToAction("FacturarRepuestos", "FacturacionRepuestos", new { menu });
                                        //return RedirectToAction("DetalleFactura", "FacturacionRepuestos", new { menu });
                                    }

                                    funciono = 1;

                                    #endregion



                                }
                                if (numinterna > 0)
                                {
                                    listaelementos = listaelementos.Where(x => x.tipo_tarifa == tipotarifa).ToList();


                                    int empresa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P33").Select(z => z.syspar_value).FirstOrDefault());
                                    int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());
                                    int documento = context.tp_doc_registros.Where(x => x.tp_doc_sw.sw == swclasifica).Select(e => e.tpdoc_id).FirstOrDefault();
                                    grupoconsecutivos grupointerrep = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == documento && x.bodega_id == bodega);
                                    DocumentoPorBodegaController docinterrep = new DocumentoPorBodegaController();
                                    long consecutivointerrep = docinterrep.BuscarConsecutivo(grupointerrep.grupo);
                                    encab_documento docencabezado = new encab_documento();
                                    docencabezado.tipo = documento;
                                    docencabezado.numero = consecutivointerrep;
                                    docencabezado.fecha = DateTime.Now;
                                    docencabezado.nit = empresa;
                                    docencabezado.bodega = Convert.ToInt32(bodega);
                                    docencabezado.fec_creacion = DateTime.Now;
                                    docencabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                                    docencabezado.valor_total = Convert.ToDecimal(Request["totaltotal"]);
                                    docencabezado.impoconsumo = 0;
                                    docencabezado.anulado = false;
                                    docencabezado.estado = true;
                                    context.encab_documento.Add(docencabezado);
                                    context.SaveChanges();



                                    for (int i = 0; i < numinterna; i++)
                                    {
                                        int ano = DateTime.Now.Year;
                                        int mes = DateTime.Now.Month;
                                        int bodegaconsul = Convert.ToInt32(bodega);
                                        string referencia = listaelementos[i].codigo;
                                        referencias_inven referenciax = context.referencias_inven.Where(x => x.codigo == referencia && x.ano == ano && x.mes == mes && x.bodega == bodegaconsul).FirstOrDefault();


                                        lineas_documento linea_doc_rep = new lineas_documento
                                        {
                                            id_encabezado = docencabezado.idencabezado,
                                            codigo = listaelementos[i].codigo,
                                            fec = DateTime.Now,
                                            nit = buscar.nit,
                                            cantidad = listaelementos[i].cantidad,
                                            porcentaje_iva = float.Parse(listaelementos[i].porcentaje_iva.ToString()),
                                            valor_unitario = referenciax.costo_prom, //costo promedio 
                                            porcentaje_descuento = float.Parse(listaelementos[i].porcentaje_descuento.ToString()),
                                            costo_unitario = referenciax.costo_prom,
                                            bodega = Convert.ToInt32(bodega),
                                            cantidad_und = 0,
                                            cantidad_pedida = 0,
                                            costo_unitario_sin = 0,
                                            cantidad_devuelta = 0,
                                            fec_creacion = DateTime.Now,
                                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                                            estado = true,
                                            costo_niff = 0,
                                            id_tarifa_cliente = tipotarifa
                                        };
                                        context.lineas_documento.Add(linea_doc_rep);
                                        context.SaveChanges();
                                    }

                                    funciono = 1;

                                    if (idencanbinter != 0)
                                    {
                                        doc.ActualizarConsecutivo(grupointerrep.grupo, consecutivointerrep);

                                    }

                                    idencanbinter = Convert.ToInt32(docencabezado.numero.ToString());
                                    idencanbinternum = docencabezado.idencabezado;

                                }
                                if (funciono > 0)
                                {
                                    //visualiza el numero de encab y el id para descargar el pdf
                                    if (idencanbinter > 0)
                                    {
                                        TempData["mensajeinterno"] = idencanbinter;
                                        TempData["mensajeinterno2"] = idencanbinternum;
                                    }
                                    else
                                    {

                                        TempData["mensaje"] = "Registro actualizado correctamente";
                                    }

                                    context.SaveChanges();
                                    dbTran.Commit();

                                    DocumentoPorBodegaController conse = new DocumentoPorBodegaController();
                                    doc.ActualizarConsecutivo(grupo.grupo, consecutivo);
                                    return RedirectToAction("FacturarRepuestos", "FacturacionRepuestos", new { menu });
                                }
                            }
                            else
                            {
                                TempData["mensaje_error"] = "no hay consecutivo";
                            }
                        }
                        //cierre
                        else
                        {
                            TempData["mensaje_error"] = "Lista vacia";
                        }
                    }
                    catch (DbEntityValidationException ex)
                    {
                        var mensaje = ex;   
                        dbTran.Rollback();
                        throw;
                    }
                }
            }
            else
            {
                TempData["mensaje_error"] = "No fue posible actualizar el registro, por favor valide";
                List<ModelErrorCollection> errors = ModelState.Select(x => x.Value.Errors)
                    .Where(y => y.Count > 0)
                    .ToList();
            }
            var encabe = context.encab_documento.Where(d => d.idencabezado == modelo.idencabezado).FirstOrDefault();
            if (encabe.usa_cupo == true)
            {
                ViewBag.usa_cupo = 1;
                ViewBag.cupo_disponible = buscarCapacidadCupo(encabe.nit);
            }
            else
            {
                ViewBag.usa_cupo = 0;
                ViewBag.cupo_disponible = 0;
            }
            listas();
            BuscarFavoritos(menu);
            return RedirectToAction("FacturarRepuestos", "FacturacionRepuestos", new { menu });
        }


        public JsonResult EditarRepuesto(int? id)
        {
            if (id != null)
            {
                var repuestox = context.lineas_documento.Where(d => d.id == id).FirstOrDefault();
                if (repuestox != null)
                {
                    var buscarCliente = (from encab in context.encab_documento
                                         join tercero in context.icb_terceros
                                          on encab.nit equals tercero.tercero_id
                                         join cliente in context.tercero_cliente
                                            on tercero.tercero_id equals cliente.tercero_id
                                         select new
                                         {
                                             cliente.lprecios_repuestos,
                                             cliente.dscto_rep
                                         }).FirstOrDefault();



                    decimal valorDescuento = Math.Round(repuestox.valor_unitario *
                                                    (Convert.ToDecimal(buscarCliente.dscto_rep) > Convert.ToDecimal(repuestox.porcentaje_descuento) &&
                                                     Convert.ToDecimal(buscarCliente.dscto_rep) <=
                                                     Convert.ToDecimal(repuestox.icb_referencia.por_dscto_max)
                                                        ?
                                                        Convert.ToDecimal(buscarCliente.dscto_rep)
                                                        :
                                                        Convert.ToDecimal(buscarCliente.dscto_rep) <
                                                        Convert.ToDecimal(repuestox.porcentaje_descuento) &&
                                                        Convert.ToDecimal(repuestox.porcentaje_descuento) <=
                                                        Convert.ToDecimal(repuestox.icb_referencia.por_dscto_max)
                                                            ? Convert.ToDecimal(repuestox.porcentaje_descuento)
                                                            : 0) / 100 * repuestox.cantidad);
                    decimal valorIva = Math.Round((repuestox.cantidad * repuestox.valor_unitario - Math.Round(
                                                   repuestox.valor_unitario *
                                                   (Convert.ToDecimal(buscarCliente.dscto_rep) > Convert.ToDecimal(repuestox.porcentaje_descuento) &&
                                                    Convert.ToDecimal(buscarCliente.dscto_rep) <=
                                                    Convert.ToDecimal(repuestox.icb_referencia.por_dscto_max)
                                                       ?
                                                       Convert.ToDecimal(buscarCliente.dscto_rep)
                                                       :
                                                       Convert.ToDecimal(buscarCliente.dscto_rep) <
                                                       Convert.ToDecimal(repuestox.porcentaje_descuento) &&
                                                       Convert.ToDecimal(repuestox.porcentaje_descuento) <=
                                                       Convert.ToDecimal(repuestox.icb_referencia.por_dscto_max)
                                                           ? Convert.ToDecimal(repuestox.porcentaje_descuento)
                                                           : 0) / 100 * repuestox.cantidad)) * Convert.ToDecimal(repuestox.porcentaje_iva) / 100);
                    decimal valorTotal = Math.Round(repuestox.valor_unitario * repuestox.cantidad - valorDescuento
                                                + valorIva);

                    var data = new
                    {
                        porcentajeIva = Convert.ToDecimal(repuestox.porcentaje_iva),
                        porcentajeDescuento = Convert.ToDecimal(repuestox.porcentaje_descuento),
                        precio = repuestox.valor_unitario,
                        repuestox.cantidad,

                        codigo = repuestox.icb_referencia.ref_codigo,
                        nombreReferencia = repuestox.icb_referencia.ref_descripcion,
                        repuestox.id,
                        valorDescuento,
                        valorIva,
                        valorTotal
                    };
                    return Json(data);
                }

                return Json(0);
            }

            return Json(0);
        }


        public void EliminarRepuesto(int? id)
        {
            if (id != null)
            {

                lineas_documento dato = context.lineas_documento.Find(id);
                context.Entry(dato).State = EntityState.Deleted;
                context.SaveChanges();
            }

        }


        public JsonResult GuardarEdicionRepuesto(int? idrepuesto, int? cantidad, int? tarifa)
        {
            if (idrepuesto == null || cantidad == null || tarifa == null)
            {
                return Json(0);
            }

            //busco el repuesto
            lineas_documento repuestox = context.lineas_documento.Where(d => d.id == idrepuesto).FirstOrDefault();
            if (repuestox == null)
            {
                return Json(0);
            }

            repuestox.id_tarifa_cliente = tarifa.Value;
            repuestox.cantidad = cantidad.Value;
            context.Entry(repuestox).State = EntityState.Modified;

            int guardar = context.SaveChanges();
            if (guardar > 0)
            {
                return Json(1);
            }

            return Json(0);
        }

        public JsonResult CompletarTablaRepuestos(int? id, int? pedido)
        {
            var buscar = (from a in context.lineas_documento
                          join mov in context.icb_referencia_movdetalle
                              on a.codigo equals mov.ref_codigo
                          //where mov.icb_referencia_mov.refmov_numero== pedido
                          where a.id_encabezado == id && mov.icb_referencia_mov.refmov_id == a.encab_documento.pedido
                          select new
                          {
                              a.id,
                              a.codigo,
                              a.cantidad,
                              mov.icb_referencia.ref_descripcion,
                              a.valor_unitario,
                              a.porcentaje_descuento,
                              a.porcentaje_iva,
                              a.encab_documento.valor_bolsa,
                              a.rtipocliente.descripcion,
                              a.id_tarifa_cliente,
                              mov.tipotarifa,
                              mov.respuestaInterna,
                              mov.idcentro,
                              mov.centro_costo.centcst_nombre,
                              mov.refdet_id,
                          }).ToList();

            var data = buscar.GroupBy(x=> x.id).Select(x => new
            {
                id=x.Key,
                codigo = x.Select(p => p.codigo).FirstOrDefault() != null ? x.Select(p => p.codigo).FirstOrDefault().ToString() : "",
                //cantidad = x.Select(p => p.cantidad).FirstOrDefault() != null ? Convert.ToInt32(x.Select(p => p.cantidad).FirstOrDefault())  : 0,
                cantidad = x.Select(p => p.cantidad).FirstOrDefault(),
                ref_descripcion = x.Select(p => p.ref_descripcion).FirstOrDefault() != null ? x.Select(p => p.ref_descripcion).FirstOrDefault() : "",
                valor_unitario = Convert.ToDecimal(x.Select(p => p.valor_unitario).FirstOrDefault()),
                porcentaje_descuento = x.Select(p => p.porcentaje_descuento).FirstOrDefault() != null ? Convert.ToDecimal(x.Select(p => p.porcentaje_descuento).FirstOrDefault()) : 0,
                porcentaje_iva = x.Select(p => p.porcentaje_iva).FirstOrDefault() != null ? Convert.ToDecimal(x.Select(p => p.porcentaje_iva).FirstOrDefault()) : 0,
                ic_bolsa = x.Select(p => p.valor_bolsa).FirstOrDefault() != null ? Convert.ToDecimal(x.Select(p => p.valor_bolsa).FirstOrDefault()) : 0,
                tarifa = x.Select(p => p.descripcion).FirstOrDefault() != null ? x.Select(p => p.descripcion).FirstOrDefault().ToString() : "",
                id_tarifa_cliente= x.Select(p => p.id_tarifa_cliente).FirstOrDefault() != null ? Convert.ToInt32(x.Select(p => p.id_tarifa_cliente).FirstOrDefault()) : 0,
                idcentro = x.Select(p => p.idcentro).FirstOrDefault() != null ? Convert.ToInt32(x.Select(p => p.idcentro).FirstOrDefault()) : 0,
                centro_costo = x.Select(p => p.centcst_nombre).FirstOrDefault() != null ? x.Select(p => p.centcst_nombre).FirstOrDefault().ToString() : "",
                respuestaInterna= x.Select(p => p.respuestaInterna).FirstOrDefault(),
                refdet_id= x.Select(p => p.refdet_id).FirstOrDefault(),

            });

            return Json(data, JsonRequestBehavior.AllowGet);
        }


        public JsonResult DocTarifainternaFactura(int id)
        {
            int idencabezado = 0;
            int tipotarifa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P147").Select(z => z.syspar_value).FirstOrDefault());
            var repuestosencab = context.encab_documento.Where(x => x.idencabezado == id).FirstOrDefault();
            var repuest = context.lineas_documento.Where(x => x.id_encabezado == id && x.id_tarifa_cliente == tipotarifa).ToList();

            int empresa = Convert.ToInt32(context.icb_sysparameter.Where(s => s.syspar_cod == "P33").Select(z => z.syspar_value).FirstOrDefault());
            try
            {
                if (repuest != null && repuest.Count > 0)
                {
                    int swclasifica = Convert.ToInt32(context.icb_sysparameter.Where(z => z.syspar_cod == "P149").Select(x => x.syspar_value).FirstOrDefault());
                    int documento = context.tp_doc_registros.Where(x => x.tp_doc_sw.sw == swclasifica).Select(e => e.tpdoc_id).FirstOrDefault();
                    grupoconsecutivos grupointerrep = context.grupoconsecutivos.FirstOrDefault(x => x.documento_id == documento && x.bodega_id == repuestosencab.bodega);
                    DocumentoPorBodegaController docinterrep = new DocumentoPorBodegaController();
                    long consecutivointerrep = docinterrep.BuscarConsecutivo(grupointerrep.grupo);

                    encab_documento docencabezado = new encab_documento();

                    docencabezado.tipo = documento;
                    docencabezado.numero = consecutivointerrep;
                    docencabezado.fecha = DateTime.Now;
                    docencabezado.nit = empresa;
                    docencabezado.bodega = Convert.ToInt32(repuestosencab.bodega);
                    docencabezado.fec_creacion = DateTime.Now;
                    docencabezado.userid_creacion = Convert.ToInt32(Session["user_usuarioid"]);
                    docencabezado.valor_total = Convert.ToDecimal(Request["totaltotal"]);
                    docencabezado.impoconsumo = 0;
                    docencabezado.anulado = false;
                    docencabezado.estado = true;

                    context.encab_documento.Add(docencabezado);
                    context.SaveChanges();
                    idencabezado = docencabezado.idencabezado;
                    foreach (var item in repuest)
                    {

                        lineas_documento linea_doc_rep = new lineas_documento
                        {
                            id_encabezado = docencabezado.idencabezado,
                            codigo = item.codigo,

                            fec = DateTime.Now,
                            nit = item.nit,
                            cantidad = item.cantidad,
                            porcentaje_iva = item.porcentaje_iva,
                            valor_unitario = item.valor_unitario,
                            porcentaje_descuento = item.porcentaje_descuento,
                            costo_unitario = item.costo_unitario,
                            bodega = item.bodega,
                            cantidad_und = 0,
                            cantidad_pedida = 0,
                            costo_unitario_sin = 0,
                            cantidad_devuelta = 0,
                            fec_creacion = DateTime.Now,
                            userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                            estado = true,
                            costo_niff = 0,
                            id_tarifa_cliente = tipotarifa
                        };
                        context.lineas_documento.Add(linea_doc_rep);
                        context.SaveChanges();
                    }

                }
            }
            catch (Exception ex)
            {
                var mensaje = ex.Message;
                throw ex;

            }




            return Json(idencabezado, JsonRequestBehavior.AllowGet);
        }









        public JsonResult CompletarRetenciones(int? id)
        {
            var buscarRetenciones = (from a in context.encab_documento
                                     where a.idencabezado == id
                                     select new
                                     {
                                         a.retencion,
                                         a.retencion_iva,
                                         a.retencion_ica,
                                         a.retencion_causada
                                     }).ToList();

            var data = new
            {
                buscarRetenciones
            };
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarPedido(int? id,  string tipo)
        {
            int?[] arraydesdepedidos;
            if (tipo == "2")
                {
                arraydesdepedidos = new int?[] { 1, 2 };       
                }
            else {
                arraydesdepedidos = new int?[] { 1 };
                }

            var data = (from r in context.icb_referencia_movdetalle
                        join mov in context.icb_referencia_mov
                            on r.refmov_id equals mov.refmov_id
                        where r.refmov_id == id && r.tiene_stock == true && r.facturado == false 
                        && arraydesdepedidos.Contains(r.desdepedido)
                        select new
                        {
                            r.refdet_id,
                            codigo = r.ref_codigo,
                            r.icb_referencia.ref_descripcion,
                            cantidad = r.refdet_cantidad,
                            r.valor_unitario,
                            descuento = r.pordscto,
                            iva = r.poriva,
                            r.valor_total,
                            nit = mov.cliente,
                            mov.vendedor,
                            r.tipotarifa,
                            r.respuestaInterna,
                            r.idcentro,
                            r.centro_costo.centcst_nombre


                        }).ToList();

            var data2 = data.Select(x => new
            {
                x.refdet_id,
                x.codigo,
                referencia = x.codigo + " - " + x.ref_descripcion,
                x.cantidad,
                x.valor_unitario,
                x.descuento,
                x.iva,
                x.valor_total,
                x.nit,
                x.vendedor,
                x.tipotarifa,
                x.respuestaInterna,
                tipostarijas = context.rtipocliente.Select(s => new { s.descripcion, s.id }).ToList(),
                idcentro = x.idcentro != null ? x.idcentro : 0,
                centcst_nombre = x.centcst_nombre != null ? x.centcst_nombre : ""

            });

            return Json(data2, JsonRequestBehavior.AllowGet);
        }

        public JsonResult buscarAccesoriosPedido(int id)
        {
            var pedi = context.vpedido.FirstOrDefault(x => x.numero == id);
            int idPedido = pedi.id;

            //actualizo el tipo de tarifa de los repuestos
            var listorepuestos = pedi.vpedrepuestos.ToList();
            foreach (var item in listorepuestos)
            {
                if (item.tipotarifa == null)
                {
                    item.tipotarifa = 1;
                    context.Entry(item).State = EntityState.Modified;
                    context.SaveChanges();
                }
            }

            var data = (from v in context.vpedrepuestos
                        join r in context.icb_referencia
                            on v.referencia equals r.ref_codigo
                        join c in context.centro_costo
                        on v.idcentro equals c.centcst_id into cen
                        from c in cen.DefaultIfEmpty()
                        where v.pedido_id == idPedido && v.facturado == false && v.estado == true
                        select new
                        {
                            v.id,
                            v.referencia,
                            codigo = v.referencia + " | " + r.ref_descripcion,
                            cantidad = v.cantidad != null ? v.cantidad.Value : 0,
                            vrunitario = v.vrunitario != null ? v.vrunitario.Value : 0,
                            vrtotal = v.vrtotal != null ? v.vrtotal.Value : 0,
                            v.obsequio,
                            v.respuestaInterna,
                            tipotarifas = context.rtipocliente.Select(x => new { x.id, x.descripcion }).ToList(),
                            v.tipotarifa,
                            descriptarifa = context.rtipocliente.Where(x => x.id == v.tipotarifa).Select(x => new { x.descripcion }).FirstOrDefault(),
                            v.idcentro,
                            ccosto = c.centcst_nombre != null ? c.centcst_nombre : "",
                            iva = v.iva != null ? v.iva : 0,
                            descuento = v.descuento != null ? v.descuento : 0
                        }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult buscarPedidoCliente(int? nit, int? bodega)
        {
            string a = context.icb_sysparameter.Where(x => x.syspar_cod == "P26").Select(x => x.syspar_value)
                .FirstOrDefault();
            int param = Convert.ToInt32(a);

            var data = (from r in context.icb_referencia_mov
                        where r.tpdocid == param && r.cliente == nit && r.bodega_id == bodega && r.idanulacion == null &&
                              r.estado
                        select new
                        {
                            id = r.refmov_id,
                            descripcion = r.refmov_numero + " - " + r.refmov_fecela,
                            asesor = r.vendedor
                        }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public int buscarCapacidadCupo(int? cliente)
        {
            //saldo de cupo final(cupo disponible - cupo utilizado a la fecha)
            int saldoCupo = 0;
            //cupo utilizado a la fecha
            int totalFacturas = 0;
            //creo variables para guardar el id de factura de respuestos y de accesorios 
            icb_sysparameter repuestos = context.icb_sysparameter.Where(x => x.syspar_cod == "P102").FirstOrDefault();
            int rep = repuestos != null ? Convert.ToInt32(repuestos.syspar_value) : 5;
            icb_sysparameter accesorios = context.icb_sysparameter.Where(x => x.syspar_cod == "P103").FirstOrDefault();
            int acc = accesorios != null ? Convert.ToInt32(accesorios.syspar_value) : 17;
            cliente = cliente != null ? cliente : 0;
            // variable que guarda una lista con todas las facturas de respuestos y accesorios que tenga el cliente (id de factura y valor de la factura)
            var data = (from factRep in context.encab_documento
                        where (factRep.tipo == rep || factRep.tipo == acc)
                              && factRep.nit == cliente && (factRep.usa_cupo==true || factRep.detalle_formas_pago_orden.Where(d=>d.idformas_pago==7).Count()>0)
                        select new
                        {
                            factRep.idencabezado,
                            costo = factRep.valor_cupo-factRep.valor_cupo_aplicado
                        }).ToList();
            //se recorre las facturas del cliente y sus correspondientes recibos de caja para determinar valor real en factura
            for (int i = 0; i < data.Count(); i++)
            {
                totalFacturas += calcularsaldo(data[i].idencabezado, Convert.ToInt32(data[i].costo));
            }
            //se consulta el cupo disponible con el que cuenta el cliente 
            tercero_cliente cupoCliente = context.tercero_cliente
                .Where(x => x.tercero_id == cliente && x.fec_cupo_limite >= DateTime.Now).FirstOrDefault();
            //se resta el total de facturas actualmente vigentes al cupo disponible del cliente
            if (cupoCliente != null)
            {
                saldoCupo = Convert.ToInt32(cupoCliente.cupocredito) - totalFacturas;
            }

            return saldoCupo;
        }

        //metodo para calcular saldo si existe cruce entre factura y recibo de caja 
        public int calcularsaldo(long? id, int saldo)
        {
            int totalFactura = 0;
            if (id != null)
            {
                var resultadoFactura = (from ed in context.encab_documento
                                        join cd in context.cruce_documentos
                                            on ed.idencabezado equals cd.id_encab_aplica
                                        join dp in context.documentos_pago
                                            on cd.id_encabezado equals dp.idtencabezado
                                        where cd.id_encab_aplica == id
                                        select new
                                        {
                                            dp.valor
                                        }).ToList();

                for (int i = 0; i < resultadoFactura.Count; i++)
                {
                    totalFactura += Convert.ToInt32(resultadoFactura[i].valor);
                }

                saldo = saldo - totalFactura;
                return saldo;
            }

            return totalFactura;
        }

        public JsonResult BuscarCosto(string codigo)
        {
            var datax = (from r in context.vw_promedio
                         where r.codigo == codigo
                               && r.mes == DateTime.Now.Month
                               && r.ano == DateTime.Now.Year
                         select new
                         {
                             costo = r.Promedio
                         }).ToList();
            var data = datax.Select(d => new
            {
                costo = d.costo != null ? d.costo.Value.ToString("N0", new CultureInfo("is-IS")) : "0"
            }).ToList();
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult buscarStock(string codigo, int bodega, string codigoPedido)
        {
            Expression<Func<vw_inventario_hoy, bool>> predicado = PredicateBuilder.True<vw_inventario_hoy>();
            Expression<Func<vw_inventario_hoy, bool>> predicado2 = PredicateBuilder.True<vw_inventario_hoy>();

            predicado = predicado.And(d => d.bodega == bodega);
            if (!string.IsNullOrWhiteSpace(codigo))
            {
                predicado = predicado.And(d => d.ref_codigo == codigo);
                predicado2 = predicado2.And(d => d.ref_codigo == codigo);
            }
            else if (!string.IsNullOrWhiteSpace(codigoPedido))
            {
                predicado = predicado.And(d => d.ref_codigo == codigoPedido);
                predicado2 = predicado2.And(d => d.ref_codigo == codigo);
            }

            decimal stock = context.vw_inventario_hoy.Where(predicado).Select(d => d.stock).FirstOrDefault();
            if (stock > 0)
            {
                return Json(new { puede = true, cantidad = stock }, JsonRequestBehavior.AllowGet);
            }

            predicado2 = predicado2.And(d => d.stock > 0);
            var data = context.vw_inventario_hoy.Where(predicado2).Select(d => new
            {
                d.ref_codigo,
                d.ref_descripcion,
                bodccs_nombre = d.nombreBodega,
                d.stock,
                codbodega = d.bodega,
                d.bodega,
            }).ToList();

            //var data22 = (from i in context.vw_inventario_hoy
            //            join r in context.icb_referencia
            //            on i.ref_codigo equals r.ref_codigo
            //            join b in context.bodega_concesionario
            //            on i.bodega equals b.id
            //            where (i.ref_codigo == codigo && i.stock > 0) || (i.ref_codigo == codigoPedido && i.stock > 0)
            //            select new
            //            {
            //                r.ref_codigo,
            //                r.ref_descripcion,
            //                b.bodccs_nombre,
            //                i.stock,
            //            }).ToList();

            var data2 = data.Select(x => new
            {
                x.ref_codigo,
                referencia = x.ref_codigo + " - " + x.ref_descripcion,
                x.bodccs_nombre,
                x.stock,
                x.codbodega,
                x.bodega,
            });
            int cuantos = data.Count();


            if (cuantos > 0)
            {
                return Json(new { puede = false, inven = true, info = data2 }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { puede = false, inven = false }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult solicitudRepuestosViejo(int bodega, int cliente, string referencia, int? cantidad, int? iva,
            decimal? valor)
        {
            var cant = context.icb_referencia.Where(x => x.ref_codigo == referencia)
                .Select(x => new { x.ref_cantidad_max, x.costo_unitario }).FirstOrDefault();
            rsolicitudesrepuestos nuevo = new rsolicitudesrepuestos
            {
                bodega = bodega,
                fecha = DateTime.Now,
                cliente = cliente,
                usuario = Convert.ToInt32(Session["user_usuarioid"]),
                Detalle = "Cliente vino a comprar y no hay stock",
                tiposolicitud = 2
            };
            context.rsolicitudesrepuestos.Add(nuevo);
            context.SaveChanges();

            rdetallesolicitud nuevoDetalle = new rdetallesolicitud
            {
                id_solicitud = nuevo.id,
                referencia = referencia,
                cantidad = cantidad != null ? cantidad : cant.ref_cantidad_max,
                iva = iva,
                valor = valor != null ? valor : cant.costo_unitario,
                userid_creacion = Convert.ToInt32(Session["user_usuarioid"]),
                fecha_creacion = DateTime.Now
            };
            context.rdetallesolicitud.Add(nuevoDetalle);
            context.SaveChanges();

            return Json(new { exito = true }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult calcularPrecioXTarifa(int? tipotarifa, string codigo, int pedido = 0, int cantidad = 0, string valorunitario = "", int ccosto = 0, decimal iva = 0, decimal descuento = 0, int autoriza = 0)
        {
            decimal precio = 0;
            int idpedderal = 0;

            if (tipotarifa != null && codigo != null)
            {
                //insertar el pedido directamente en la tabla vpedrepto


                decimal valorunitar = Convert.ToDecimal(valorunitario);
                int idpedido = context.vpedido.Where(x => x.numero == pedido).Select(s => s.id).FirstOrDefault();
                var existepedido = context.vpedrepuestos.Where(x => x.pedido_id == idpedido && x.referencia == codigo).FirstOrDefault();



                if (existepedido != null)
                {

                    existepedido.estado = true;
                    existepedido.facturado = false;
                    existepedido.cantidad = cantidad;
                    existepedido.vrunitario = Convert.ToDecimal(valorunitario, Cultureinfo);
                    existepedido.vrtotal = cantidad * Convert.ToDecimal(valorunitario, Cultureinfo);
                    context.Entry(existepedido).State = EntityState.Modified;
                    context.SaveChanges();
                }
                else
                {
                    vpedrepuestos vpedrepuest = new vpedrepuestos();
                    vpedrepuest.pedido_id = idpedido;
                    vpedrepuest.referencia = codigo;
                    vpedrepuest.cantidad = cantidad;
                    vpedrepuest.vrunitario = valorunitar;
                    vpedrepuest.vrtotal = cantidad * valorunitar;
                    vpedrepuest.obsequio = false;
                    vpedrepuest.instalado = false;
                    vpedrepuest.estado = true;
                    vpedrepuest.fec_creacion = DateTime.Now;
                    vpedrepuest.tipotarifa = tipotarifa;
                    vpedrepuest.iva = float.Parse(iva.ToString());
                    vpedrepuest.descuento = float.Parse(descuento.ToString());
                    vpedrepuest.idcentro = ccosto;
                    if (autoriza == 0)
                    {
                        vpedrepuest.respuestaInterna = null;
                    }
                    else if (autoriza == 1)
                    {
                        vpedrepuest.respuestaInterna = true;
                    }
                    else
                    {
                        vpedrepuest.respuestaInterna = false;
                    }



                    context.vpedrepuestos.Add(vpedrepuest);
                    context.SaveChanges();
                    idpedderal = vpedrepuest.id;
                }


                //busco la referencia
                icb_referencia refer = context.icb_referencia.Where(d => d.ref_codigo == codigo).FirstOrDefault();
                //busco los parametros de ese precio
                rparametrotipocliente parametrox = context.rparametrotipocliente.Where(d => d.idtipocliente == tipotarifa).FirstOrDefault();
                //busco el tipo de tarifa
                if (parametrox != null && refer != null)
                {
                    //busco el precio
                    switch (parametrox.valor)
                    {
                        case 1:
                            precio = refer.costo_promedio != null ? refer.costo_promedio.Value : 0;
                            break;
                        case 2:
                            precio = refer.precio_venta;
                            break;
                        default:
                            precio = refer.precio_venta;
                            break;
                    }

                    //busco el tipo de operacion
                    switch (parametrox.operacion)
                    {
                        case 1:
                            precio = precio + ((precio * Convert.ToDecimal(parametrox.porcentaje, Cultureinfo)) / 100);
                            break;
                        case 2:
                            precio = precio - ((precio * Convert.ToDecimal(parametrox.porcentaje, Cultureinfo)) / 100);
                            break;
                    }
                }
                else
                {
                    return Json(new { resultado = false }, JsonRequestBehavior.AllowGet);
                }


            }
            return Json(new { resultado = true, precio, idpedderal }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult EliminarReptoped(int id)
        {
            try
            {
                vpedrepuestos pedrepto = context.vpedrepuestos.Where(x => x.id == id).FirstOrDefault();
                context.vpedrepuestos.Remove(pedrepto);
                context.SaveChanges();

            }
            catch (Exception ex)
            {
                var mensaje = ex.Message;
            }
            return Json(0, JsonRequestBehavior.AllowGet);
        }


        public JsonResult DesactivarReptodetalle(int id)
        {
            try
            {


                List<vpedrepuestos> pedrepto = context.vpedrepuestos.Where(x => x.vpedido.numero == id).ToList();
                foreach (var item in pedrepto)
                {
                    item.estado = false;
                    context.Entry(item).State = EntityState.Modified;
                    context.SaveChanges();
                }


            }
            catch (Exception ex)
            {
                var mensaje = ex.Message;
                throw;
            }
            return Json(0, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarRetenciones(int? tipo_doc, int? nit, int? bodega, decimal? subTotal, decimal? totalDes, decimal? totalIVA)
        {
            decimal retefuente = 0;
            decimal reteica = 0;
            decimal reteiva = 0;
            decimal autoRetencion = 0;

            // Validacion para reteIVA, reteICA y retencion dependiendo del proveedor seleccionado
            tp_doc_registros buscarTipoDocRegistro = context.tp_doc_registros.FirstOrDefault(x => x.tpdoc_id == tipo_doc);
            //var buscarProveedor = context.tercero_proveedor.FirstOrDefault(x => x.tercero_id == nit);
            tercero_cliente buscarProveedor = context.tercero_cliente.FirstOrDefault(x => x.tercero_id == nit);

            int? regimen_proveedor = buscarProveedor != null ? buscarProveedor.tpregimen_id : 0;
            perfiltributario buscarPerfilTributario = context.perfiltributario.FirstOrDefault(x =>
                x.bodega == bodega && x.sw == buscarTipoDocRegistro.sw && x.tipo_regimenid == regimen_proveedor);

            if (buscarPerfilTributario != null)
            {
                if (buscarPerfilTributario.retfuente == "A" &&
                    subTotal - totalDes >= buscarTipoDocRegistro.baseretencion) //retencion
                {
                    retefuente = Math.Round(((decimal)(subTotal - totalDes)) * Convert.ToDecimal(buscarTipoDocRegistro.retencion / 100, Cultureinfo));
                }

                if (buscarPerfilTributario.retiva == "A" && totalIVA >= buscarTipoDocRegistro.baseiva) //reteiva
                {
                    reteiva = Math.Round((decimal)totalIVA * Convert.ToDecimal(buscarTipoDocRegistro.retiva / 100, Cultureinfo));
                }

                if (buscarPerfilTributario.autorretencion == "A") //autoretencion
                {
                    decimal tercero_acteco = buscarProveedor.acteco_tercero.autorretencion;
                    autoRetencion = Math.Round(((decimal)(subTotal - totalDes)) * Convert.ToDecimal(tercero_acteco / 100, Cultureinfo));
                }

                if (buscarPerfilTributario.retica == "A" &&
                    subTotal - totalDes >= buscarTipoDocRegistro.baseica) //reteica
                {
                    //var bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x => x.idcodica == buscarProveedor.acteco_id && x.bodega == bodega);
                    terceros_bod_ica bodega_acteco = context.terceros_bod_ica.FirstOrDefault(x =>
                        x.idcodica == buscarProveedor.actividadEconomica_id && x.bodega == bodega);

                    decimal tercero_acteco = buscarProveedor.acteco_tercero.tarifa;
                    if (bodega_acteco != null)
                    {
                        reteica = Math.Round(((decimal)(subTotal - totalDes)) * Convert.ToDecimal(bodega_acteco.porcentaje / 1000, Cultureinfo));
                    }

                    if (tercero_acteco != 0)
                    {
                        reteica = Math.Round(((decimal)(subTotal - totalDes)) * Convert.ToDecimal(buscarProveedor.acteco_tercero.tarifa / 1000, Cultureinfo));
                    }
                    else
                    {
                        reteica = Math.Round(((decimal)(subTotal - totalDes)) * Convert.ToDecimal(buscarTipoDocRegistro.retica / 1000, Cultureinfo));
                    }
                }
            }

            decimal totalretenciones = reteica + retefuente + reteiva + autoRetencion;

            decimal? valor_proveedor = subTotal - totalDes + totalIVA - totalretenciones + autoRetencion;

            var data = new
            {
                retefuente,
                reteica,
                reteiva,
                autoRetencion,
                totalretenciones,
                valor_proveedor
            };

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SolicitarAutorizacion(string codigo, int bodega, int costoprom, int valorautorizar)
        {

            string[] cadena = codigo.Split('|');
            string refcodigo = cadena[0];

            codigo = cadena[0];
            int usuario_actual = Convert.ToInt32(Session["user_usuarioid"]);
            icb_referencia refe = context.icb_referencia.Find(codigo);
            int result = 0;
            configuracion_envio_correos correoconfig = context.configuracion_envio_correos.Where(d => d.activo).FirstOrDefault();

            usuarios_autorizaciones usuarios_autorizacion = context.usuarios_autorizaciones.FirstOrDefault(x => x.tipoautorizacion == 4);
            if (usuarios_autorizacion != null)
            {
                autorizaciones existe = context.autorizaciones.FirstOrDefault(x => x.ref_codigo == codigo
                                                                        && x.user_autorizacion ==
                                                                        usuarios_autorizacion.user_id
                                                                        && x.tipo_autorizacion == 4
                                                                        && x.fecha_creacion.Value.Year ==
                                                                        DateTime.Now.Year
                                                                        && x.fecha_creacion.Value.Month ==
                                                                        DateTime.Now.Month
                                                                        && x.fecha_creacion.Value.Day ==
                                                                        DateTime.Now.Day);

                if (existe == null)
                {
                    int usuario_autorizacion = usuarios_autorizacion.user_id;

                    autorizaciones autorizacion = new autorizaciones
                    {
                        ref_codigo = codigo,
                        bodega = bodega,
                        user_autorizacion = usuario_autorizacion,
                        user_creacion = usuario_actual,
                        fecha_creacion = DateTime.Now,
                        tipo_autorizacion = 4,
                        valor_autorizar = valorautorizar,
                        costo_referencia = costoprom
                    };
                    context.autorizaciones.Add(autorizacion);
                    context.SaveChanges();
                    int autorizacion_id = context.autorizaciones.OrderByDescending(x => x.id)
                        .FirstOrDefault(x => x.tipo_autorizacion == 4).id;
                    result = 1;

                    try
                    {
                        notificaciones correo_enviado = context.notificaciones.FirstOrDefault(x =>
                            x.user_destinatario == usuario_autorizacion && x.enviado != true &&
                            x.autorizacion_id == autorizacion_id);
                        if (correo_enviado == null)
                        {
                            users user_destinatario = context.users.Find(usuario_autorizacion);
                            users user_remitente = context.users.Find(usuario_actual);

                            MailAddress de = new MailAddress(correoconfig.correo, correoconfig.nombre_remitente);
                            MailAddress para = new MailAddress(user_destinatario.user_email,
                                user_destinatario.user_nombre + " " + user_destinatario.user_apellido);
                            MailMessage mensaje = new MailMessage(de, para);
                            mensaje.Bcc.Add("liliana.avila@exiware.com");
                            mensaje.Bcc.Add("correospruebaexi2019@gmail.com");
                            mensaje.ReplyToList.Add(new MailAddress(user_remitente.user_email,
                                user_remitente.user_nombre + " " + user_remitente.user_apellido));
                            mensaje.Subject = "Solicitud Autorización facturación referencia " + codigo;
                            mensaje.BodyEncoding = Encoding.Default;
                            mensaje.IsBodyHtml = true;
                            string html = "";
                            html += "<h4>Cordial Saludo</h4><br>";
                            html += "<p>El usuario " + user_remitente.user_nombre + " " + user_remitente.user_apellido +
                                    " solicita autorización para facturacion de la "
                                    + " referencia " + codigo + " por precio de venta menor al costo </p><br /><br />";
                            html += "Por favor ingrese a la plataforma para dar autorización.";
                            mensaje.Body = html;

                            SmtpClient cliente = new SmtpClient(correoconfig.smtp_server)
                            {
                                Port = correoconfig.puerto,
                                UseDefaultCredentials = false,
                                Credentials = new NetworkCredential(correoconfig.usuario, correoconfig.password),
                                EnableSsl = true
                            };
                            cliente.Send(mensaje);

                            notificaciones envio = new notificaciones
                            {
                                user_remitente = usuario_actual,
                                asunto = "Notificación solicitud autorización facturación referencia",
                                fecha_envio = DateTime.Now,
                                enviado = true,
                                user_destinatario = usuario_autorizacion,
                                autorizacion_id = autorizacion_id
                            };
                            context.notificaciones.Add(envio);
                            context.SaveChanges();
                        }
                    }
                    catch (Exception ex)
                    {
                        notificaciones envio = new notificaciones
                        {
                            user_remitente = usuario_actual,
                            asunto = "Notificación solicitud autorización facturación referencia",
                            fecha_envio = DateTime.Now,
                            user_destinatario = usuario_autorizacion,
                            autorizacion_id = autorizacion_id,
                            enviado = false,
                            razon_no_envio = ex.Message
                        };
                        context.notificaciones.Add(envio);
                        context.SaveChanges();
                        //notificacion no enviada
                        result = -1;
                    }
                }
                else
                {
                    autorizaciones noAutorizo = context.autorizaciones.FirstOrDefault(x => x.ref_codigo == codigo
                                                                                && x.autorizado == false
                                                                                && x.fecha_autorizacion != null
                                                                                && x.fecha_creacion.Value.Year ==
                                                                                DateTime.Now.Year
                                                                                && x.fecha_creacion.Value.Month ==
                                                                                DateTime.Now.Month
                                                                                && x.fecha_creacion.Value.Day ==
                                                                                DateTime.Now.Day);
                    if (noAutorizo != null)
                    {
                        result = 3;
                    }
                    else
                    {
                        // ya existe
                        result = 2;
                    }
                }
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarAutorizacion(string codigo)
        {
            string[] cadena = codigo.Split('|');


            string refcodigo = cadena[0];
            var data = (from a in context.autorizaciones
                        where a.ref_codigo == refcodigo
                              && a.autorizado == true
                              && a.fecha_autorizacion != null
                              && a.documento == null
                              && a.fecha_creacion.Value.Year == DateTime.Now.Year
                              && a.fecha_creacion.Value.Month == DateTime.Now.Month
                              && a.fecha_creacion.Value.Day == DateTime.Now.Day
                        select new
                        {
                            a
                        }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarCondicionPorTercero(int id)
        {
            var data = (from t in context.fpago_tercero
                        join f in context.tercero_cliente
                            on t.fpago_id equals f.cod_pago_id
                        where f.tercero_id == id
                        select new
                        {
                            id = t.fpago_id,
                            nombre = t.fpago_nombre
                        }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarDescuentoPorTercero(int cliente, string codigo)
        {
            var tercero = (from t in context.tercero_cliente
                           where t.tercero_id == cliente
                           select new
                           {
                               descuento = t.dscto_rep
                           }).ToList();

            var repuesto = from t in context.icb_referencia
                           where t.ref_codigo == codigo
                           select new
                           {
                               descuento = t.max_desc
                           };

            var data = new
            {
                tercero,
                repuesto
            };

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult clienteDesbloqueado(int cliente)
        {
            var data = (from t in context.tercero_cliente
                        join it in context.icb_terceros
                            on t.tercero_id equals it.tercero_id
                        where t.tercero_id == cliente
                        select new
                        {
                            it.doc_tercero,
                            t.bloqueado,
                            t.razoninactivo
                        }).FirstOrDefault();

            if (data.bloqueado == false)
            {
                return Json(new { bloqueado = false }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { bloqueado = true, mensaje = "Cliente bloqueado para facturar por " + data.razoninactivo },
                JsonRequestBehavior.AllowGet);
        }

        public JsonResult ValidarCupo(int? cliente, int? valorFactura)
        {
            if (cliente != null)
            {
                int? valorFactura2 = valorFactura != null ? valorFactura : 0;
                var data = (from c in context.vw_doccartera
                            where c.tipofacturacion == 4 && c.nit == cliente
                            select new
                            {
                                c.saldo
                            }).ToList();

                decimal? acumulado = data.Sum(x => x.saldo);
                decimal? total = acumulado + valorFactura2;

                decimal? cupo = (from t in context.tercero_cliente
                                 where t.tercero_id == cliente
                                 select
                                     t.cupocredito
                    ).FirstOrDefault();
                if (cupo == null || cupo == 0)
                {
                    return Json(new { permitir = true }, JsonRequestBehavior.AllowGet);
                }

                decimal? cupoDisponible = cupo - acumulado;

                if (total <= cupo)
                {
                    return Json(new { permitir = true }, JsonRequestBehavior.AllowGet);
                }

                return Json(new { permitir = false, cupoDisponible }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { permitir = false }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult devolverFactura(int id)
        {

            var result = 0;
            var b = context.encab_documento.Find(id);

            b.devolucion = true;
            b.estado_factura = 2;

            context.Entry(b).State = EntityState.Modified;
            int resultado = context.SaveChanges();

            if (resultado > 0)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return Json(result, JsonRequestBehavior.AllowGet);

        }

        public JsonResult FiltroDevolucion(string fecha1, string fecha2)
        {
            //parametro de sistema tipo de factura venta repuestos
            icb_sysparameter param = context.icb_sysparameter.Where(d => d.syspar_cod == "P127").FirstOrDefault();
            int param2 = param != null ? Convert.ToInt32(param.syspar_value) : 4;


            var data2 = (from e in context.encab_documento
                         join tp in context.tp_doc_registros
                             on e.tipo equals tp.tpdoc_id
                         join b in context.bodega_concesionario
                             on e.bodega equals b.id
                         join t in context.icb_terceros
                             on e.nit equals t.tercero_id
                         join l in context.lineas_documento
                            on e.idencabezado equals l.id_encabezado
                         join u in context.users
                         on e.vendedor equals u.user_id
                         join d in context.estados_encabezado
                            on e.estado_factura equals d.id into estados
                         from fd in estados.DefaultIfEmpty()
                         where tp.tipo == param2 && e.prefactura == false && e.devolucion == true

                         select new
                         {
                             tipoDocumento = "(" + tp.prefijo + ") " + tp.tpdoc_nombre,
                             e.numero,
                             nit = t.prinom_tercero != null
                                 ? "(" + t.doc_tercero + ")" + t.prinom_tercero + " " + t.segnom_tercero + " " +
                                   t.apellido_tercero + " " + t.segapellido_tercero
                                 : "(" + t.doc_tercero + ") " + t.razon_social,
                             e.fecha,
                             documento = t.doc_tercero,
                             cliente = t.prinom_tercero + " " + t.segnom_tercero + " " + t.apellido_tercero + " " + t.segapellido_tercero,
                             doc = e.nit,
                             asesor = u.user_nombre + " " + u.user_apellido,
                             e.valor_total,
                             id = e.idencabezado,
                             bodega = b.bodccs_nombre,
                             estado = e.anulado==true? "Devuelta" : "Comprado",
                             fecha_devolucion = e.fec_actualizacion,
                             l.id_tarifa_cliente,
                             IC_Bolsa = e.valor_bolsa,
                             estadoFac = e.estado_factura != null ? fd.estado : "Solicitada",
                             colorhx = e.estado_factura != null ? fd.colorhx : "#2ABBDB",
                             anulacion = e.anulacion != null ? e.motivo_anulacion.motivo : ""
                         }).OrderBy(e => e.fecha).ToList();


            if (!string.IsNullOrWhiteSpace(fecha1) && !string.IsNullOrWhiteSpace(fecha2))
            {
                var date1 = DateTime.Now;
                var date2 = DateTime.Now;

                var convertir1 = DateTime.TryParse(fecha1, out date1);
                var convertir2 = DateTime.TryParse(fecha2, out date2);

                date2 = date2.AddDays(1);

                var data = data2.Where(d => d.fecha >= date1 && d.fecha <= date2).GroupBy(d => d.id).Select(c => new //Where(c=> d.)
                {
                    tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                    numero = c.Select(e => e.numero).FirstOrDefault(),
                    nit = c.Select(e => e.nit).FirstOrDefault(),
                    fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                    valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                    id = c.Key,
                    bodega = c.Select(e => e.bodega).FirstOrDefault(),
                    estado = c.Select(e => e.estado).FirstOrDefault(),
                    documento = c.Select(e => e.documento).FirstOrDefault(),
                    cliente = c.Select(e => e.cliente).FirstOrDefault(),
                    asesor = c.Select(e => e.asesor).FirstOrDefault(),
                    doc = c.Select(e => e.doc).FirstOrDefault(),
                    fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                    ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                    : "",
                    tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
                    estadoFac = c.Select(e => e.estadoFac).FirstOrDefault(),
                    colorhx = c.Select(e => e.colorhx).FirstOrDefault(),
                    anulacion = c.Select(e => e.anulacion).FirstOrDefault(),
                }).ToList();

                return Json(data, JsonRequestBehavior.AllowGet);
            }
            else if (!string.IsNullOrWhiteSpace(fecha1))
            {
                var date1 = DateTime.Now;

                var convertir1 = DateTime.TryParse(fecha1, out date1);

                var data = data2.Where(d => d.fecha >= date1).GroupBy(d => d.id).Select(c => new //Where(c=> d.)
                {
                    tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                    numero = c.Select(e => e.numero).FirstOrDefault(),
                    nit = c.Select(e => e.nit).FirstOrDefault(),
                    fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                    valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                    id = c.Key,
                    bodega = c.Select(e => e.bodega).FirstOrDefault(),
                    estado = c.Select(e => e.estado).FirstOrDefault(),
                    documento = c.Select(e => e.documento).FirstOrDefault(),
                    cliente = c.Select(e => e.cliente).FirstOrDefault(),
                    asesor = c.Select(e => e.asesor).FirstOrDefault(),
                    doc = c.Select(e => e.doc).FirstOrDefault(),
                    fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                    ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                    : "",
                    tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
                    estadoFac = c.Select(e => e.estadoFac).FirstOrDefault(),
                    colorhx = c.Select(e => e.colorhx).FirstOrDefault(),
                    anulacion = c.Select(e => e.anulacion).FirstOrDefault(),
                }).ToList();

                return Json(data, JsonRequestBehavior.AllowGet);
            }
            else if (!string.IsNullOrWhiteSpace(fecha2))
            {
                var date1 = DateTime.Now;

                var convertir1 = DateTime.TryParse(fecha2, out date1);

                date1 = date1.AddDays(1);

                var data = data2.Where(d => d.fecha <= date1).GroupBy(d => d.id).Select(c => new
                {
                    tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                    numero = c.Select(e => e.numero).FirstOrDefault(),
                    nit = c.Select(e => e.nit).FirstOrDefault(),
                    fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                    valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                    id = c.Key,
                    bodega = c.Select(e => e.bodega).FirstOrDefault(),
                    estado = c.Select(e => e.estado).FirstOrDefault(),
                    documento = c.Select(e => e.documento).FirstOrDefault(),
                    cliente = c.Select(e => e.cliente).FirstOrDefault(),
                    asesor = c.Select(e => e.asesor).FirstOrDefault(),
                    doc = c.Select(e => e.doc).FirstOrDefault(),
                    fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                    ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                    : "",
                    tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
                    estadoFac = c.Select(e => e.estadoFac).FirstOrDefault(),
                    colorhx = c.Select(e => e.colorhx).FirstOrDefault(),
                    anulacion = c.Select(e => e.anulacion).FirstOrDefault(),
                }).ToList();

                return Json(data, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(0, JsonRequestBehavior.AllowGet);
            }


        }

        public JsonResult BuscarDatosDevolucion()
        {
            //parametro de sistema tipo de factura venta repuestos
            icb_sysparameter param = context.icb_sysparameter.Where(d => d.syspar_cod == "P127").FirstOrDefault();
            int param2 = param != null ? Convert.ToInt32(param.syspar_value) : 4;


            var data2 = (from e in context.encab_documento
                         join tp in context.tp_doc_registros
                             on e.tipo equals tp.tpdoc_id
                         join b in context.bodega_concesionario
                             on e.bodega equals b.id
                         join t in context.icb_terceros
                             on e.nit equals t.tercero_id
                         join l in context.lineas_documento
                            on e.idencabezado equals l.id_encabezado
                         join u in context.users
                         on e.vendedor equals u.user_id
                         join d in context.estados_encabezado
                            on e.estado_factura equals d.id into estados
                         from fd in estados.DefaultIfEmpty()
                         where tp.tipo == param2 && e.prefactura == false && e.devolucion == true

                         select new
                         {
                             tipoDocumento = "(" + tp.prefijo + ") " + tp.tpdoc_nombre,
                             e.numero,
                             nit = t.prinom_tercero != null
                                 ? "(" + t.doc_tercero + ")" + t.prinom_tercero + " " + t.segnom_tercero + " " +
                                   t.apellido_tercero + " " + t.segapellido_tercero
                                 : "(" + t.doc_tercero + ") " + t.razon_social,
                             e.fecha,
                             documento = t.doc_tercero,
                             cliente = t.prinom_tercero + " " + t.segnom_tercero + " " + t.apellido_tercero + " " + t.segapellido_tercero,
                             doc = e.nit,
                             asesor = u.user_nombre + " " + u.user_apellido,
                             e.valor_total,
                             id = e.idencabezado,
                             bodega = b.bodccs_nombre,
                             estado = e.anulado==true? "Devuelta" : "Comprado",
                             fecha_devolucion = e.fec_actualizacion,
                             l.id_tarifa_cliente,
                             IC_Bolsa = e.valor_bolsa,
                             estadoFac = e.estado_factura != null ? fd.estado : "Solicitada",
                             colorhx = e.estado_factura != null ? fd.colorhx : "#2ABBDB",
                             anulacion = e.anulacion != null ? e.motivo_anulacion.motivo : "",
                             motivoAnulacion = e.motivo_anulada != null ? e.motivo_anulada : "",
                         }).OrderBy(e => e.fecha).ToList();

            var data = data2.GroupBy(d => d.id).Select(c => new
            {
                tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                numero = c.Select(e => e.numero).FirstOrDefault(),
                nit = c.Select(e => e.nit).FirstOrDefault(),
                fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                id = c.Key,
                bodega = c.Select(e => e.bodega).FirstOrDefault(),
                estado = c.Select(e => e.estado).FirstOrDefault(),
                documento = c.Select(e => e.documento).FirstOrDefault(),
                cliente = c.Select(e => e.cliente).FirstOrDefault(),
                asesor = c.Select(e => e.asesor).FirstOrDefault(),
                doc = c.Select(e => e.doc).FirstOrDefault(),
                fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                      ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                      : "",
                tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
                estadoFac = c.Select(e => e.estadoFac).FirstOrDefault(),
                colorhx = c.Select(e => e.colorhx).FirstOrDefault(),
                anulacion = c.Select(e => e.anulacion).FirstOrDefault(),
                motivoAnulacion = c.Select(e => e.motivoAnulacion).FirstOrDefault(),
            }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        //browser facturacion
        public JsonResult BuscarDatosVenta()
        {
            //parametro de sistema tipo de factura venta repuestos
            icb_sysparameter param = context.icb_sysparameter.Where(d => d.syspar_cod == "P127").FirstOrDefault();
            int param2 = param != null ? Convert.ToInt32(param.syspar_value) : 4;


            var data2 = (from e in context.encab_documento
                         join tp in context.tp_doc_registros
                             on e.tipo equals tp.tpdoc_id
                         join b in context.bodega_concesionario
                             on e.bodega equals b.id
                         join t in context.icb_terceros
                             on e.nit equals t.tercero_id
                         join l in context.lineas_documento
                            on e.idencabezado equals l.id_encabezado
                         join u in context.users
                         on e.vendedor equals u.user_id
                         join d in context.estados_encabezado
                         on e.estado_factura equals d.id into estados
                         from fd in estados.DefaultIfEmpty()
                         where tp.tipo == param2 && e.prefactura == false && e.devolucion == false

                         select new
                         {
                             tipoDocumento = "(" + tp.prefijo + ") " + tp.tpdoc_nombre,
                             e.numero,
                             nit = t.prinom_tercero != null
                                 ? t.prinom_tercero + " " + t.segnom_tercero + " " +
                                   t.apellido_tercero + " " + t.segapellido_tercero + "(" + t.doc_tercero + ")"
                                 : t.razon_social + "(" + t.doc_tercero + ") ",
                             e.fecha,
                             documento = t.doc_tercero,
                             cliente = t.prinom_tercero + " " + t.segnom_tercero + " " + t.apellido_tercero + " " + t.segapellido_tercero,
                             doc = e.nit,
                             asesor = u.user_nombre + " " + u.user_apellido,
                             e.valor_total,
                             id = e.idencabezado,
                             bodega = b.bodccs_nombre,
                             estado = e.anulado==true? "Devuelta" : "Comprado",
                             fecha_devolucion = e.fec_actualizacion,
                             l.id_tarifa_cliente,
                             IC_Bolsa = e.valor_bolsa,
                             estadoFac = e.estado_factura != null ? fd.estado : "Solicitada",
                             colorhx = e.estado_factura != null ? fd.colorhx : "#2ABBDB",
                         }).OrderBy(e => e.fecha).ToList();

            var data = data2.GroupBy(d => d.id).Select(c => new
            {
                tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                numero = c.Select(e => e.numero).FirstOrDefault(),
                nit = c.Select(e => e.nit).FirstOrDefault(),
                fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                id = c.Key,
                bodega = c.Select(e => e.bodega).FirstOrDefault(),
                estado = c.Select(e => e.estado).FirstOrDefault(),
                documento = c.Select(e => e.documento).FirstOrDefault(),
                cliente = c.Select(e => e.cliente).FirstOrDefault(),
                asesor = c.Select(e => e.asesor).FirstOrDefault(),
                doc = c.Select(e => e.doc).FirstOrDefault(),
                fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                      ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                      : "",
                tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
                estadoFac = c.Select(e => e.estadoFac).FirstOrDefault(),
                colorhx = c.Select(e => e.colorhx).FirstOrDefault(),
            }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarFactura()
        {
            //parametro de sistema tipo de factura venta repuestos
            //revisando el icb_sysparameter se verifico que debe traer los codigos p102 y p103 facturacion repuestos y facturacion accesorios
            icb_sysparameter param = context.icb_sysparameter.Where(d => d.syspar_cod == "P102").FirstOrDefault();
            icb_sysparameter param3 = context.icb_sysparameter.Where(d => d.syspar_cod == "P103").FirstOrDefault();
            int param2 = Convert.ToInt32(param.syspar_value);
            int param4 = Convert.ToInt32(param3.syspar_value);

            var data2 = context.vw_consultaRepYAcces.OrderBy(e => e.fecha).ToList();

            var data = data2.GroupBy(d => d.id).Select(c => new
            {
                tipoDocumento = c.Select(e => e.tipoDocumento).FirstOrDefault(),
                numero = c.Select(e => e.numero).FirstOrDefault(),
                nit = c.Select(e => e.nit).FirstOrDefault(),
                fecha = c.Select(e => e.fecha).FirstOrDefault().ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                valor_total = c.Select(e => e.valor_total).FirstOrDefault().ToString("N0"),
                id = c.Key,
                bodega = c.Select(e => e.bodega).FirstOrDefault(),
                estado = c.Select(e => e.estado).FirstOrDefault(),
                documento = c.Select(e => e.documento).FirstOrDefault(),
                cliente = c.Select(e => e.cliente).FirstOrDefault(),
                asesor = c.Select(e => e.asesor).FirstOrDefault(),
                doc = c.Select(e => e.doc).FirstOrDefault(),
                fecha_devolucion = c.Select(e => e.fecha_devolucion).FirstOrDefault() != null
                      ? c.Select(e => e.fecha_devolucion).FirstOrDefault().Value.ToString("yyyy/MM/dd", new CultureInfo("en-US"))
                      : "",
                tipoTarifa = (c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 1 ? "Normal" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 2 ? "Interno" : c.Select(e => e.id_tarifa_cliente).FirstOrDefault() == 3 ? "Empleado" : "Garantía"),
            }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult BuscarConceptos(int? idTpDoc)
        {
            var buscarConceptos = context.tpdocconceptos.Where(x => x.tipodocid == idTpDoc).Select(x => new
            {
                x.id,
                x.Descripcion
            }).ToList();
            var buscarConceptos2 = context.tpdocconceptos2.Where(x => x.tipodocid == idTpDoc).Select(x => new
            {
                x.id,
                x.Descripcion
            }).ToList();

            return Json(new { buscarConceptos, buscarConceptos2 }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult crearPDFfacturacionrepuestos(int? id, int param)
        {
            var resolucion = (from e in context.encab_documento
                              join tp in context.tp_doc_registros
                                  on e.tipo equals tp.tpdoc_id
                              join b in context.bodega_concesionario
                                  on e.bodega equals b.id
                              join c in context.grupoconsecutivos
                                  on new { x1 = e.tipo, x2 = e.bodega } equals new { x1 = c.documento_id, x2 = c.bodega_id }
                              join d in context.resolucionfactura
                                  on new { y1 = e.tipo, y2 = c.grupo } equals new { y1 = d.tipodoc, y2 = d.grupo }
                              where e.idencabezado == id
                              select new
                              {
                                  tp.prefijo,
                                  d.resolucion,
                                  d.fechaini,
                                  d.fechafin,
                                  d.consecini,
                                  d.consecfin
                              }).ToList();

            var formapagoter = (from a in context.encab_documento
                                join b in context.fpago_tercero
                                    on a.fpago_id equals b.fpago_id
                                where a.idencabezado == id
                                select new
                                {
                                    b.fpago_nombre
                                }).ToList();


            var dircliente = (from en in context.encab_documento
                              join te in context.terceros_direcciones
                                  on en.nit equals te.idtercero
                              where en.idencabezado == id
                              select new
                              {
                                  te.direccion
                              }).ToList();
            string dircli = dircliente.Max(c => c.direccion);

            var data2 = (from df in context.lineas_documento
                         join re in context.icb_referencia
                             on df.codigo equals re.ref_codigo
                         where df.id_encabezado == id && df.id_tarifa_cliente != 4 && df.id_tarifa_cliente != 2
                         select new
                         {
                             id_Factura = df.id_encabezado,
                             id_detalleFactura = df.id,
                             referenciaFactura = df.codigo,
                             descripcionFactura = re.ref_descripcion,
                             cantFactura = df.cantidad,
                             pordescuentoFactura = df.porcentaje_descuento != null ? df.porcentaje_descuento.Value : 0,
                             porivaFactura = df.porcentaje_iva != null ? df.porcentaje_iva.Value : 0,
                             preciounitarioFactura = df.valor_unitario,
                             valorFactura = df.valor_unitario * df.cantidad,
                             //predeterminado tarifa 1 lo eligió Paulo
                             tipo_tarifa = df.id_tarifa_cliente != null ? df.id_tarifa_cliente.Value : 1,
                         }).ToList();

            List<detalleFacturacion> detalleFacturacion001 = data2.Select(c => new detalleFacturacion
            {
                id_Factura = c.id_Factura,
                id_detalleFactura = c.id_detalleFactura,
                referenciaFactura = c.referenciaFactura,
                descripcionFactura = c.descripcionFactura,
                cantFactura = c.cantFactura.ToString("N0"),
                pordescuentoFactura = c.pordescuentoFactura.ToString("N0"),
                porivaFactura = c.porivaFactura.ToString("N0"),
                // preciounitarioFactura = c.preciounitarioFactura.ToString("N0"),
                preciounitarioFactura =
                    (c.preciounitarioFactura / ((100 - Convert.ToDecimal(c.pordescuentoFactura, Cultureinfo)) / 100)).ToString("N0", Cultureinfo),
                valorFactura =
                    (c.cantFactura *
                     (c.preciounitarioFactura / ((100 - Convert.ToDecimal(c.pordescuentoFactura, Cultureinfo)) / 100)))
                    .ToString("N0", Cultureinfo),
                montoivaFactura =
                    (c.cantFactura *
                     (c.preciounitarioFactura / ((100 - Convert.ToDecimal(c.pordescuentoFactura, Cultureinfo)) / 100)) *
                     (Convert.ToDecimal(c.porivaFactura, Cultureinfo) / 100)).ToString("N0", Cultureinfo),
                tipo_tarifa = c.tipo_tarifa == 1 ? "Normal" :
                    c.tipo_tarifa == 2 ? "Interno" :
                    c.tipo_tarifa == 3 ? "Empleado" : "Garantía"
            }).ToList();

            var cabeceraFactura = (from e in context.encab_documento
                                   join tp in context.tp_doc_registros
                                       on e.tipo equals tp.tpdoc_id
                                   join b in context.bodega_concesionario
                                       on e.bodega equals b.id
                                   join t in context.icb_terceros
                                       on e.nit equals t.tercero_id
                                   join emp in context.tablaempresa
                                       on b.concesionarioid equals emp.id
                                   where e.idencabezado == id
                                   select new
                                   {
                                       // Empresa
                                       id_emp = emp.id,
                                       nomemp = emp.nombre_empresa,
                                       diremp = emp.direccion,
                                       nitemp = emp.nit,
                                       tp.prefijo,
                                       b.bodccs_nombre,
                                       //Factura
                                       //id_factura =
                                       numfactura = e.numero,
                                       fechaFactura = e.fecha,
                                       //formapagoFactura  =
                                       fechavenceFactura = e.vencimiento,
                                       // tipoDocumento = "(" + tp.prefijo + ") " + tp.tpdoc_nombre,
                                       // numero = e.numero,
                                       // nit = t.prinom_tercero != null ? "(" + t.doc_tercero + ")" + t.prinom_tercero + " " + t.segnom_tercero + " " + t.apellido_tercero + " " + t.segapellido_tercero : "(" + t.doc_tercero + ") " + t.razon_social,
                                       // fecha = e.fecha.ToString(),
                                       // valor_total = e.valor_total,
                                       // id = e.idencabezado,
                                       // bodega = b.bodccs_nombre,
                                       //// estado = e.valor_aplicado != null ? "Devuelta" : "Comprado",
                                       // fecha_devolucion = e.fec_actualizacion.Value.ToString(),

                                       //Cliente
                                       id_Cliente = t.tercero_id,
                                       docCliente = t.doc_tercero,
                                       //dirCliente = dircli,
                                       nomCliente = t.prinom_tercero != null
                                           ? t.prinom_tercero + " " + t.segnom_tercero + " " + t.apellido_tercero + " " +
                                             t.segapellido_tercero
                                           : t.razon_social,
                                       telCliente = t.telf_tercero,
                                       ciuCliente = emp.direccion,

                                       //vehiculo

                                       //Vendedor

                                       //TOTALES
                                       totalFactura = e.valor_total,
                                       //valordescuento =  
                                       valorfletes = e.fletes,
                                       // baseiva = e.iva, 
                                       //subtotal =
                                       valoriva = e.iva,
                                       ic_bolsa = e.valor_bolsa,
                                       //totalFactura = 
                                   }).FirstOrDefault();

            string root = Server.MapPath("~/Pdf/");
            string pdfname = string.Format("{0}.pdf", Guid.NewGuid().ToString());
            string path = Path.Combine(root, pdfname);
            path = Path.GetFullPath(path);
            CultureInfo elGR = CultureInfo.CreateSpecificCulture("el-GR");

            if (resolucion.Count == 0)
            {
                resolucion = null;

            }

            FacturacionPDFModel obj = new FacturacionPDFModel
            {
                //Empresa
                id_Empresa = cabeceraFactura.id_emp,
                nomEmpresa = cabeceraFactura.nomemp != null ? cabeceraFactura.nomemp : "",
                dirEmpresa = cabeceraFactura.diremp != null ? cabeceraFactura.diremp : "",
                nitEmpresa = cabeceraFactura.nitemp != null ? cabeceraFactura.nitemp : "",
                bodega = cabeceraFactura.bodccs_nombre,
                //Cliente
                tipo_factura = param == 1 ? "Original" : "Copia",
                id_Cliente = cabeceraFactura.id_Cliente,
                docCliente = ": " + cabeceraFactura.docCliente,
                nomCliente = ": " + cabeceraFactura.nomCliente,
                dirCliente = ": " + dircli != null ? dircli : "",
                telCliente = ": " + cabeceraFactura.telCliente != null ? cabeceraFactura.telCliente : "",
                ciuCliente = ": " + cabeceraFactura.diremp != null ? cabeceraFactura.diremp : "",
                //Factura
                //id_Factura = cabeceraFactura.
                numFactura = Convert.ToString(cabeceraFactura.numfactura) != null ? Convert.ToString(cabeceraFactura.numfactura) : "",
                fechaFactura = cabeceraFactura.fechaFactura.ToString("yyyy/MM/dd", new CultureInfo("en-US")),
                formapagoFactura = formapagoter[0].fpago_nombre != null ? formapagoter[0].fpago_nombre : "",
                fechavenceFactura = cabeceraFactura.fechavenceFactura != null ?
                    cabeceraFactura.fechavenceFactura.Value.ToString("yyyy/MM/dd", new CultureInfo("en-US")) : "",
                //TOTALES
                valorbruto = Convert.ToDecimal(detalleFacturacion001.Sum(vb =>
                    Convert.ToDecimal(vb.cantFactura, Cultureinfo) * Convert.ToDecimal(vb.preciounitarioFactura, Cultureinfo)), Cultureinfo).ToString("N0", Cultureinfo),
                valordescuento = Convert.ToDecimal(detalleFacturacion001.Sum(vb =>
                    Convert.ToDecimal(vb.pordescuentoFactura, Cultureinfo) / 100 * Convert.ToDecimal(vb.cantFactura, Cultureinfo) *
                    Convert.ToDecimal(vb.preciounitarioFactura, Cultureinfo)), Cultureinfo).ToString("N0", Cultureinfo),
                valorfletes = cabeceraFactura.valorfletes.ToString("N0", Cultureinfo),
                baseiva =
                    (Convert.ToDecimal(detalleFacturacion001.Sum(vb =>
                         Convert.ToDecimal(vb.cantFactura, Cultureinfo) * Convert.ToDecimal(vb.preciounitarioFactura, Cultureinfo)), Cultureinfo) -
                     Convert.ToDecimal(detalleFacturacion001.Sum(vb =>
                         Convert.ToDecimal(vb.pordescuentoFactura, Cultureinfo) / 100 * Convert.ToDecimal(vb.cantFactura, Cultureinfo) *
                         Convert.ToDecimal(vb.preciounitarioFactura, Cultureinfo)), Cultureinfo)).ToString("N0", Cultureinfo),
                //valoriva = (Convert.ToDecimal(detalleFacturacion001.Sum(vb => Convert.ToDecimal(vb.montoivaFactura)))).ToString("N0"),
                valoriva = cabeceraFactura.valoriva.ToString("N0", Cultureinfo),

                totalFactura = cabeceraFactura.totalFactura.ToString("N0") != null ? cabeceraFactura.totalFactura.ToString("N0", Cultureinfo) : "",
                detalleFacturacion = detalleFacturacion001,
                //Resolucion
                prefi = resolucion != null ? resolucion[0].prefijo : cabeceraFactura.prefijo,
                referencia = resolucion != null ? resolucion[0].resolucion : "",
                fechai = resolucion != null ? resolucion[0].fechaini.ToString("yyyy/MM/dd", new CultureInfo("en-US")) : "",
                facti = resolucion != null ? resolucion[0].consecini.ToString() : "",
                factf = resolucion != null ? resolucion[0].consecfin.ToString() : ""



            };

            //valido si existe por imprimir esta factura y la marco como impresa
            log_impresion_documentos existefa = context.log_impresion_documentos.Where(d => d.idencabezado == id && d.impreso == false)
                .FirstOrDefault();
            if (existefa != null)
            {
                existefa.impreso = true;
                existefa.fecha_impresion = DateTime.Now;
                context.Entry(existefa).State = EntityState.Modified;
                context.SaveChanges();
            }

            string nombre = "Factura";
            string nombre2 = nombre;
            nombre = nombre + "file.pdf";

            string customSwitches = string.Format("--print-media-type --allow {0} --header-html {0} --header-spacing 5 --footer-html {1} --footer-spacing 0",
            Url.Action("CabeceraFacturaPDF", "FacturacionRepuestos", new { area = "", prefijo = obj.prefi, factura = obj.numFactura, bodega = obj.bodega, formapagoFactura = obj.formapagoFactura, fechavenceFactura = obj.fechavenceFactura, tipo_factura = obj.tipo_factura }, Request.Url.Scheme), Url.Action("PieFacturaPDF", "FacturacionRepuestos", new { area = "" }, Request.Url.Scheme));

            ViewAsPdf something = new ViewAsPdf("crearPDFfacturacionrepuestos", obj)
            {
                PageOrientation = Orientation.Landscape,
                FileName = nombre,
                CustomSwitches = customSwitches,
                PageSize = Size.Letter,
                PageMargins = new Margins { Top = 40, Bottom = 20 }
            };

            return something;

            //ViewAsPdf something = new ViewAsPdf("crearPDFfacturacionrepuestos", obj);
            //return something;
            //// return View(); // solo mientras esta en espera 
        }

        [AllowAnonymous]
        public ActionResult CabeceraFacturaPDF(string bodega, string formapagoFactura, string fechavenceFactura, string tipo_factura, string prefijo, string factura)
        {
            var recibido = Request;
            var modelo2 = new FacturacionPDFModel
            {
                bodega = bodega,
                formapagoFactura = formapagoFactura,
                fechavenceFactura = fechavenceFactura,
                tipo_factura = tipo_factura,
                prefi = prefijo,
                numFactura = factura,

            };

            return View(modelo2);
        }

        [AllowAnonymous]
        public ActionResult PieFacturaPDF()
        {
            return View();
        }


        public JsonResult buscarKit(string codigo)
        {
            int id = Convert.ToInt32(codigo);


            var buscar = (from a in context.referenciaskits
                          join b in context.icb_referencia
                              on a.codigo equals b.ref_codigo
                          join c in context.codigo_iva
                              on b.idporivaventa equals c.id
                          where a.idkitaccesorios == id
                          select new
                          {
                              a.codigo,
                              b.ref_descripcion,
                              a.cantidad,
                              a.precio,
                              c.porcentaje
                          }).ToList();

            var data = buscar.Select(x => new
            {
                x.codigo,
                referencia = x.codigo + " " + x.ref_descripcion,
                x.cantidad,
                x.precio,
                x.porcentaje,
                antesIva = x.cantidad * x.precio,
                conIva = x.cantidad * x.precio * x.porcentaje / 100,
                valorTotal = x.cantidad * x.precio + x.cantidad * x.precio * x.porcentaje / 100
            });

            return Json(data, JsonRequestBehavior.AllowGet);
        }
        public JsonResult validacionInventarioStock(string codigo, int cantidad, int bodega)
        {
            int buscarInventario = context.vw_inventario_hoy
                .Where(x => x.bodega == bodega && x.ref_codigo == codigo && x.stock >= cantidad).Count();

            if (buscarInventario == 1)
            {
                return Json(new { data = true }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { data = false }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult validacionInventario(string codigo, int cantidad, int bodega)
        {
            int buscarInventario = context.vw_inventario_hoy
                .Where(x => x.bodega == bodega && x.ref_codigo == codigo && x.stock >= cantidad).Count();

            if (buscarInventario == 1)
            {
                return Json(new { data = true }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { data = false }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult validarOtrasBodegasStock(string codigo, int cantidad, int bodega)
        {
            var buscarBodegas = (from a in context.vw_inventario_hoy
                                 join b in context.bodega_concesionario
                                     on a.bodega equals b.id
                                 where a.ref_codigo == codigo && a.stock >= cantidad && a.bodega != bodega
                                 select new { b.bodccs_nombre, a.stock, b.id }).ToList();

            if (buscarBodegas == null || buscarBodegas.Count == 0)
            {
                //data es igual a "sin stock"
                return Json(new { data = 0 }, JsonRequestBehavior.AllowGet);
            }

            if (buscarBodegas != null && buscarBodegas.Count > 0)
            {
                //data es igual a "con stock en otras bodegas"
                return Json(new { data = 1, buscarBodegas }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { data = 2, buscarBodegas }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult referenciasKit(int idReferencia)
        {

            var buscar = (from a in context.referenciaskits
                          join b in context.icb_referencia
                              on a.codigo equals b.ref_codigo
                          join c in context.codigo_iva
                              on b.idporivaventa equals c.id
                          where a.idkitaccesorios == idReferencia//1037
                          select new
                          {
                              a.codigo,
                              a.precio
                          }).ToList();

            var data = buscar.Select(x => new
            {
                x.codigo,
                x.precio,
            });

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult buscandoStock(string codigoRef, int bodega, int cantidad)
        {
            decimal cant = context.vw_inventario_hoy.Where(x => x.ref_codigo == codigoRef && x.bodega == bodega)
                .Select(x => x.stock).FirstOrDefault();
            return Json(new { tiene = cant >= cantidad, cant }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult buscarAnticipos(int cliente)
        {
            var info = (from e in context.encab_documento
                        join d in context.tp_doc_registros
                            on e.tipo equals d.tpdoc_id
                        where e.nit == cliente && e.anticipo == true && e.valor_total - e.valor_aplicado != 0
                        select new
                        {
                            e.idencabezado,
                            documento = "(" + d.prefijo + ") " + d.tpdoc_nombre,
                            e.numero,
                            e.fecha,
                            e.valor_total,
                            e.nota1
                        }).ToList();

            var data = info.Select(x => new
            {
                x.idencabezado,
                x.documento,
                x.numero,
                fecha = x.fecha.ToShortDateString(),
                valor_total =
                    context.documentosacruzar.OrderByDescending(d => d.id)
                        .FirstOrDefault(d => d.idencabrecibo == x.idencabezado) != null
                        ? context.documentosacruzar.OrderByDescending(d => d.id)
                            .FirstOrDefault(d => d.idencabrecibo == x.idencabezado).saldo
                        : x.valor_total,
                x.nota1
            }).ToList();

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        //public JsonResult buscarTipoCliente(int cliente)
        //{
        //    var buscartipo = (from a in context.rparametrotipocliente
        //                      join b in context.rtipocliente
        //                      on a.idtipocliente equals b.id
        //                      where a.idtercero == cliente
        //                      select new
        //                      {
        //                          a.idtipocliente,
        //                          b.descripcion
        //                      }).FirstOrDefault();

        //    var estado = false;

        //    if (buscartipo != null)
        //    {
        //        return Json(new { buscartipo, estado = true }, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        return Json(new { buscartipo, estado = false }, JsonRequestBehavior.AllowGet);
        //    }

        //}

        public void BuscarFavoritos(int? menu)
        {
            int usuarioActual = Convert.ToInt32(Session["user_usuarioid"]);

            var buscarFavoritosSeleccionados = (from favoritos in context.favoritos
                                                join menu2 in context.Menus
                                                    on favoritos.idmenu equals menu2.idMenu
                                                where favoritos.idusuario == usuarioActual && favoritos.seleccionado
                                                select new
                                                {
                                                    favoritos.seleccionado,
                                                    favoritos.cantidad,
                                                    menu2.idMenu,
                                                    menu2.nombreMenu,
                                                    menu2.url
                                                }).OrderByDescending(x => x.cantidad).ToList();

            bool esFavorito = false;

            foreach (var favoritosSeleccionados in buscarFavoritosSeleccionados)
            {
                if (favoritosSeleccionados.idMenu == menu)
                {
                    esFavorito = true;
                    break;
                }
            }

            if (esFavorito)
            {
                ViewBag.Favoritos =
                    "<div id='areaFavoritos'><i class='fa fa-close'></i>&nbsp;&nbsp;<a href='#' onclick='AgregarQuitarFavorito();return false;'>Quitar de Favoritos</a><div>";
            }
            else
            {
                ViewBag.Favoritos =
                    "<div id='areaFavoritos'><i class='fa fa-check'></i>&nbsp;&nbsp;<a href='#' onclick='AgregarQuitarFavorito();return false;'>Agregar a Favoritos</a></div>";
            }

            ViewBag.id_menu = menu != null ? menu : 0;
        }


        public JsonResult AgregarRepaPedido(string referencia, decimal valounit, int cantidad, decimal? iva, decimal? descuento, int? tipotarifa, int? ccosto, int pedido)
        {

            try
            {
                icb_referencia_movdetalle pedmovdetalle = new icb_referencia_movdetalle();
                pedmovdetalle.refmov_id = pedido;
                pedmovdetalle.ref_codigo = referencia;
                pedmovdetalle.seq = 0;
                pedmovdetalle.refdet_cantidad = cantidad;
                pedmovdetalle.valor_unitario = valounit;
                pedmovdetalle.userid_creacion = Convert.ToInt32(Session["user_bodega"]);
                pedmovdetalle.fec_creacion = DateTime.Now;
                if (iva != null)
                {
                    pedmovdetalle.poriva = float.Parse(iva.ToString());
                }
                if (descuento != null)
                {
                    pedmovdetalle.pordscto = float.Parse(descuento.ToString());

                }
                pedmovdetalle.idcentro = ccosto;
                pedmovdetalle.tipotarifa = tipotarifa;
                pedmovdetalle.facturado = false;
                pedmovdetalle.solicitado = false;
                pedmovdetalle.traslado = false;
                pedmovdetalle.pedido = false;
                pedmovdetalle.tiene_stock = true;
                pedmovdetalle.desdepedido = 2;
                pedmovdetalle.estado = true;
                pedmovdetalle.cantidad_recibida = 0;
                context.icb_referencia_movdetalle.Add(pedmovdetalle);
                context.SaveChanges();
            }
            catch (Exception ex)
            {

                throw ex;
            }

            return Json(true, JsonRequestBehavior.AllowGet);
        }


        public JsonResult VerificarAutorizacionInterna(int  refmov) {

            var estado = false;
            var repicbmov = context.icb_referencia_movdetalle.Where(x => x.refmov_id == refmov).Select(c => new
                {
                c.ref_codigo,
                c.respuestaInterna,
                c.tipotarifa,
                c.observacionresinterva
                }).ToList();


            int total = repicbmov.Where(x => x.tipotarifa == 2 && x.respuestaInterna == false && x.observacionresinterva != null).Count();
            int totalsin = repicbmov.Where(x => x.tipotarifa == 2 && x.respuestaInterna == null ).Count();

            if (total > 0)
                {
                estado = true;
                var resultado = repicbmov.Where(x => x.tipotarifa == 2 && x.respuestaInterna == false && x.observacionresinterva != null).ToList();
                return Json(new { estado, resultado }, JsonRequestBehavior.AllowGet);
                }
            else if(totalsin>0)
                {
                estado = false;
                var resultados = totalsin;
                return Json(new { estado }, JsonRequestBehavior.AllowGet);
                }

            return Json(new { estado }, JsonRequestBehavior.AllowGet);
            }


        public class precios
        {
            public string referencia { get; set; }
            public decimal? precio { get; set; }
            public decimal? costo { get; set; }
        }
    }
}